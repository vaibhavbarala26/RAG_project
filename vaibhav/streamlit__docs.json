[
{"chunk_id": "chunk_0", "url": "https://docs.streamlit.io/", "title": "Streamlit documentation", "page_title": "Streamlit documentation", "breadcrumbs": "Streamlit documentation", "content": "Streamlit documentation Streamlit is an open-source Python framework for data scientists and AI/ML engineers to deliver dynamic data apps with only a few lines of code. Build and deploy powerful data apps in minutes. Let's get started!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1", "url": "https://docs.streamlit.io/", "title": "Setup and installation", "page_title": "Streamlit documentation", "breadcrumbs": "Setup and installation", "content": "Setup and installation Get set up to start working with Streamlit.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2", "url": "https://docs.streamlit.io/", "title": "API reference", "page_title": "Streamlit documentation", "breadcrumbs": "API reference", "content": "API reference Learn about our APIs, with actionable explanations of specific functions and features.", "prev_chunk_id": "chunk_1", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_3", "url": "https://docs.streamlit.io/", "title": "App gallery", "page_title": "Streamlit documentation", "breadcrumbs": "App gallery", "content": "App gallery Try out awesome apps created by our users, and curated from our forums or Twitter.", "prev_chunk_id": "chunk_2", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_4", "url": "https://docs.streamlit.io/", "title": "Flex containers", "page_title": "Streamlit documentation", "breadcrumbs": "Flex containers", "content": "Flex containers You can set the direction, alignment, and gap of elements in st.container.", "prev_chunk_id": "chunk_3", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_5", "url": "https://docs.streamlit.io/", "title": "Dialog dismissibility", "page_title": "Streamlit documentation", "breadcrumbs": "Dialog dismissibility", "content": "Dialog dismissibility You can control the dismissibility of modal dialogs. You can also configure dismissal reruns and callbacks.", "prev_chunk_id": "chunk_4", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_6", "url": "https://docs.streamlit.io/", "title": "WebSocket ping interval", "page_title": "Streamlit documentation", "breadcrumbs": "WebSocket ping interval", "content": "WebSocket ping interval Streamlit now allows you to configure the WebSocket ping interval with server.websocketPingInterval.", "prev_chunk_id": "chunk_5", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_7", "url": "https://docs.streamlit.io/", "title": "Theme configuration", "page_title": "Streamlit documentation", "breadcrumbs": "Theme configuration", "content": "Theme configuration Try out even more theme configuration options in config.toml, including new color, font, and style settings.", "prev_chunk_id": "chunk_6", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_8", "url": "https://docs.streamlit.io/", "title": "Top navigation", "page_title": "Streamlit documentation", "breadcrumbs": "Top navigation", "content": "Top navigation Use st.navigation with position=\"top\"to create a navigation menu across the top of your app.", "prev_chunk_id": "chunk_7", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_9", "url": "https://docs.streamlit.io/", "title": "Detect theme base", "page_title": "Streamlit documentation", "breadcrumbs": "Detect theme base", "content": "Detect theme base You can detect if the viewer is in light mode or dark mode at runtime with st.context.theme.", "prev_chunk_id": "chunk_8", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_10", "url": "https://docs.streamlit.io/", "title": "Join the community", "page_title": "Streamlit documentation", "breadcrumbs": "Join the community", "content": "Join the community Streamlit is more than just a way to make data apps, it's also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today!", "prev_chunk_id": "chunk_9", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_11", "url": "https://docs.streamlit.io/", "title": "Other Media", "page_title": "Streamlit documentation", "breadcrumbs": "Other Media", "content": "Other Media - GitHubView the Streamlit source code and issue tracker. - YouTubeWatch screencasts made by the Streamlit team and the community. - TwitterFollow @streamlit on Twitter to keep up with the latest news. - LinkedInFollow @streamlit on the world's largest professional network. - NewsletterSign up for communications from Streamlit.", "prev_chunk_id": "chunk_10", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_12", "url": "https://docs.streamlit.io/", "title": "GitHub", "page_title": "Streamlit documentation", "breadcrumbs": "GitHub", "content": "GitHub View the Streamlit source code and issue tracker.", "prev_chunk_id": "chunk_11", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_13", "url": "https://docs.streamlit.io/", "title": "YouTube", "page_title": "Streamlit documentation", "breadcrumbs": "YouTube", "content": "YouTube Watch screencasts made by the Streamlit team and the community.", "prev_chunk_id": "chunk_12", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_14", "url": "https://docs.streamlit.io/", "title": "Twitter", "page_title": "Streamlit documentation", "breadcrumbs": "Twitter", "content": "Twitter Follow @streamlit on Twitter to keep up with the latest news.", "prev_chunk_id": "chunk_13", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_15", "url": "https://docs.streamlit.io/", "title": "LinkedIn", "page_title": "Streamlit documentation", "breadcrumbs": "LinkedIn", "content": "LinkedIn Follow @streamlit on the world's largest professional network.", "prev_chunk_id": "chunk_14", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_16", "url": "https://docs.streamlit.io/", "title": "Newsletter", "page_title": "Streamlit documentation", "breadcrumbs": "Newsletter", "content": "Newsletter Sign up for communications from Streamlit.", "prev_chunk_id": "chunk_15", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_17", "url": "https://docs.streamlit.io/get-started", "title": "Get started with Streamlit", "page_title": "Get started with Streamlit - Streamlit Docs", "breadcrumbs": "Get started with Streamlit", "content": "Get started with Streamlit This Get Started guide explains how Streamlit works, how to install Streamlit on your preferred operating system, and how to create your first Streamlit app!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_18", "url": "https://docs.streamlit.io/get-started", "title": "30 Days of Streamlit 🎈", "page_title": "Get started with Streamlit - Streamlit Docs", "breadcrumbs": "30 Days of Streamlit 🎈", "content": "30 Days of Streamlit 🎈 30 Days of Streamlit 🎈 is a free, self-paced 30 day challenge that teaches you how to build and deploy data apps with Streamlit. Complete the daily challenges, share your solutions with us on Twitter and LinkedIn, and stop by the forum with any questions!", "prev_chunk_id": "chunk_17", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_19", "url": "https://docs.streamlit.io/get-started", "title": "Still have questions?", "page_title": "Get started with Streamlit - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_18", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_20", "url": "https://docs.streamlit.io/get-started/installation", "title": "Install Streamlit", "page_title": "Install Streamlit - Streamlit Docs", "breadcrumbs": "Install Streamlit", "content": "Install Streamlit There are multiple ways to set up your development environment and install Streamlit. Read below to understand these options. Developing locally with Python installed on your own computer is the most common scenario.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_21", "url": "https://docs.streamlit.io/get-started/installation", "title": "Summary for experts", "page_title": "Install Streamlit - Streamlit Docs", "breadcrumbs": "Summary for experts", "content": "Summary for experts - Set up your Python development environment. - Run:pip install streamlit - Validate the installation by running our Hello app:streamlit hello - Jump to ourBasic concepts.", "prev_chunk_id": "chunk_20", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_22", "url": "https://docs.streamlit.io/get-started/installation", "title": "Option 1: I'm comfortable with the command line", "page_title": "Install Streamlit - Streamlit Docs", "breadcrumbs": "Option 1: I'm comfortable with the command line", "content": "Option 1: I'm comfortable with the command line Install Streamlit on your own machine using tools like venv and pip.", "prev_chunk_id": "chunk_21", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_23", "url": "https://docs.streamlit.io/get-started/installation", "title": "Option 2: I prefer a graphical interface", "page_title": "Install Streamlit - Streamlit Docs", "breadcrumbs": "Option 2: I prefer a graphical interface", "content": "Option 2: I prefer a graphical interface Install Streamlit using the Anaconda Distribution graphical user interface. This is also the best approach if you're on Windows or don't have Python set up.", "prev_chunk_id": "chunk_22", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_24", "url": "https://docs.streamlit.io/get-started/installation", "title": "Option 3: I'd rather use a cloud-based environment", "page_title": "Install Streamlit - Streamlit Docs", "breadcrumbs": "Option 3: I'd rather use a cloud-based environment", "content": "Option 3: I'd rather use a cloud-based environment Use Streamlit Community Cloud with GitHub Codespaces so you don't have to go through the trouble of installing Python and setting up an environment.", "prev_chunk_id": "chunk_23", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_25", "url": "https://docs.streamlit.io/get-started/installation", "title": "Option 4: I need something secure, controlled, and in the cloud", "page_title": "Install Streamlit - Streamlit Docs", "breadcrumbs": "Option 4: I need something secure, controlled, and in the cloud", "content": "Option 4: I need something secure, controlled, and in the cloud Use Streamlit in Snowflake to code your apps in the cloud, right alongside your data with role-based access controls.", "prev_chunk_id": "chunk_24", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_26", "url": "https://docs.streamlit.io/get-started/installation", "title": "Still have questions?", "page_title": "Install Streamlit - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_25", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_27", "url": "https://docs.streamlit.io/get-started/fundamentals", "title": "Fundamental concepts", "page_title": "Fundamental concepts - Streamlit Docs", "breadcrumbs": "Fundamental concepts", "content": "Fundamental concepts Are you new to Streamlit and want the grand tour? If so, you're in the right place!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_28", "url": "https://docs.streamlit.io/get-started/fundamentals", "title": "Still have questions?", "page_title": "Fundamental concepts - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_27", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_29", "url": "https://docs.streamlit.io/get-started/tutorials", "title": "First steps building Streamlit apps", "page_title": "First steps building Streamlit apps - Streamlit Docs", "breadcrumbs": "First steps building Streamlit apps", "content": "First steps building Streamlit apps If you've just read through our Basic concepts and want to get your hands on Streamlit. Check out these tutorials. Make sure you have installed Streamlit so you can execute the code yourself.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_30", "url": "https://docs.streamlit.io/get-started/tutorials", "title": "Still have questions?", "page_title": "First steps building Streamlit apps - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_29", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_31", "url": "https://docs.streamlit.io/develop", "title": "Develop", "page_title": "Develop - Streamlit Docs", "breadcrumbs": "Develop", "content": "Develop Get all the information you need to build beautiful, performant web apps with Streamlit!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_32", "url": "https://docs.streamlit.io/develop", "title": "Still have questions?", "page_title": "Develop - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_31", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_33", "url": "https://docs.streamlit.io/develop/concepts", "title": "Development concepts", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "Development concepts", "content": "Development concepts This section gives you background on how different parts of Streamlit work.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_34", "url": "https://docs.streamlit.io/develop/concepts", "title": "Streamlit's architecture and execution model", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "Streamlit's architecture and execution model", "content": "Streamlit's architecture and execution model Streamlit's execution model makes it easy to turn your scripts into beautiful, interactive web apps. - Understand how to run your app. - Understand Streamlit's execution and client-server model. - Understand the primary tools to work with Streamlit reruns.", "prev_chunk_id": "chunk_33", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_35", "url": "https://docs.streamlit.io/develop/concepts", "title": "Multipage apps", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "Multipage apps", "content": "Multipage apps Streamlit provides an automated way to build multipage apps through directory structure. - Learn how to structure and configure your multipage app.", "prev_chunk_id": "chunk_34", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_36", "url": "https://docs.streamlit.io/develop/concepts", "title": "App design considerations", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "App design considerations", "content": "App design considerations Bring together Streamlit's architecture and execution model to design your app. Work with Streamlit commands to render dynamic and interactic content for your users. - Learn how to make your apps performant and easy-to-manage. - Learn how to structure and design your project.", "prev_chunk_id": "chunk_35", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_37", "url": "https://docs.streamlit.io/develop/concepts", "title": "Connections and secrets", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "Connections and secrets", "content": "Connections and secrets - Learn how to manage connections and secrets with Streamlit's convenient, built-in features.", "prev_chunk_id": "chunk_36", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_38", "url": "https://docs.streamlit.io/develop/concepts", "title": "Creating custom components", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "Creating custom components", "content": "Creating custom components Custom components extend Streamlit's functionality. - Learn how to build your own custom component. - Learn how install a third-party component.", "prev_chunk_id": "chunk_37", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_39", "url": "https://docs.streamlit.io/develop/concepts", "title": "Configuration and theming", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "Configuration and theming", "content": "Configuration and theming Streamlit provides a variety options to customize and configure your app. - Learn how to work with configuration options, including server settings, client settings, and theming.", "prev_chunk_id": "chunk_38", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_40", "url": "https://docs.streamlit.io/develop/concepts", "title": "App testing", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "App testing", "content": "App testing Streamlit app testing enables developers to build and run automated tests. Bring your favorite test automation software and enjoy simple syntax to simulate user input and inspect rendered output.", "prev_chunk_id": "chunk_39", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_41", "url": "https://docs.streamlit.io/develop/concepts", "title": "Still have questions?", "page_title": "Development concepts - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_40", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_42", "url": "https://docs.streamlit.io/develop/api-reference", "title": "API reference", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "API reference", "content": "API reference Streamlit makes it easy for you to visualize, mutate, and share data. The API reference is organized by activity type, like displaying data or optimizing performance. Each section includes methods associated with the activity type, including examples. Browse our API below and click to learn more about any of our available commands! 🎈", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_43", "url": "https://docs.streamlit.io/develop/api-reference", "title": "st.write", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "st.write", "content": "st.write Write arguments to the app.", "prev_chunk_id": "chunk_42", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_44", "url": "https://docs.streamlit.io/develop/api-reference", "title": "st.write_stream", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "st.write_stream", "content": "st.write_stream Write generators or streams to the app with a typewriter effect.", "prev_chunk_id": "chunk_43", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_45", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Magic", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Magic", "content": "Magic Any time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write", "prev_chunk_id": "chunk_44", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_46", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Markdown", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Markdown", "content": "Markdown Display string formatted as Markdown.", "prev_chunk_id": "chunk_45", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_47", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Title", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Title", "content": "Title Display text in title formatting.", "prev_chunk_id": "chunk_46", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_48", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Header", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Header", "content": "Header Display text in header formatting.", "prev_chunk_id": "chunk_47", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_49", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Subheader", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Subheader", "content": "Subheader Display text in subheader formatting.", "prev_chunk_id": "chunk_48", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_50", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Badge", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Badge", "content": "Badge Display a small, colored badge.", "prev_chunk_id": "chunk_49", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_51", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Caption", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Caption", "content": "Caption Display text in small font.", "prev_chunk_id": "chunk_50", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_52", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Code block", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Code block", "content": "Code block Display a code block with optional syntax highlighting.", "prev_chunk_id": "chunk_51", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_53", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Echo", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Echo", "content": "Echo Display some code in the app, then execute it. Useful for tutorials.", "prev_chunk_id": "chunk_52", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_54", "url": "https://docs.streamlit.io/develop/api-reference", "title": "LaTeX", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "LaTeX", "content": "LaTeX Display mathematical expressions formatted as LaTeX.", "prev_chunk_id": "chunk_53", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_55", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Preformatted text", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Preformatted text", "content": "Preformatted text Write fixed-width and preformatted text.", "prev_chunk_id": "chunk_54", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_56", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Divider", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Divider", "content": "Divider Display a horizontal rule.", "prev_chunk_id": "chunk_55", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_57", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Get help", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Get help", "content": "Get help Display object’s doc string, nicely formatted.", "prev_chunk_id": "chunk_56", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_58", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Render HTML", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Render HTML", "content": "Render HTML Renders HTML strings to your app.", "prev_chunk_id": "chunk_57", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_59", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Tags", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_58", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_60", "url": "https://docs.streamlit.io/develop/api-reference", "title": "NLU", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "NLU", "content": "NLU Apply text mining on a dataframe. Created by @JohnSnowLabs.", "prev_chunk_id": "chunk_59", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_61", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_60", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_62", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Annotated text", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Annotated text", "content": "Annotated text Display annotated text in Streamlit apps. Created by @tvst.", "prev_chunk_id": "chunk_61", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_63", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Drawable Canvas", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_62", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_64", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Tags", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_63", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_65", "url": "https://docs.streamlit.io/develop/api-reference", "title": "NLU", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "NLU", "content": "NLU Apply text mining on a dataframe. Created by @JohnSnowLabs.", "prev_chunk_id": "chunk_64", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_66", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_65", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_67", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Annotated text", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Annotated text", "content": "Annotated text Display annotated text in Streamlit apps. Created by @tvst.", "prev_chunk_id": "chunk_66", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_68", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Drawable Canvas", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_67", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_69", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Tags", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_68", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_70", "url": "https://docs.streamlit.io/develop/api-reference", "title": "NLU", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "NLU", "content": "NLU Apply text mining on a dataframe. Created by @JohnSnowLabs.", "prev_chunk_id": "chunk_69", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_71", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_70", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_72", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Dataframes", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Dataframes", "content": "Dataframes Display a dataframe as an interactive table.", "prev_chunk_id": "chunk_71", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_73", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Data editor", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Data editor", "content": "Data editor Display a data editor widget.", "prev_chunk_id": "chunk_72", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_74", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Column configuration", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Column configuration", "content": "Column configuration Configure the display and editing behavior of dataframes and data editors.", "prev_chunk_id": "chunk_73", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_75", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Static tables", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Static tables", "content": "Static tables Display a static table.", "prev_chunk_id": "chunk_74", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_76", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Metrics", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Metrics", "content": "Metrics Display a metric in big bold font, with an optional indicator of how the metric changed.", "prev_chunk_id": "chunk_75", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_77", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Dicts and JSON", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Dicts and JSON", "content": "Dicts and JSON Display object or string as a pretty-printed JSON string.", "prev_chunk_id": "chunk_76", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_78", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Coordinates", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_77", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_79", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plotly Events", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_78", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_80", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_79", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_81", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Aggrid", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Aggrid", "content": "Streamlit Aggrid Implementation of Ag-Grid component for Streamlit. Created by @PablocFonseca.", "prev_chunk_id": "chunk_80", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_82", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Folium", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_81", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_83", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Pandas Profiling", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Pandas Profiling", "content": "Pandas Profiling Pandas profiling component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_82", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_84", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Coordinates", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_83", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_85", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plotly Events", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_84", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_86", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_85", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_87", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Aggrid", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Aggrid", "content": "Streamlit Aggrid Implementation of Ag-Grid component for Streamlit. Created by @PablocFonseca.", "prev_chunk_id": "chunk_86", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_88", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Folium", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_87", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_89", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Pandas Profiling", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Pandas Profiling", "content": "Pandas Profiling Pandas profiling component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_88", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_90", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Coordinates", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_89", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_91", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plotly Events", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_90", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_92", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_91", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_93", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Simple area charts", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Simple area charts", "content": "Simple area charts Display an area chart.", "prev_chunk_id": "chunk_92", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_94", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Simple bar charts", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Simple bar charts", "content": "Simple bar charts Display a bar chart.", "prev_chunk_id": "chunk_93", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_95", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Simple line charts", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Simple line charts", "content": "Simple line charts Display a line chart.", "prev_chunk_id": "chunk_94", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_96", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Simple scatter charts", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Simple scatter charts", "content": "Simple scatter charts Display a line chart.", "prev_chunk_id": "chunk_95", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_97", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Scatterplots on maps", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Scatterplots on maps", "content": "Scatterplots on maps Display a map with points on it.", "prev_chunk_id": "chunk_96", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_98", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Matplotlib", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Matplotlib", "content": "Matplotlib Display a matplotlib.pyplot figure.", "prev_chunk_id": "chunk_97", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_99", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Altair", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Altair", "content": "Altair Display a chart using the Altair library.", "prev_chunk_id": "chunk_98", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_100", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Vega-Lite", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Vega-Lite", "content": "Vega-Lite Display a chart using the Vega-Lite library.", "prev_chunk_id": "chunk_99", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_101", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plotly", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plotly", "content": "Plotly Display an interactive Plotly chart.", "prev_chunk_id": "chunk_100", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_102", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Bokeh", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Bokeh", "content": "Bokeh Display an interactive Bokeh chart.", "prev_chunk_id": "chunk_101", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_103", "url": "https://docs.streamlit.io/develop/api-reference", "title": "PyDeck", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "PyDeck", "content": "PyDeck Display a chart using the PyDeck library.", "prev_chunk_id": "chunk_102", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_104", "url": "https://docs.streamlit.io/develop/api-reference", "title": "GraphViz", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "GraphViz", "content": "GraphViz Display a graph using the dagre-d3 library.", "prev_chunk_id": "chunk_103", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_105", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Lottie", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_104", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_106", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plotly Events", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_105", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_107", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_106", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_108", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plost", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plost", "content": "Plost A deceptively simple plotting library for Streamlit. Created by @tvst.", "prev_chunk_id": "chunk_107", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_109", "url": "https://docs.streamlit.io/develop/api-reference", "title": "HiPlot", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "HiPlot", "content": "HiPlot High dimensional Interactive Plotting. Created by @facebookresearch.", "prev_chunk_id": "chunk_108", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_110", "url": "https://docs.streamlit.io/develop/api-reference", "title": "ECharts", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "ECharts", "content": "ECharts High dimensional Interactive Plotting. Created by @andfanilo.", "prev_chunk_id": "chunk_109", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_111", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Folium", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_110", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_112", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Spacy-Streamlit", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Spacy-Streamlit", "content": "Spacy-Streamlit spaCy building blocks and visualizers for Streamlit apps. Created by @explosion.", "prev_chunk_id": "chunk_111", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_113", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Agraph", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Agraph", "content": "Streamlit Agraph A Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.", "prev_chunk_id": "chunk_112", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_114", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Lottie", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_113", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_115", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plotly Events", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_114", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_116", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_115", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_117", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plost", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plost", "content": "Plost A deceptively simple plotting library for Streamlit. Created by @tvst.", "prev_chunk_id": "chunk_116", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_118", "url": "https://docs.streamlit.io/develop/api-reference", "title": "HiPlot", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "HiPlot", "content": "HiPlot High dimensional Interactive Plotting. Created by @facebookresearch.", "prev_chunk_id": "chunk_117", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_119", "url": "https://docs.streamlit.io/develop/api-reference", "title": "ECharts", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "ECharts", "content": "ECharts High dimensional Interactive Plotting. Created by @andfanilo.", "prev_chunk_id": "chunk_118", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_120", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Folium", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_119", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_121", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Spacy-Streamlit", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Spacy-Streamlit", "content": "Spacy-Streamlit spaCy building blocks and visualizers for Streamlit apps. Created by @explosion.", "prev_chunk_id": "chunk_120", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_122", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Tutorials", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Tutorials", "content": "Tutorials Our tutorials include step-by-step examples of building different types of apps in Streamlit. When you're done developing your app, see our deployment tutorials, too!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_123", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Agraph", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Agraph", "content": "Streamlit Agraph A Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.", "prev_chunk_id": "chunk_121", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_124", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Add user authentication", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Add user authentication", "content": "Add user authentication Add user authentication with Streamlit's built-in support for OpenID Connect.", "prev_chunk_id": "chunk_122", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_125", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Lottie", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_123", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_126", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Chat apps and LLMs", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Chat apps and LLMs", "content": "Chat apps and LLMs Work with LLMs and create chat apps.", "prev_chunk_id": "chunk_124", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_127", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Plotly Events", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_125", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_128", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Configuration and theming", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Configuration and theming", "content": "Configuration and theming Customize the appearance of your app.", "prev_chunk_id": "chunk_126", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_129", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_127", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_130", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Connect to data sources", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Connect to data sources", "content": "Connect to data sources Connect to popular datasources.", "prev_chunk_id": "chunk_128", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_131", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Button", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Button", "content": "Button Display a button widget.", "prev_chunk_id": "chunk_129", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_132", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Work with Streamlit's core elements", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Work with Streamlit's core elements", "content": "Work with Streamlit's core elements Work with core elements like dataframes and charts.", "prev_chunk_id": "chunk_130", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_133", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Download button", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Download button", "content": "Download button Display a download button widget.", "prev_chunk_id": "chunk_131", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_134", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Use core features to work with Streamlit's execution model", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Use core features to work with Streamlit's execution model", "content": "Use core features to work with Streamlit's execution model Build simple apps and walk through examples to learn about Streamlit's core features and execution model.", "prev_chunk_id": "chunk_132", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_135", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Form button", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Form button", "content": "Form button Display a form submit button. For use with st.form.", "prev_chunk_id": "chunk_133", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_136", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Create multipage apps", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Create multipage apps", "content": "Create multipage apps Create multipage apps, navigation, and flows.", "prev_chunk_id": "chunk_134", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_137", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Link button", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Link button", "content": "Link button Display a link button.", "prev_chunk_id": "chunk_135", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_138", "url": "https://docs.streamlit.io/develop/tutorials", "title": "Still have questions?", "page_title": "Tutorials - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_136", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_139", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Page link", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Page link", "content": "Page link Display a link to another page in a multipage app.", "prev_chunk_id": "chunk_137", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_140", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Checkbox", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Checkbox", "content": "Checkbox Display a checkbox widget.", "prev_chunk_id": "chunk_139", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_141", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Color picker", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Color picker", "content": "Color picker Display a color picker widget.", "prev_chunk_id": "chunk_140", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_142", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Feedback", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Feedback", "content": "Feedback Display a rating or sentiment button group.", "prev_chunk_id": "chunk_141", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_143", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Multiselect", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Multiselect", "content": "Multiselect Display a multiselect widget. The multiselect widget starts as empty.", "prev_chunk_id": "chunk_142", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_144", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Pills", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Pills", "content": "Pills Display a pill-button selection widget.", "prev_chunk_id": "chunk_143", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_145", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Radio", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Radio", "content": "Radio Display a radio button widget.", "prev_chunk_id": "chunk_144", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_146", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Segmented control", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Segmented control", "content": "Segmented control Display a segmented-button selection widget.", "prev_chunk_id": "chunk_145", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_147", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Selectbox", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Selectbox", "content": "Selectbox Display a select widget.", "prev_chunk_id": "chunk_146", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_148", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Select-slider", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Select-slider", "content": "Select-slider Display a slider widget to select items from a list.", "prev_chunk_id": "chunk_147", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_149", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Toggle", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Toggle", "content": "Toggle Display a toggle widget.", "prev_chunk_id": "chunk_148", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_150", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Number input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Number input", "content": "Number input Display a numeric input widget.", "prev_chunk_id": "chunk_149", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_151", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Slider", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Slider", "content": "Slider Display a slider widget.", "prev_chunk_id": "chunk_150", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_152", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Date input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Date input", "content": "Date input Display a date input widget.", "prev_chunk_id": "chunk_151", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_153", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Time input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Time input", "content": "Time input Display a time input widget.", "prev_chunk_id": "chunk_152", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_154", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Chat input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Chat input", "content": "Chat input Display a chat input widget.", "prev_chunk_id": "chunk_153", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_155", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Text-area", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Text-area", "content": "Text-area Display a multi-line text input widget.", "prev_chunk_id": "chunk_154", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_156", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Text input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Text input", "content": "Text input Display a single-line text input widget.", "prev_chunk_id": "chunk_155", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_157", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Audio input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Audio input", "content": "Audio input Display a widget that allows users to record with their microphone.", "prev_chunk_id": "chunk_156", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_158", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Data editor", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Data editor", "content": "Data editor Display a data editor widget.", "prev_chunk_id": "chunk_157", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_159", "url": "https://docs.streamlit.io/develop/api-reference", "title": "File uploader", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "File uploader", "content": "File uploader Display a file uploader widget.", "prev_chunk_id": "chunk_158", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_160", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Camera input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Camera input", "content": "Camera input Display a widget that allows users to upload images directly from a camera.", "prev_chunk_id": "chunk_159", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_161", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Chat", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Chat", "content": "Streamlit Chat Streamlit Component for a Chatbot UI. Created by @AI-Yash.", "prev_chunk_id": "chunk_160", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_162", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Option Menu", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Option Menu", "content": "Streamlit Option Menu Select a single item from a list of options in a menu. Created by @victoryhb.", "prev_chunk_id": "chunk_161", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_163", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_162", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_164", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Elements", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Elements", "content": "Streamlit Elements Create a draggable and resizable dashboard in Streamlit. Created by @okls.", "prev_chunk_id": "chunk_163", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_165", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Tags", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_164", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_166", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Stqdm", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Stqdm", "content": "Stqdm The simplest way to handle a progress bar in streamlit app. Created by @Wirg.", "prev_chunk_id": "chunk_165", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_167", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Timeline", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Timeline", "content": "Timeline Display a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.", "prev_chunk_id": "chunk_166", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_168", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Camera input live", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Camera input live", "content": "Camera input live Alternative for st.camera_input which returns the webcam images live. Created by @blackary.", "prev_chunk_id": "chunk_167", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_169", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Ace", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Ace", "content": "Streamlit Ace Ace editor component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_168", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_170", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Chat", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Chat", "content": "Streamlit Chat Streamlit Component for a Chatbot UI. Created by @AI-Yash.", "prev_chunk_id": "chunk_169", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_171", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Option Menu", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Option Menu", "content": "Streamlit Option Menu Select a single item from a list of options in a menu. Created by @victoryhb.", "prev_chunk_id": "chunk_170", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_172", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_171", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_173", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Elements", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Elements", "content": "Streamlit Elements Create a draggable and resizable dashboard in Streamlit. Created by @okls.", "prev_chunk_id": "chunk_172", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_174", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Tags", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_173", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_175", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Stqdm", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Stqdm", "content": "Stqdm The simplest way to handle a progress bar in streamlit app. Created by @Wirg.", "prev_chunk_id": "chunk_174", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_176", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Timeline", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Timeline", "content": "Timeline Display a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.", "prev_chunk_id": "chunk_175", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_177", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Camera input live", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Camera input live", "content": "Camera input live Alternative for st.camera_input which returns the webcam images live. Created by @blackary.", "prev_chunk_id": "chunk_176", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_178", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Ace", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Ace", "content": "Streamlit Ace Ace editor component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_177", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_179", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Chat", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Chat", "content": "Streamlit Chat Streamlit Component for a Chatbot UI. Created by @AI-Yash.", "prev_chunk_id": "chunk_178", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_180", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Option Menu", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Option Menu", "content": "Streamlit Option Menu Select a single item from a list of options in a menu. Created by @victoryhb.", "prev_chunk_id": "chunk_179", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_181", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_180", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_182", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image", "content": "Image Display an image or list of images.", "prev_chunk_id": "chunk_181", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_183", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Logo", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Logo", "content": "Logo Display a logo in the upper-left corner of your app and its sidebar.", "prev_chunk_id": "chunk_182", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_184", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Audio", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Audio", "content": "Audio Display an audio player.", "prev_chunk_id": "chunk_183", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_185", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Video", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Video", "content": "Video Display a video player.", "prev_chunk_id": "chunk_184", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_186", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Cropper", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Cropper", "content": "Streamlit Cropper A simple image cropper for Streamlit. Created by @turner-anderson.", "prev_chunk_id": "chunk_185", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_187", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Coordinates", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_186", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_188", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Lottie", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_187", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_189", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Webrtc", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Webrtc", "content": "Streamlit Webrtc Handling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.", "prev_chunk_id": "chunk_188", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_190", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Drawable Canvas", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_189", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_191", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Comparison", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Comparison", "content": "Image Comparison Compare images with a slider using JuxtaposeJS. Created by @fcakyon.", "prev_chunk_id": "chunk_190", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_192", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Cropper", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Cropper", "content": "Streamlit Cropper A simple image cropper for Streamlit. Created by @turner-anderson.", "prev_chunk_id": "chunk_191", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_193", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Coordinates", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_192", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_194", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Lottie", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_193", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_195", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Webrtc", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Webrtc", "content": "Streamlit Webrtc Handling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.", "prev_chunk_id": "chunk_194", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_196", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Drawable Canvas", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_195", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_197", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Comparison", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Comparison", "content": "Image Comparison Compare images with a slider using JuxtaposeJS. Created by @fcakyon.", "prev_chunk_id": "chunk_196", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_198", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Cropper", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Cropper", "content": "Streamlit Cropper A simple image cropper for Streamlit. Created by @turner-anderson.", "prev_chunk_id": "chunk_197", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_199", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Image Coordinates", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_198", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_200", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Lottie", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_199", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_201", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Columns", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Columns", "content": "Columns Insert containers laid out as side-by-side columns.", "prev_chunk_id": "chunk_200", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_202", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Container", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Container", "content": "Container Insert a multi-element container.", "prev_chunk_id": "chunk_201", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_203", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Modal dialog", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Modal dialog", "content": "Modal dialog Insert a modal dialog that can rerun independently from the rest of the script.", "prev_chunk_id": "chunk_202", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_204", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Empty", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Empty", "content": "Empty Insert a single-element container.", "prev_chunk_id": "chunk_203", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_205", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Expander", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Expander", "content": "Expander Insert a multi-element container that can be expanded/collapsed.", "prev_chunk_id": "chunk_204", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_206", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Popover", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Popover", "content": "Popover Insert a multi-element popover container that can be opened/closed.", "prev_chunk_id": "chunk_205", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_207", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Sidebar", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Sidebar", "content": "Sidebar Display items in a sidebar.", "prev_chunk_id": "chunk_206", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_208", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Tabs", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Tabs", "content": "Tabs Insert containers separated into tabs.", "prev_chunk_id": "chunk_207", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_209", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Elements", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Elements", "content": "Streamlit Elements Create a draggable and resizable dashboard in Streamlit. Created by @okls.", "prev_chunk_id": "chunk_208", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_210", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Pydantic", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Pydantic", "content": "Pydantic Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by @lukasmasuch.", "prev_chunk_id": "chunk_209", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_211", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Pages", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Pages", "content": "Streamlit Pages An experimental version of Streamlit Multi-Page Apps. Created by @blackary.", "prev_chunk_id": "chunk_210", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_212", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Chat elements", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Chat elements", "content": "Chat elements Streamlit provides a few commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately. st.chat_message lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. st.chat_input lets you display a chat input widget so the user can type in a message.", "prev_chunk_id": "chunk_211", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_213", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Chat input", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Chat input", "content": "Chat input Display a chat input widget.", "prev_chunk_id": "chunk_212", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_214", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Chat message", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Chat message", "content": "Chat message Insert a chat message container.", "prev_chunk_id": "chunk_213", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_215", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Status container", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Status container", "content": "Status container Display output of long-running tasks in a container.", "prev_chunk_id": "chunk_214", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_216", "url": "https://docs.streamlit.io/develop/api-reference", "title": "st.write_stream", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "st.write_stream", "content": "st.write_stream Write generators or streams to the app with a typewriter effect.", "prev_chunk_id": "chunk_215", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_217", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Progress bar", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Progress bar", "content": "Progress bar Display a progress bar.", "prev_chunk_id": "chunk_216", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_218", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Spinner", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Spinner", "content": "Spinner Temporarily displays a message while executing a block of code.", "prev_chunk_id": "chunk_217", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_219", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Status container", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Status container", "content": "Status container Display output of long-running tasks in a container.", "prev_chunk_id": "chunk_218", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_220", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Toast", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Toast", "content": "Toast Briefly displays a toast message in the bottom-right corner.", "prev_chunk_id": "chunk_219", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_221", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Balloons", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Balloons", "content": "Balloons Display celebratory balloons!", "prev_chunk_id": "chunk_220", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_222", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Snowflakes", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Snowflakes", "content": "Snowflakes Display celebratory snowflakes!", "prev_chunk_id": "chunk_221", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_223", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Success box", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Success box", "content": "Success box Display a success message.", "prev_chunk_id": "chunk_222", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_224", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Info box", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Info box", "content": "Info box Display an informational message.", "prev_chunk_id": "chunk_223", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_225", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Warning box", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Warning box", "content": "Warning box Display warning message.", "prev_chunk_id": "chunk_224", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_226", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Error box", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Error box", "content": "Error box Display error message.", "prev_chunk_id": "chunk_225", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_227", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Exception output", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Exception output", "content": "Exception output Display an exception.", "prev_chunk_id": "chunk_226", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_228", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Stqdm", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Stqdm", "content": "Stqdm The simplest way to handle a progress bar in streamlit app. Created by @Wirg.", "prev_chunk_id": "chunk_227", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_229", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Custom notification box", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Custom notification box", "content": "Custom notification box A custom notification box with the ability to close it out. Created by @Socvest.", "prev_chunk_id": "chunk_228", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_230", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Extras", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_229", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_231", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Log in a user", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Log in a user", "content": "Log in a user st.login() starts an authentication flow with an identity provider.", "prev_chunk_id": "chunk_230", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_232", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Log out a user", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Log out a user", "content": "Log out a user st.logout() removes a user's identity information.", "prev_chunk_id": "chunk_231", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_233", "url": "https://docs.streamlit.io/develop/api-reference", "title": "User info", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "User info", "content": "User info st.user returns information about a logged-in user.", "prev_chunk_id": "chunk_232", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_234", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Navigation", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Navigation", "content": "Navigation Configure the available pages in a multipage app.", "prev_chunk_id": "chunk_233", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_235", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Page", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Page", "content": "Page Define a page in a multipage app.", "prev_chunk_id": "chunk_234", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_236", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Page link", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Page link", "content": "Page link Display a link to another page in a multipage app.", "prev_chunk_id": "chunk_235", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_237", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Switch page", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Switch page", "content": "Switch page Programmatically navigates to a specified page.", "prev_chunk_id": "chunk_236", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_238", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Modal dialog", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Modal dialog", "content": "Modal dialog Insert a modal dialog that can rerun independently from the rest of the script.", "prev_chunk_id": "chunk_237", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_239", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Forms", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Forms", "content": "Forms Create a form that batches elements together with a “Submit\" button.", "prev_chunk_id": "chunk_238", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_240", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Fragments", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Fragments", "content": "Fragments Define a fragment to rerun independently from the rest of the script.", "prev_chunk_id": "chunk_239", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_241", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Rerun script", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Rerun script", "content": "Rerun script Rerun the script immediately.", "prev_chunk_id": "chunk_240", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_242", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Stop execution", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Stop execution", "content": "Stop execution Stops execution immediately.", "prev_chunk_id": "chunk_241", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_243", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Autorefresh", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Autorefresh", "content": "Autorefresh Force a refresh without tying up a script. Created by @kmcgrady.", "prev_chunk_id": "chunk_242", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_244", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Pydantic", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Pydantic", "content": "Pydantic Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by @lukasmasuch.", "prev_chunk_id": "chunk_243", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_245", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Pages", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Pages", "content": "Streamlit Pages An experimental version of Streamlit Multi-Page Apps. Created by @blackary.", "prev_chunk_id": "chunk_244", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_246", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Cache data", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Cache data", "content": "Cache data Function decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).", "prev_chunk_id": "chunk_245", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_247", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Cache resource", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Cache resource", "content": "Cache resource Function decorator to cache functions that return global resources (e.g. database connections, ML models).", "prev_chunk_id": "chunk_246", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_248", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Session state", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Session state", "content": "Session state Session state is a way to share variables between reruns, for each user session.", "prev_chunk_id": "chunk_247", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_249", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Query parameters", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Query parameters", "content": "Query parameters Get, set, or clear the query parameters that are shown in the browser's URL bar.", "prev_chunk_id": "chunk_248", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_250", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Context", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Context", "content": "Context st.context provides a read-only interface to access cookies, headers, locale, and other browser-session information.", "prev_chunk_id": "chunk_249", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_251", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Create a connection", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Create a connection", "content": "Create a connection Connect to a data source or API", "prev_chunk_id": "chunk_250", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_252", "url": "https://docs.streamlit.io/develop/api-reference", "title": "SnowflakeConnection", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "SnowflakeConnection", "content": "SnowflakeConnection A connection to Snowflake.", "prev_chunk_id": "chunk_251", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_253", "url": "https://docs.streamlit.io/develop/api-reference", "title": "SQLConnection", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "SQLConnection", "content": "SQLConnection A connection to a SQL database using SQLAlchemy.", "prev_chunk_id": "chunk_252", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_254", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Connection base class", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Connection base class", "content": "Connection base class Build your own connection with BaseConnection.", "prev_chunk_id": "chunk_253", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_255", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Secrets singleton", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Secrets singleton", "content": "Secrets singleton Access secrets from a local TOML file.", "prev_chunk_id": "chunk_254", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_256", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Secrets file", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Secrets file", "content": "Secrets file Save your secrets in a per-project or per-profile TOML file.", "prev_chunk_id": "chunk_255", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_257", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Authenticator", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Authenticator", "content": "Authenticator A secure authentication module to validate user credentials. Created by @mkhorasani.", "prev_chunk_id": "chunk_256", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_258", "url": "https://docs.streamlit.io/develop/api-reference", "title": "WS localStorage", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "WS localStorage", "content": "WS localStorage A simple synchronous way of accessing localStorage from your app. Created by @gagangoku.", "prev_chunk_id": "chunk_257", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_259", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Auth0", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Auth0", "content": "Streamlit Auth0 The fastest way to provide comprehensive login inside Streamlit. Created by @conradbez.", "prev_chunk_id": "chunk_258", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_260", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Declare a component", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Declare a component", "content": "Declare a component Create and register a custom component.", "prev_chunk_id": "chunk_259", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_261", "url": "https://docs.streamlit.io/develop/api-reference", "title": "HTML", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "HTML", "content": "HTML Display an HTML string in an iframe.", "prev_chunk_id": "chunk_260", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_262", "url": "https://docs.streamlit.io/develop/api-reference", "title": "iframe", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "iframe", "content": "iframe Load a remote URL in an iframe.", "prev_chunk_id": "chunk_261", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_263", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Configuration file", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Configuration file", "content": "Configuration file Configures the default settings for your app.", "prev_chunk_id": "chunk_262", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_264", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Get config option", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Get config option", "content": "Get config option Retrieve a single configuration option.", "prev_chunk_id": "chunk_263", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_265", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Set config option", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Set config option", "content": "Set config option Set a single configuration option. (This is very limited.)", "prev_chunk_id": "chunk_264", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_266", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Set page title, favicon, and more", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Set page title, favicon, and more", "content": "Set page title, favicon, and more Configures the default settings of the page.", "prev_chunk_id": "chunk_265", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_267", "url": "https://docs.streamlit.io/develop/api-reference", "title": "st.testing.v1.AppTest", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "st.testing.v1.AppTest", "content": "st.testing.v1.AppTest st.testing.v1.AppTest simulates a running Streamlit app for testing.", "prev_chunk_id": "chunk_266", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_268", "url": "https://docs.streamlit.io/develop/api-reference", "title": "AppTest.from_file", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "AppTest.from_file", "content": "AppTest.from_file st.testing.v1.AppTest.from_file initializes a simulated app from a file.", "prev_chunk_id": "chunk_267", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_269", "url": "https://docs.streamlit.io/develop/api-reference", "title": "AppTest.from_string", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "AppTest.from_string", "content": "AppTest.from_string st.testing.v1.AppTest.from_string initializes a simulated app from a string.", "prev_chunk_id": "chunk_268", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_270", "url": "https://docs.streamlit.io/develop/api-reference", "title": "AppTest.from_function", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "AppTest.from_function", "content": "AppTest.from_function st.testing.v1.AppTest.from_function initializes a simulated app from a function.", "prev_chunk_id": "chunk_269", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_271", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Block", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Block", "content": "Block A representation of container elements, including: - st.chat_message - st.columns - st.sidebar - st.tabs - The main body of the app.", "prev_chunk_id": "chunk_270", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_272", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Element", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Element", "content": "Element The base class for representation of all elements, including: - st.title - st.header - st.markdown - st.dataframe", "prev_chunk_id": "chunk_271", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_273", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Button", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Button", "content": "Button A representation of st.button and st.form_submit_button.", "prev_chunk_id": "chunk_272", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_274", "url": "https://docs.streamlit.io/develop/api-reference", "title": "ChatInput", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "ChatInput", "content": "ChatInput A representation of st.chat_input.", "prev_chunk_id": "chunk_273", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_275", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Checkbox", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Checkbox", "content": "Checkbox A representation of st.checkbox.", "prev_chunk_id": "chunk_274", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_276", "url": "https://docs.streamlit.io/develop/api-reference", "title": "ColorPicker", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "ColorPicker", "content": "ColorPicker A representation of st.color_picker.", "prev_chunk_id": "chunk_275", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_277", "url": "https://docs.streamlit.io/develop/api-reference", "title": "DateInput", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "DateInput", "content": "DateInput A representation of st.date_input.", "prev_chunk_id": "chunk_276", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_278", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Multiselect", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Multiselect", "content": "Multiselect A representation of st.multiselect.", "prev_chunk_id": "chunk_277", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_279", "url": "https://docs.streamlit.io/develop/api-reference", "title": "NumberInput", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "NumberInput", "content": "NumberInput A representation of st.number_input.", "prev_chunk_id": "chunk_278", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_280", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Radio", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Radio", "content": "Radio A representation of st.radio.", "prev_chunk_id": "chunk_279", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_281", "url": "https://docs.streamlit.io/develop/api-reference", "title": "SelectSlider", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "SelectSlider", "content": "SelectSlider A representation of st.select_slider.", "prev_chunk_id": "chunk_280", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_282", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Selectbox", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Selectbox", "content": "Selectbox A representation of st.selectbox.", "prev_chunk_id": "chunk_281", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_283", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Slider", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Slider", "content": "Slider A representation of st.slider.", "prev_chunk_id": "chunk_282", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_284", "url": "https://docs.streamlit.io/develop/api-reference", "title": "TextArea", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "TextArea", "content": "TextArea A representation of st.text_area.", "prev_chunk_id": "chunk_283", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_285", "url": "https://docs.streamlit.io/develop/api-reference", "title": "TextInput", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "TextInput", "content": "TextInput A representation of st.text_input.", "prev_chunk_id": "chunk_284", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_286", "url": "https://docs.streamlit.io/develop/api-reference", "title": "TimeInput", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "TimeInput", "content": "TimeInput A representation of st.time_input.", "prev_chunk_id": "chunk_285", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_287", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Toggle", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Toggle", "content": "Toggle A representation of st.toggle.", "prev_chunk_id": "chunk_286", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_288", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Pandas Profiling", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Pandas Profiling", "content": "Pandas Profiling Pandas profiling component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_287", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_289", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Ace", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Ace", "content": "Streamlit Ace Ace editor component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_288", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_290", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Streamlit Analytics", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Streamlit Analytics", "content": "Streamlit Analytics Track & visualize user interactions with your streamlit app. Created by @jrieke.", "prev_chunk_id": "chunk_289", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_291", "url": "https://docs.streamlit.io/develop/api-reference", "title": "Still have questions?", "page_title": "API Reference - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_290", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_292", "url": "https://docs.streamlit.io/develop/quick-reference", "title": "Cheatsheet", "page_title": "Quick reference - Streamlit Docs", "breadcrumbs": "Cheatsheet", "content": "Cheatsheet A dense list of Streamlit commands with example syntax.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_293", "url": "https://docs.streamlit.io/develop/quick-reference", "title": "Release notes", "page_title": "Quick reference - Streamlit Docs", "breadcrumbs": "Release notes", "content": "Release notes See how Streamlit has changed with each new version.", "prev_chunk_id": "chunk_292", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_294", "url": "https://docs.streamlit.io/develop/quick-reference", "title": "Pre-release features", "page_title": "Quick reference - Streamlit Docs", "breadcrumbs": "Pre-release features", "content": "Pre-release features Understand how we introduce new features and how you can get your hands on them sooner!", "prev_chunk_id": "chunk_293", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_295", "url": "https://docs.streamlit.io/develop/quick-reference", "title": "Roadmap", "page_title": "Quick reference - Streamlit Docs", "breadcrumbs": "Roadmap", "content": "Roadmap Get a sneak peek at what we have scheduled for the next year.", "prev_chunk_id": "chunk_294", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_296", "url": "https://docs.streamlit.io/develop/quick-reference", "title": "Still have questions?", "page_title": "Quick reference - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_295", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_297", "url": "https://docs.streamlit.io/deploy", "title": "Deploy", "page_title": "Deploy - Streamlit Docs", "breadcrumbs": "Deploy", "content": "Deploy Get all the information you need to deploy your app and share it with your users.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_298", "url": "https://docs.streamlit.io/deploy", "title": "Still have questions?", "page_title": "Deploy - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_297", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_299", "url": "https://docs.streamlit.io/deploy/concepts", "title": "Deployment concepts", "page_title": "Deployment concepts - Streamlit Docs", "breadcrumbs": "Deployment concepts", "content": "Deployment concepts Learn the fundamental concepts of app deployment. There are three main processes involved in deploying apps. - Install Python, Streamlit, and other dependencies in your deployment environment. - Securely handle your secrets and private information. - Remote start your app (streamlit run). If you're using Streamlit Community Cloud, we'll do most of the work for you!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_300", "url": "https://docs.streamlit.io/deploy/concepts", "title": "Still have questions?", "page_title": "Deployment concepts - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_299", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_301", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud", "title": "Welcome to Streamlit Community Cloud", "page_title": "Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Welcome to Streamlit Community Cloud", "content": "Welcome to Streamlit Community Cloud With Streamlit Community Cloud, you can create, deploy, and manage your Streamlit apps — all for free. Share your apps with the world and build a customized profile page to display your work. Your Community Cloud account connects directly to your GitHub repositories (public or private). Most apps will launch in only a few minutes. Community Cloud handles all of the containerization, so deploying is easy. Bring your own code, or start from one of our popular templates. Rapidly prototype, explore, and update apps by simply changing your code in GitHub. Most changes appear immediately! Want to avoid the work of setting up a local development environment? Community Cloud can help you quickly configure a codespace to develop in the cloud. Start coding or editing a Streamlit app with just a few clicks. See Edit your app. Go to our Community Cloud quickstart to speed-run through creating your account, deploying an example app, and editing it using GitHub Codespaces. If you haven't built your first Streamlit app yet, see Get started with Streamlit.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_302", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud", "title": "Still have questions?", "page_title": "Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_301", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_303", "url": "https://docs.streamlit.io/deploy/snowflake", "title": "Deploy Streamlit apps in Snowflake", "page_title": "Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Deploy Streamlit apps in Snowflake", "content": "Deploy Streamlit apps in Snowflake Host your apps alongside your data in a single, global platform. Snowflake provides industry-leading features that ensure the highest levels of security for your account, users, data, and apps. If you're looking for an enterprise hosting solution, try Snowflake! There are three ways to host Streamlit apps in Snowflake:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_304", "url": "https://docs.streamlit.io/deploy/snowflake", "title": "Streamlit in Snowflake Quickstart", "page_title": "Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Streamlit in Snowflake Quickstart", "content": "Streamlit in Snowflake Quickstart Create a free trial account and deploy an app with Streamlit in Snowflake.", "prev_chunk_id": "chunk_303", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_305", "url": "https://docs.streamlit.io/deploy/snowflake", "title": "Examples", "page_title": "Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Examples", "content": "Examples Explore a wide variety of example apps in Snowflake Labs' snowflake-demo-streamlit repository.", "prev_chunk_id": "chunk_304", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_306", "url": "https://docs.streamlit.io/deploy/snowflake", "title": "Get started with Snowflake", "page_title": "Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Get started with Snowflake", "content": "Get started with Snowflake Learn more in Snowflake's documentation.", "prev_chunk_id": "chunk_305", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_307", "url": "https://docs.streamlit.io/deploy/snowflake", "title": "Still have questions?", "page_title": "Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_306", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_308", "url": "https://docs.streamlit.io/deploy/tutorials", "title": "Deployment tutorials", "page_title": "Deployment tutorials - Streamlit Docs", "breadcrumbs": "Deployment tutorials", "content": "Deployment tutorials This sections contains step-by-step guides on how to deploy Streamlit apps to various cloud platforms and services. We have deployment guides for: While we work on official Streamlit deployment guides for other hosting providers, here are some user-submitted tutorials for different cloud services: - How to deploy Streamlit apps toGoogle App Engine, byYuichiro Tachibana (Tsuchiya). - Host Streamlit onHeroku, by Maarten Grootendorst. - Deploy Streamlit onPloomber Cloud, by Ido Michael. - Host Streamlit on21YunBox, by Toby Lei. - Deploy a Streamlit App onKoyeb, by Justin Ellingwood. - Community-supported deployment wiki.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_309", "url": "https://docs.streamlit.io/deploy/tutorials", "title": "Still have questions?", "page_title": "Deployment tutorials - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_308", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_310", "url": "https://docs.streamlit.io/knowledge-base", "title": "Knowledge base", "page_title": "Knowledge Base - Streamlit Docs", "breadcrumbs": "Knowledge base", "content": "Knowledge base The knowledge base is a self-serve library of tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_311", "url": "https://docs.streamlit.io/knowledge-base", "title": "Still have questions?", "page_title": "Knowledge Base - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_310", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_312", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.context", "title": "Still have questions?", "page_title": "st.context - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_313", "url": "https://docs.streamlit.io/develop/api-reference/navigation/st.navigation", "title": "Still have questions?", "page_title": "st.navigation - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_314", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Use Community Cloud to develop with GitHub Codespaces", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Use Community Cloud to develop with GitHub Codespaces", "content": "Use Community Cloud to develop with GitHub Codespaces To use GitHub Codespaces for Streamlit development, you need a properly configured devcontainer.json file to set up the environment. Fortunately, Streamlit Community Cloud is here to help! Although Community Cloud is primarily used to deploy and share apps with the rest of the world, we've built in some handy features to make it easy to use GitHub Codespaces. This guide explains how to create a Community Cloud account and use an automated workflow to get you into a GitHub codespace and live-editing a Streamlit app. All this happens right in your browser, no installation required. If you already created a Community Cloud account and connected GitHub, jump ahead to Create a new app from a template.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_315", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Prerequisites", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - You must have a GitHub account.", "prev_chunk_id": "chunk_314", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_316", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Sign up for Streamlit Community Cloud", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Sign up for Streamlit Community Cloud", "content": "Sign up for Streamlit Community Cloud - Go toshare.streamlit.io. - Click \"Continue to sign-in.\" - Click \"Continue with GitHub.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Fill in your account information, and click \"I accept\" at the bottom.", "prev_chunk_id": "chunk_315", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_317", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Add access to your public repositories", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Add access to your public repositories", "content": "Add access to your public repositories - In the upper-left corner, click on \"Workspaceswarning.\" - From the drop down, click \"Connect GitHub account.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_316", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_318", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Optional: Add access to private repositories", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Optional: Add access to private repositories", "content": "Optional: Add access to private repositories - In the upper-left corner, click on your GitHub username. - From the drop down, click \"Settings.\" - On the left side of the dialog, select \"Linked accounts.\" - Under \"Source control,\" click \"Connect herearrow_forward.\" - Click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_317", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_319", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Create a new app from a template", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Create a new app from a template", "content": "Create a new app from a template - In the upper-right corner, click \"Create app.\" - When asked \"Do you already have an app?\" click \"Nope, create one from a template.\" - From the list of templates on the left, select \"Blank app.\" - At the bottom, select the option to \"Open GitHub Codespaces...\" - At the bottom, click \"Deploy.\"", "prev_chunk_id": "chunk_318", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_320", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Edit your app in GitHub Codespaces", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Edit your app in GitHub Codespaces", "content": "Edit your app in GitHub Codespaces - Wait for GitHub to set up your codespace.It can take several minutes to fully initialize your codespace. After you see the Visual Studio Code editor in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, you will see a split screen view with a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file. - Go to the app's entrypoint file (streamlit_app.py) in the left pane, and change line 3 by adding \"Streamlit\" insidest.title.-st.title(\"🎈 My new app\") +st.title(\"🎈 My new Streamlit app\")Files are automatically saved in your codespace with each edit. - A moment after typing a change, your app on the right side will display a rerun prompt. Click \"Always rerun.\"If the rerun prompt disappears before you click it, you can hover over the overflow menu icon (more_vert) to bring it back. - Optional: Continue to make edits and observe the changes within seconds.", "prev_chunk_id": "chunk_319", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_321", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Publish your changes", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Publish your changes", "content": "Publish your changes - In the left navigation bar, click the source control icon. - In the source control sidebar on the left, enter a name for your commit. - Click \"checkCommit.\" - In the confirmation dialog, click \"Yes\" to stage and commit all your changes. Your changes are committed locally in your codespace. - In the source control sidebar on the left, click \"cached1arrow_upward\" to push your commit to GitHub. - In the confirmation dialog, click \"OK\" to push commits to \"origin/main.\"Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app. - Optional: To see your updated, published app, return to the \"My apps\" section of your workspace atshare.streamlit.io, and click on your app.", "prev_chunk_id": "chunk_320", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_322", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Learn Streamlit fundamentals", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Learn Streamlit fundamentals", "content": "Learn Streamlit fundamentals If you haven't learned Streamlit's basic concepts yet, this is a great time to go to Fundamentals. Use your codespace to walk through and try basic Streamlit commands. When finished, come back here to learn how to clean up your codespace.", "prev_chunk_id": "chunk_321", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_323", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Stop or delete your codespace", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Stop or delete your codespace", "content": "Stop or delete your codespace When you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done. - Go togithub.com/codespaces. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (more_horiz) for your codespace. - If you want to return to your work later, click \"Stop codespace.\" Otherwise, click \"Delete.\" - Congratulations! You just deployed an app to Streamlit Community Cloud. 🎉 Return to your workspace atshare.streamlit.io/anddeploy another Streamlit app.", "prev_chunk_id": "chunk_322", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_324", "url": "https://docs.streamlit.io/get-started/installation/community-cloud", "title": "Still have questions?", "page_title": "Use Community Cloud to develop with GitHub Codespaces - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_323", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_325", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Basic concepts of Streamlit", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Basic concepts of Streamlit", "content": "Basic concepts of Streamlit Working with Streamlit is simple. First you sprinkle a few Streamlit commands into a normal Python script, then you run it with streamlit run: As soon as you run the script as shown above, a local Streamlit server will spin up and your app will open in a new tab in your default web browser. The app is your canvas, where you'll draw charts, text, widgets, tables, and more. What gets drawn in the app is up to you. For example st.text writes raw text to your app, and st.line_chart draws — you guessed it — a line chart. Refer to our API documentation to see all commands that are available to you. Another way of running Streamlit is to run it as a Python module. This can be useful when configuring an IDE like PyCharm to work with Streamlit: Every time you want to update your app, save the source file. When you do that, Streamlit detects if there is a change and asks you whether you want to rerun your app. Choose \"Always rerun\" at the top-right of your screen to automatically update your app every time you change its source code. This allows you to work in a fast interactive loop: you type some code, save it, try it out live, then type some more code, save it, try it out, and so on until you're happy with the results. This tight loop between coding and viewing results live is one of the ways Streamlit makes your life easier. As of Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. If you try to run a Streamlit app from the root directory, Streamlit will throw a FileNotFoundError: [Errno 2] No such file or directory error.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_326", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Basic concepts of Streamlit", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Basic concepts of Streamlit", "content": "For more information, see GitHub issue #5239. If you are using Streamlit version 1.10.0 or higher, your main script should live in a directory other than the root directory. When using Docker, you can use the WORKDIR command to specify the directory where your main script lives. For an example of how to do this, read Create a Dockerfile. Streamlit's architecture allows you to write apps the same way you write plain Python scripts. To unlock this, Streamlit apps have a unique data flow: any time something must be updated on the screen, Streamlit reruns your entire Python script from top to bottom. This can happen in two situations: - Whenever you modify your app's source code. - Whenever a user interacts with widgets in the app. For example, when dragging a slider, entering text in an input box, or clicking a button. Whenever a callback is passed to a widget via the on_change (or on_click) parameter, the callback will always run before the rest of your script. For details on the Callbacks API, please refer to our Session State API Reference Guide. And to make all of this fast and seamless, Streamlit does some heavy lifting for you behind the scenes. A big player in this story is the @st.cache_data decorator, which allows developers to skip certain costly computations when their apps rerun. We'll cover caching later in this page. There are a few ways to display data (tables, arrays, data frames) in Streamlit apps. Below, you will be introduced to magic and st.write(), which can be used to write anything from text to tables. After that, let's take a look at methods designed specifically for visualizing data. You can also write to your app without calling any Streamlit methods. Streamlit supports \"magic commands,\" which means you don't have", "prev_chunk_id": "chunk_325", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_327", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Basic concepts of Streamlit", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Basic concepts of Streamlit", "content": "to use st.write() at all! To see this in action try this snippet: Any time that Streamlit sees a variable or a literal value on its own line, it automatically writes that to your app using st.write(). For more information, refer to the documentation on magic commands. Along with magic commands, st.write() is Streamlit's \"Swiss Army knife\". You can pass almost anything to st.write(): text, data, Matplotlib figures, Altair charts, and more. Don't worry, Streamlit will figure it out and render things the right way. There are other data specific functions like st.dataframe() and st.table() that you can also use for displaying data. Let's understand when to use these features and how to add colors and styling to your data frames. You might be asking yourself, \"why wouldn't I always use st.write()?\" There are a few reasons: - Magicandst.write()inspect the type of data that you've passed in, and then decide how to best render it in the app. Sometimes you want to draw it another way. For example, instead of drawing a dataframe as an interactive table, you may want to draw it as a static table by usingst.table(df). - The second reason is that other methods return an object that can be used and modified, either by adding data to it or replacing it. - Finally, if you use a more specific Streamlit method you can pass additional arguments to customize its behavior. For example, let's create a data frame and change its formatting with a Pandas Styler object. In this example, you'll use Numpy to generate a random sample, and the st.dataframe() method to draw an interactive table. Let's expand on the first example using the Pandas Styler object to highlight some elements in the interactive table. Streamlit also has a method for static table generation: st.table(). Streamlit", "prev_chunk_id": "chunk_326", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_328", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Basic concepts of Streamlit", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Basic concepts of Streamlit", "content": "supports several popular data charting libraries like Matplotlib, Altair, deck.gl, and more. In this section, you'll add a bar chart, line chart, and a map to your app. You can easily add a line chart to your app with st.line_chart(). We'll generate a random sample using Numpy and then chart it. With st.map() you can display data points on a map. Let's use Numpy to generate some sample data and plot it on a map of San Francisco. When you've got the data or model into the state that you want to explore, you can add in widgets like st.slider(), st.button() or st.selectbox(). It's really straightforward — treat widgets as variables: On first run, the app above should output the text \"0 squared is 0\". Then every time a user interacts with a widget, Streamlit simply reruns your script from top to bottom, assigning the current state of the widget to your variable in the process. For example, if the user moves the slider to position 10, Streamlit will rerun the code above and set x to 10 accordingly. So now you should see the text \"10 squared is 100\". Widgets can also be accessed by key, if you choose to specify a string to use as the unique key for the widget: Every widget with a key is automatically added to Session State. For more information about Session State, its association with widget state, and its limitations, see Session State API Reference Guide. One use case for checkboxes is to hide or show a specific chart or section in an app. st.checkbox() takes a single argument, which is the widget label. In this sample, the checkbox is used to toggle a conditional statement. Use st.selectbox to choose from a series. You can write in the options you want, or", "prev_chunk_id": "chunk_327", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_329", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Basic concepts of Streamlit", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Basic concepts of Streamlit", "content": "pass through an array or data frame column. Let's use the df data frame we created earlier. Streamlit makes it easy to organize your widgets in a left panel sidebar with st.sidebar. Each element that's passed to st.sidebar is pinned to the left, allowing users to focus on the content in your app while still having access to UI controls. For example, if you want to add a selectbox and a slider to a sidebar, use st.sidebar.slider and st.sidebar.selectbox instead of st.slider and st.selectbox: Beyond the sidebar, Streamlit offers several other ways to control the layout of your app. st.columns lets you place widgets side-by-side, and st.expander lets you conserve space by hiding away large content. When adding long running computations to an app, you can use st.progress() to display status in real time. First, let's import time. We're going to use the time.sleep() method to simulate a long running computation: Now, let's create a progress bar:", "prev_chunk_id": "chunk_328", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_330", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Development flow", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Development flow", "content": "Development flow Every time you want to update your app, save the source file. When you do that, Streamlit detects if there is a change and asks you whether you want to rerun your app. Choose \"Always rerun\" at the top-right of your screen to automatically update your app every time you change its source code. This allows you to work in a fast interactive loop: you type some code, save it, try it out live, then type some more code, save it, try it out, and so on until you're happy with the results. This tight loop between coding and viewing results live is one of the ways Streamlit makes your life easier. As of Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. If you try to run a Streamlit app from the root directory, Streamlit will throw a FileNotFoundError: [Errno 2] No such file or directory error. For more information, see GitHub issue #5239. If you are using Streamlit version 1.10.0 or higher, your main script should live in a directory other than the root directory. When using Docker, you can use the WORKDIR command to specify the directory where your main script lives. For an example of how to do this, read Create a Dockerfile.", "prev_chunk_id": "chunk_329", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_331", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Data flow", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Data flow", "content": "Data flow Streamlit's architecture allows you to write apps the same way you write plain Python scripts. To unlock this, Streamlit apps have a unique data flow: any time something must be updated on the screen, Streamlit reruns your entire Python script from top to bottom. This can happen in two situations: - Whenever you modify your app's source code. - Whenever a user interacts with widgets in the app. For example, when dragging a slider, entering text in an input box, or clicking a button. Whenever a callback is passed to a widget via the on_change (or on_click) parameter, the callback will always run before the rest of your script. For details on the Callbacks API, please refer to our Session State API Reference Guide. And to make all of this fast and seamless, Streamlit does some heavy lifting for you behind the scenes. A big player in this story is the @st.cache_data decorator, which allows developers to skip certain costly computations when their apps rerun. We'll cover caching later in this page.", "prev_chunk_id": "chunk_330", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_332", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Display and style data", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Display and style data", "content": "Display and style data There are a few ways to display data (tables, arrays, data frames) in Streamlit apps. Below, you will be introduced to magic and st.write(), which can be used to write anything from text to tables. After that, let's take a look at methods designed specifically for visualizing data.", "prev_chunk_id": "chunk_331", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_333", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Use magic", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Use magic", "content": "Use magic You can also write to your app without calling any Streamlit methods. Streamlit supports \"magic commands,\" which means you don't have to use st.write() at all! To see this in action try this snippet: Any time that Streamlit sees a variable or a literal value on its own line, it automatically writes that to your app using st.write(). For more information, refer to the documentation on magic commands.", "prev_chunk_id": "chunk_332", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_334", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Write a data frame", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Write a data frame", "content": "Write a data frame Along with magic commands, st.write() is Streamlit's \"Swiss Army knife\". You can pass almost anything to st.write(): text, data, Matplotlib figures, Altair charts, and more. Don't worry, Streamlit will figure it out and render things the right way. There are other data specific functions like st.dataframe() and st.table() that you can also use for displaying data. Let's understand when to use these features and how to add colors and styling to your data frames. You might be asking yourself, \"why wouldn't I always use st.write()?\" There are a few reasons: - Magicandst.write()inspect the type of data that you've passed in, and then decide how to best render it in the app. Sometimes you want to draw it another way. For example, instead of drawing a dataframe as an interactive table, you may want to draw it as a static table by usingst.table(df). - The second reason is that other methods return an object that can be used and modified, either by adding data to it or replacing it. - Finally, if you use a more specific Streamlit method you can pass additional arguments to customize its behavior. For example, let's create a data frame and change its formatting with a Pandas Styler object. In this example, you'll use Numpy to generate a random sample, and the st.dataframe() method to draw an interactive table. Let's expand on the first example using the Pandas Styler object to highlight some elements in the interactive table. Streamlit also has a method for static table generation: st.table().", "prev_chunk_id": "chunk_333", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_335", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Draw charts and maps", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Draw charts and maps", "content": "Draw charts and maps Streamlit supports several popular data charting libraries like Matplotlib, Altair, deck.gl, and more. In this section, you'll add a bar chart, line chart, and a map to your app.", "prev_chunk_id": "chunk_334", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_336", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Draw a line chart", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Draw a line chart", "content": "Draw a line chart You can easily add a line chart to your app with st.line_chart(). We'll generate a random sample using Numpy and then chart it.", "prev_chunk_id": "chunk_335", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_337", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Plot a map", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Plot a map", "content": "Plot a map With st.map() you can display data points on a map. Let's use Numpy to generate some sample data and plot it on a map of San Francisco.", "prev_chunk_id": "chunk_336", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_338", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Widgets", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Widgets", "content": "Widgets When you've got the data or model into the state that you want to explore, you can add in widgets like st.slider(), st.button() or st.selectbox(). It's really straightforward — treat widgets as variables: On first run, the app above should output the text \"0 squared is 0\". Then every time a user interacts with a widget, Streamlit simply reruns your script from top to bottom, assigning the current state of the widget to your variable in the process. For example, if the user moves the slider to position 10, Streamlit will rerun the code above and set x to 10 accordingly. So now you should see the text \"10 squared is 100\". Widgets can also be accessed by key, if you choose to specify a string to use as the unique key for the widget: Every widget with a key is automatically added to Session State. For more information about Session State, its association with widget state, and its limitations, see Session State API Reference Guide.", "prev_chunk_id": "chunk_337", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_339", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Use checkboxes to show/hide data", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Use checkboxes to show/hide data", "content": "Use checkboxes to show/hide data One use case for checkboxes is to hide or show a specific chart or section in an app. st.checkbox() takes a single argument, which is the widget label. In this sample, the checkbox is used to toggle a conditional statement.", "prev_chunk_id": "chunk_338", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_340", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Use a selectbox for options", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Use a selectbox for options", "content": "Use a selectbox for options Use st.selectbox to choose from a series. You can write in the options you want, or pass through an array or data frame column. Let's use the df data frame we created earlier.", "prev_chunk_id": "chunk_339", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_341", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Layout", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Layout", "content": "Layout Streamlit makes it easy to organize your widgets in a left panel sidebar with st.sidebar. Each element that's passed to st.sidebar is pinned to the left, allowing users to focus on the content in your app while still having access to UI controls. For example, if you want to add a selectbox and a slider to a sidebar, use st.sidebar.slider and st.sidebar.selectbox instead of st.slider and st.selectbox: Beyond the sidebar, Streamlit offers several other ways to control the layout of your app. st.columns lets you place widgets side-by-side, and st.expander lets you conserve space by hiding away large content. When adding long running computations to an app, you can use st.progress() to display status in real time. First, let's import time. We're going to use the time.sleep() method to simulate a long running computation: Now, let's create a progress bar:", "prev_chunk_id": "chunk_340", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_342", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Show progress", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Show progress", "content": "Show progress When adding long running computations to an app, you can use st.progress() to display status in real time. First, let's import time. We're going to use the time.sleep() method to simulate a long running computation: Now, let's create a progress bar:", "prev_chunk_id": "chunk_341", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_343", "url": "https://docs.streamlit.io/get-started/fundamentals/main-concepts", "title": "Still have questions?", "page_title": "Basic concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_342", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_344", "url": "https://docs.streamlit.io/get-started/fundamentals/summary", "title": "App model summary", "page_title": "App model summary - Streamlit Docs", "breadcrumbs": "App model summary", "content": "App model summary Now that you know a little more about all the individual pieces, let's close the loop and review how it works together: - Streamlit apps are Python scripts that run from top to bottom. - Every time a user opens a browser tab pointing to your app, the script is executed and a new session starts. - As the script executes, Streamlit draws its output live in a browser. - Every time a user interacts with a widget, your script is re-executed and Streamlit redraws its output in the browser.The output value of that widget matches the new value during that rerun. - Scripts use the Streamlit cache to avoid recomputing expensive functions, so updates happen very fast. - Session State lets you save information that persists between reruns when you need more than a simple widget. - Streamlit apps can contain multiple pages, which are defined in separate.pyfiles in apagesfolder.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_345", "url": "https://docs.streamlit.io/get-started/fundamentals/summary", "title": "Still have questions?", "page_title": "App model summary - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_344", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_346", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Create a multipage app", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Create a multipage app", "content": "Create a multipage app In Additional features, we introduced multipage apps, including how to define pages, structure and run multipage apps, and navigate between pages in the user interface. You can read more details in our guide to Multipage apps In this guide, let’s put our understanding of multipage apps to use by converting the previous version of our streamlit hello app to a multipage app!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_347", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Motivation", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Motivation", "content": "Motivation Before Streamlit 1.10.0, the streamlit hello command was a large single-page app. As there was no support for multiple pages, we resorted to splitting the app's content using st.selectbox in the sidebar to choose what content to run. The content is comprised of three demos for plotting, mapping, and dataframes. Here's what the code and single-page app looked like: Notice how large the file is! Each app “page\" is written as a function, and the selectbox is used to pick which page to display. As our app grows, maintaining the code requires a lot of additional overhead. Moreover, we’re limited by the st.selectbox UI to choose which “page\" to run, we cannot customize individual page titles with st.set_page_config, and we’re unable to navigate between pages using URLs.", "prev_chunk_id": "chunk_346", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_348", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Convert an existing app into a multipage app", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Convert an existing app into a multipage app", "content": "Convert an existing app into a multipage app Now that we've identified the limitations of a single-page app, what can we do about it? Armed with our knowledge from the previous section, we can convert the existing app to be a multipage app, of course! At a high level, we need to perform the following steps: - Create a newpagesfolder in the same folder where the “entrypoint file\" (hello.py) lives - Rename our entrypoint file toHello.py, so that the title in the sidebar is capitalized - Create three new files inside ofpages:pages/1_📈_Plotting_Demo.pypages/2_🌍_Mapping_Demo.pypages/3_📊_DataFrame_Demo.py - Move the contents of theplotting_demo,mapping_demo, anddata_frame_demofunctions into their corresponding new files from Step 3 - Runstreamlit run Hello.pyto view your newly converted multipage app! Now, let’s walk through each step of the process and view the corresponding changes in code.", "prev_chunk_id": "chunk_347", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_349", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Create the entrypoint file", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Create the entrypoint file", "content": "Create the entrypoint file We rename our entrypoint file to Hello.py , so that the title in the sidebar is capitalized and only the code for the intro page is included. Additionally, we’re able to customize the page title and favicon — as it appears in the browser tab with st.set_page_config. We can do so for each of our pages too! Notice how the sidebar does not contain page labels as we haven’t created any pages yet.", "prev_chunk_id": "chunk_348", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_350", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Create multiple pages", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Create multiple pages", "content": "Create multiple pages A few things to remember here: - We can change the ordering of pages in our MPA by adding numbers to the beginning of each Python file. If we add a 1 to the front of our file name, Streamlit will put that file first in the list. - The name of each Streamlit app is determined by the file name, so to change the app name you need to change the file name! - We can add some fun to our app by adding emojis to our file names that will render in our Streamlit app. - Each page will have its own URL, defined by the name of the file. Check out how we do all this below! For each new page, we create a new file inside the pages folder, and add the appropriate demo code into it. With our additional pages created, we can now put it all together in the final step below.", "prev_chunk_id": "chunk_349", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_351", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Run the multipage app", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Run the multipage app", "content": "Run the multipage app To run your newly converted multipage app, run: That’s it! The Hello.py script now corresponds to the main page of your app, and other scripts that Streamlit finds in the pages folder will also be present in the new page selector that appears in the sidebar.", "prev_chunk_id": "chunk_350", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_352", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Next steps", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Next steps", "content": "Next steps Congratulations! 🎉 If you've read this far, chances are you've learned to create both single-page and multipage apps. Where you go from here is entirely up to your creativity! We’re excited to see what you’ll build now that adding additional pages to your apps is easier than ever. Try adding more pages to the app we've just built as an exercise. Also, stop by the forum to show off your multipage apps with the Streamlit community! 🎈 Here are a few resources to help you get started: - Deploy your app for free on Streamlit'sCommunity Cloud. - Post a question or share your multipage app on ourcommunity forum. - Check out our documentation onMultipage apps. - Read throughConceptsfor things like caching, theming, and adding statefulness to apps. - Browse ourAPI referencefor examples of every Streamlit command.", "prev_chunk_id": "chunk_351", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_353", "url": "https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app", "title": "Still have questions?", "page_title": "Create a multipage app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_352", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_354", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create an app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create an app", "content": "Create an app If you've made it this far, chances are you've installed Streamlit and run through the basics in Basic concepts and Advanced concepts. If not, now is a good time to take a look. The easiest way to learn how to use Streamlit is to try things out yourself. As you read through this guide, test each method. As long as your app is running, every time you add a new element to your script and save, Streamlit's UI will ask if you'd like to rerun the app and view the changes. This allows you to work in a fast interactive loop: you write some code, save it, review the output, write some more, and so on, until you're happy with the results. The goal is to use Streamlit to create an interactive app for your data or model and along the way to use Streamlit to review, debug, perfect, and share your code. In this guide, you're going to use Streamlit's core features to create an interactive app; exploring a public Uber dataset for pickups and drop-offs in New York City. When you're finished, you'll know how to fetch and cache data, draw charts, plot information on a map, and use interactive widgets, like a slider, to filter results. Streamlit is more than just a way to make data apps, it’s also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today! - The first step is to create a new Python script. Let's call ituber_pickups.py. - Openuber_pickups.pyin your favorite IDE or text editor, then add these lines:import streamlit as st import pandas", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_355", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create an app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create an app", "content": "as pd import numpy as np - Every good app has a title, so let's add one:st.title('Uber pickups in NYC') - Now it's time to run Streamlit from the command line:streamlit run uber_pickups.pyRunning a Streamlit app is no different than any other Python script. Whenever you need to view the app, you can use this command.starTipDid you know you can also pass a URL tostreamlit run? This is great when combined with GitHub Gists. For example:streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py - As usual, the app should automatically open in a new tab in your browser. Now that you have an app, the next thing you'll need to do is fetch the Uber dataset for pickups and drop-offs in New York City. - Let's start by writing a function to load the data. Add this code to your script:DATE_COLUMN = 'date/time' DATA_URL = ('https://s3-us-west-2.amazonaws.com/' 'streamlit-demo-data/uber-raw-data-sep14.csv.gz') def load_data(nrows): data = pd.read_csv(DATA_URL, nrows=nrows) lowercase = lambda x: str(x).lower() data.rename(lowercase, axis='columns', inplace=True) data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN]) return dataYou'll notice thatload_datais a plain old function that downloads some data, puts it in a Pandas dataframe, and converts the date column from text to datetime. The function accepts a single parameter (nrows), which specifies the number of rows that you want to load into the dataframe. - Now let's test the function and review the output. Below your function, add these lines:# Create a text element and let the reader know the data is loading. data_load_state = st.text('Loading data...') # Load 10,000 rows of data into the dataframe. data = load_data(10000) # Notify the reader that the data was successfully loaded. data_load_state.text('Loading data...done!')You'll see a few buttons in the upper-right corner of your app asking if you'd like to rerun the app. ChooseAlways rerun, and you'll see your changes automatically each time you save. Ok, that's underwhelming... It turns", "prev_chunk_id": "chunk_354", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_356", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create an app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create an app", "content": "out that it takes a long time to download data, and load 10,000 lines into a dataframe. Converting the date column into datetime isn’t a quick job either. You don’t want to reload the data each time the app is updated – luckily Streamlit allows you to cache the data. - Try adding@st.cache_databefore theload_datadeclaration:@st.cache_data def load_data(nrows): - Then save the script, and Streamlit will automatically rerun your app. Since this is the first time you’re running the script with@st.cache_data, you won't see anything change. Let’s tweak your file a little bit more so that you can see the power of caching. - Replace the linedata_load_state.text('Loading data...done!')with this:data_load_state.text(\"Done! (using st.cache_data)\") - Now save. See how the line you added appeared immediately? If you take a step back for a second, this is actually quite amazing. Something magical is happening behind the scenes, and it only takes one line of code to activate it. Let's take a few minutes to discuss how @st.cache_data actually works. When you mark a function with Streamlit’s cache annotation, it tells Streamlit that whenever the function is called that it should check two things: - The input parameters you used for the function call. - The code inside the function. If this is the first time Streamlit has seen both these items, with these exact values, and in this exact combination, it runs the function and stores the result in a local cache. The next time the function is called, if the two values haven't changed, then Streamlit knows it can skip executing the function altogether. Instead, it reads the output from the local cache and passes it on to the caller -- like magic. \"But, wait a second,\" you’re saying to yourself, \"this sounds too good to be true. What are the limitations of all this", "prev_chunk_id": "chunk_355", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_357", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create an app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create an app", "content": "awesomesauce?\" Well, there are a few: - Streamlit will only check for changes within the current working directory. If you upgrade a Python library, Streamlit's cache will only notice this if that library is installed inside your working directory. - If your function is not deterministic (that is, its output depends on random numbers), or if it pulls data from an external time-varying source (for example, a live stock market ticker service) the cached value will be none-the-wiser. - Lastly, you should avoid mutating the output of a function cached withst.cache_datasince cached values are stored by reference. While these limitations are important to keep in mind, they tend not to be an issue a surprising amount of the time. Those times, this cache is really transformational. Now that you know how caching with Streamlit works, let’s get back to the Uber pickup data. It's always a good idea to take a look at the raw data you're working with before you start working with it. Let's add a subheader and a printout of the raw data to the app: In the Basic concepts guide you learned that st.write will render almost anything you pass to it. In this case, you're passing in a dataframe and it's rendering as an interactive table. st.write tries to do the right thing based on the data type of the input. If it isn't doing what you expect you can use a specialized command like st.dataframe instead. For a full list, see API reference. Now that you've had a chance to take a look at the dataset and observe what's available, let's take things a step further and draw a histogram to see what Uber's busiest hours are in New York City. - To start, let's add a subheader just below the raw data section:st.subheader('Number", "prev_chunk_id": "chunk_356", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_358", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create an app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create an app", "content": "of pickups by hour') - Use NumPy to generate a histogram that breaks down pickup times binned by hour:hist_values = np.histogram( data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0] - Now, let's use Streamlit'sst.bar_chart()method to draw this histogram.st.bar_chart(hist_values) - Save your script. This histogram should show up in your app right away. After a quick review, it looks like the busiest time is 17:00 (5 P.M.). To draw this diagram we used Streamlit's native bar_chart() method, but it's important to know that Streamlit supports more complex charting libraries like Altair, Bokeh, Plotly, Matplotlib and more. For a full list, see supported charting libraries. Using a histogram with Uber's dataset helped us determine what the busiest times are for pickups, but what if we wanted to figure out where pickups were concentrated throughout the city. While you could use a bar chart to show this data, it wouldn't be easy to interpret unless you were intimately familiar with latitudinal and longitudinal coordinates in the city. To show pickup concentration, let's use Streamlit st.map() function to overlay the data on a map of New York City. - Add a subheader for the section:st.subheader('Map of all pickups') - Use thest.map()function to plot the data:st.map(data) - Save your script. The map is fully interactive. Give it a try by panning or zooming in a bit. After drawing your histogram, you determined that the busiest hour for Uber pickups was 17:00. Let's redraw the map to show the concentration of pickups at 17:00. - Locate the following code snippet:st.subheader('Map of all pickups') st.map(data) - Replace it with:hour_to_filter = 17 filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter] st.subheader(f'Map of all pickups at {hour_to_filter}:00') st.map(filtered_data) - You should see the data update instantly. To draw this map we used the st.map function that's built into Streamlit, but if you'd like to visualize complex map", "prev_chunk_id": "chunk_357", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_359", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create an app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create an app", "content": "data, we encourage you to take a look at the st.pydeck_chart. In the last section, when you drew the map, the time used to filter results was hardcoded into the script, but what if we wanted to let a reader dynamically filter the data in real time? Using Streamlit's widgets you can. Let's add a slider to the app with the st.slider() method. - Locatehour_to_filterand replace it with this code snippet:hour_to_filter = st.slider('hour', 0, 23, 17) # min: 0h, max: 23h, default: 17h - Use the slider and watch the map update in real time. Sliders are just one way to dynamically change the composition of your app. Let's use the st.checkbox function to add a checkbox to your app. We'll use this checkbox to show/hide the raw data table at the top of your app. - Locate these lines:st.subheader('Raw data') st.write(data) - Replace these lines with the following code:if st.checkbox('Show raw data'): st.subheader('Raw data') st.write(data) We're sure you've got your own ideas. When you're done with this tutorial, check out all the widgets that Streamlit exposes in our API Reference. That's it, you've made it to the end. Here's the complete script for our interactive app. After you’ve built a Streamlit app, it's time to share it! To show it off to the world you can use Streamlit Community Cloud to deploy, manage, and share your app for free. It works in 3 simple steps: - Put your app in a public GitHub repo (and make sure it has a requirements.txt!) - Sign intoshare.streamlit.io - Click 'Deploy an app' and then paste in your GitHub URL That's it! 🎈 You now have a publicly deployed app that you can share with the world. Click to learn more about how to use Streamlit Community Cloud. That's it for getting started,", "prev_chunk_id": "chunk_358", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_360", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create an app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create an app", "content": "now you can go and build your own apps! If you run into difficulties here are a few things you can do. - Check out ourcommunity forumand post a question - Quick help from command line withstreamlit help - Go through ourKnowledge Basefor tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps. - Read more documentation! Check out:Conceptsfor things like caching, theming, and adding statefulness to apps.API referencefor examples of every Streamlit command.", "prev_chunk_id": "chunk_359", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_361", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Create your first app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Create your first app", "content": "Create your first app Streamlit is more than just a way to make data apps, it’s also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today! - The first step is to create a new Python script. Let's call ituber_pickups.py. - Openuber_pickups.pyin your favorite IDE or text editor, then add these lines:import streamlit as st import pandas as pd import numpy as np - Every good app has a title, so let's add one:st.title('Uber pickups in NYC') - Now it's time to run Streamlit from the command line:streamlit run uber_pickups.pyRunning a Streamlit app is no different than any other Python script. Whenever you need to view the app, you can use this command.starTipDid you know you can also pass a URL tostreamlit run? This is great when combined with GitHub Gists. For example:streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py - As usual, the app should automatically open in a new tab in your browser.", "prev_chunk_id": "chunk_360", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_362", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Fetch some data", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Fetch some data", "content": "Fetch some data Now that you have an app, the next thing you'll need to do is fetch the Uber dataset for pickups and drop-offs in New York City. - Let's start by writing a function to load the data. Add this code to your script:DATE_COLUMN = 'date/time' DATA_URL = ('https://s3-us-west-2.amazonaws.com/' 'streamlit-demo-data/uber-raw-data-sep14.csv.gz') def load_data(nrows): data = pd.read_csv(DATA_URL, nrows=nrows) lowercase = lambda x: str(x).lower() data.rename(lowercase, axis='columns', inplace=True) data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN]) return dataYou'll notice thatload_datais a plain old function that downloads some data, puts it in a Pandas dataframe, and converts the date column from text to datetime. The function accepts a single parameter (nrows), which specifies the number of rows that you want to load into the dataframe. - Now let's test the function and review the output. Below your function, add these lines:# Create a text element and let the reader know the data is loading. data_load_state = st.text('Loading data...') # Load 10,000 rows of data into the dataframe. data = load_data(10000) # Notify the reader that the data was successfully loaded. data_load_state.text('Loading data...done!')You'll see a few buttons in the upper-right corner of your app asking if you'd like to rerun the app. ChooseAlways rerun, and you'll see your changes automatically each time you save. Ok, that's underwhelming... It turns out that it takes a long time to download data, and load 10,000 lines into a dataframe. Converting the date column into datetime isn’t a quick job either. You don’t want to reload the data each time the app is updated – luckily Streamlit allows you to cache the data.", "prev_chunk_id": "chunk_361", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_363", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Effortless caching", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Effortless caching", "content": "Effortless caching - Try adding@st.cache_databefore theload_datadeclaration:@st.cache_data def load_data(nrows): - Then save the script, and Streamlit will automatically rerun your app. Since this is the first time you’re running the script with@st.cache_data, you won't see anything change. Let’s tweak your file a little bit more so that you can see the power of caching. - Replace the linedata_load_state.text('Loading data...done!')with this:data_load_state.text(\"Done! (using st.cache_data)\") - Now save. See how the line you added appeared immediately? If you take a step back for a second, this is actually quite amazing. Something magical is happening behind the scenes, and it only takes one line of code to activate it.", "prev_chunk_id": "chunk_362", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_364", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "How's it work?", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "How's it work?", "content": "How's it work? Let's take a few minutes to discuss how @st.cache_data actually works. When you mark a function with Streamlit’s cache annotation, it tells Streamlit that whenever the function is called that it should check two things: - The input parameters you used for the function call. - The code inside the function. If this is the first time Streamlit has seen both these items, with these exact values, and in this exact combination, it runs the function and stores the result in a local cache. The next time the function is called, if the two values haven't changed, then Streamlit knows it can skip executing the function altogether. Instead, it reads the output from the local cache and passes it on to the caller -- like magic. \"But, wait a second,\" you’re saying to yourself, \"this sounds too good to be true. What are the limitations of all this awesomesauce?\" Well, there are a few: - Streamlit will only check for changes within the current working directory. If you upgrade a Python library, Streamlit's cache will only notice this if that library is installed inside your working directory. - If your function is not deterministic (that is, its output depends on random numbers), or if it pulls data from an external time-varying source (for example, a live stock market ticker service) the cached value will be none-the-wiser. - Lastly, you should avoid mutating the output of a function cached withst.cache_datasince cached values are stored by reference. While these limitations are important to keep in mind, they tend not to be an issue a surprising amount of the time. Those times, this cache is really transformational. Now that you know how caching with Streamlit works, let’s get back to the Uber pickup data.", "prev_chunk_id": "chunk_363", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_365", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Inspect the raw data", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Inspect the raw data", "content": "Inspect the raw data It's always a good idea to take a look at the raw data you're working with before you start working with it. Let's add a subheader and a printout of the raw data to the app: In the Basic concepts guide you learned that st.write will render almost anything you pass to it. In this case, you're passing in a dataframe and it's rendering as an interactive table. st.write tries to do the right thing based on the data type of the input. If it isn't doing what you expect you can use a specialized command like st.dataframe instead. For a full list, see API reference.", "prev_chunk_id": "chunk_364", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_366", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Draw a histogram", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Draw a histogram", "content": "Draw a histogram Now that you've had a chance to take a look at the dataset and observe what's available, let's take things a step further and draw a histogram to see what Uber's busiest hours are in New York City. - To start, let's add a subheader just below the raw data section:st.subheader('Number of pickups by hour') - Use NumPy to generate a histogram that breaks down pickup times binned by hour:hist_values = np.histogram( data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0] - Now, let's use Streamlit'sst.bar_chart()method to draw this histogram.st.bar_chart(hist_values) - Save your script. This histogram should show up in your app right away. After a quick review, it looks like the busiest time is 17:00 (5 P.M.). To draw this diagram we used Streamlit's native bar_chart() method, but it's important to know that Streamlit supports more complex charting libraries like Altair, Bokeh, Plotly, Matplotlib and more. For a full list, see supported charting libraries.", "prev_chunk_id": "chunk_365", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_367", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Plot data on a map", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Plot data on a map", "content": "Plot data on a map Using a histogram with Uber's dataset helped us determine what the busiest times are for pickups, but what if we wanted to figure out where pickups were concentrated throughout the city. While you could use a bar chart to show this data, it wouldn't be easy to interpret unless you were intimately familiar with latitudinal and longitudinal coordinates in the city. To show pickup concentration, let's use Streamlit st.map() function to overlay the data on a map of New York City. - Add a subheader for the section:st.subheader('Map of all pickups') - Use thest.map()function to plot the data:st.map(data) - Save your script. The map is fully interactive. Give it a try by panning or zooming in a bit. After drawing your histogram, you determined that the busiest hour for Uber pickups was 17:00. Let's redraw the map to show the concentration of pickups at 17:00. - Locate the following code snippet:st.subheader('Map of all pickups') st.map(data) - Replace it with:hour_to_filter = 17 filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter] st.subheader(f'Map of all pickups at {hour_to_filter}:00') st.map(filtered_data) - You should see the data update instantly. To draw this map we used the st.map function that's built into Streamlit, but if you'd like to visualize complex map data, we encourage you to take a look at the st.pydeck_chart.", "prev_chunk_id": "chunk_366", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_368", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Filter results with a slider", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Filter results with a slider", "content": "Filter results with a slider In the last section, when you drew the map, the time used to filter results was hardcoded into the script, but what if we wanted to let a reader dynamically filter the data in real time? Using Streamlit's widgets you can. Let's add a slider to the app with the st.slider() method. - Locatehour_to_filterand replace it with this code snippet:hour_to_filter = st.slider('hour', 0, 23, 17) # min: 0h, max: 23h, default: 17h - Use the slider and watch the map update in real time.", "prev_chunk_id": "chunk_367", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_369", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Use a button to toggle data", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Use a button to toggle data", "content": "Use a button to toggle data Sliders are just one way to dynamically change the composition of your app. Let's use the st.checkbox function to add a checkbox to your app. We'll use this checkbox to show/hide the raw data table at the top of your app. - Locate these lines:st.subheader('Raw data') st.write(data) - Replace these lines with the following code:if st.checkbox('Show raw data'): st.subheader('Raw data') st.write(data) We're sure you've got your own ideas. When you're done with this tutorial, check out all the widgets that Streamlit exposes in our API Reference.", "prev_chunk_id": "chunk_368", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_370", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Let's put it all together", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Let's put it all together", "content": "Let's put it all together That's it, you've made it to the end. Here's the complete script for our interactive app.", "prev_chunk_id": "chunk_369", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_371", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Share your app", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Share your app", "content": "Share your app After you’ve built a Streamlit app, it's time to share it! To show it off to the world you can use Streamlit Community Cloud to deploy, manage, and share your app for free. It works in 3 simple steps: - Put your app in a public GitHub repo (and make sure it has a requirements.txt!) - Sign intoshare.streamlit.io - Click 'Deploy an app' and then paste in your GitHub URL That's it! 🎈 You now have a publicly deployed app that you can share with the world. Click to learn more about how to use Streamlit Community Cloud.", "prev_chunk_id": "chunk_370", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_372", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Get help", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Get help", "content": "Get help That's it for getting started, now you can go and build your own apps! If you run into difficulties here are a few things you can do. - Check out ourcommunity forumand post a question - Quick help from command line withstreamlit help - Go through ourKnowledge Basefor tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps. - Read more documentation! Check out:Conceptsfor things like caching, theming, and adding statefulness to apps.API referencefor examples of every Streamlit command.", "prev_chunk_id": "chunk_371", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_373", "url": "https://docs.streamlit.io/get-started/tutorials/create-an-app", "title": "Still have questions?", "page_title": "Create an app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_372", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_374", "url": "https://docs.streamlit.io/develop/concepts/app-testing", "title": "Streamlit's native app testing framework", "page_title": "Streamlit's native app testing framework - Streamlit Docs", "breadcrumbs": "Streamlit's native app testing framework", "content": "Streamlit's native app testing framework Streamlit app testing enables developers to build and run automated tests. Bring your favorite test automation software and enjoy simple syntax to simulate user input and inspect rendered output. The provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. AppTest provides similar functionality to browser automation tools like Selenium or Playwright, but with less overhead to write and execute tests. Use our testing framework with a tool like pytest to execute or automate your tests. A typical pattern is to build a suite of tests for an app to ensure consistent functionality as the app evolves. The tests run locally and/or in a CI environment like GitHub Actions.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_375", "url": "https://docs.streamlit.io/develop/concepts/app-testing", "title": "Still have questions?", "page_title": "Streamlit's native app testing framework - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_374", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_376", "url": "https://docs.streamlit.io/develop/concepts/configuration", "title": "Configuration options", "page_title": "Configure and customize your app - Streamlit Docs", "breadcrumbs": "Configuration options", "content": "Configuration options Understand the types of options available to you through Streamlit configuration.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_377", "url": "https://docs.streamlit.io/develop/concepts/configuration", "title": "HTTPS support", "page_title": "Configure and customize your app - Streamlit Docs", "breadcrumbs": "HTTPS support", "content": "HTTPS support Understand how to configure SSL and TLS for your Streamlit app.", "prev_chunk_id": "chunk_376", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_378", "url": "https://docs.streamlit.io/develop/concepts/configuration", "title": "Static file serving", "page_title": "Configure and customize your app - Streamlit Docs", "breadcrumbs": "Static file serving", "content": "Static file serving Understand how to host files alongside your app to make them accessible by URL. Use this if you want to point to files with raw HTML.", "prev_chunk_id": "chunk_377", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_379", "url": "https://docs.streamlit.io/develop/concepts/configuration", "title": "Theming", "page_title": "Configure and customize your app - Streamlit Docs", "breadcrumbs": "Theming", "content": "Theming Understand how you can use theming configuration options to customize the appearance of your app.", "prev_chunk_id": "chunk_378", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_380", "url": "https://docs.streamlit.io/develop/concepts/configuration", "title": "Customize colors and borders", "page_title": "Configure and customize your app - Streamlit Docs", "breadcrumbs": "Customize colors and borders", "content": "Customize colors and borders Understand the configuration options for customizing your app's color scheme.", "prev_chunk_id": "chunk_379", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_381", "url": "https://docs.streamlit.io/develop/concepts/configuration", "title": "Customize fonts", "page_title": "Configure and customize your app - Streamlit Docs", "breadcrumbs": "Customize fonts", "content": "Customize fonts Understand the configuration options for customizing your app's font.", "prev_chunk_id": "chunk_380", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_382", "url": "https://docs.streamlit.io/develop/concepts/configuration", "title": "Still have questions?", "page_title": "Configure and customize your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_381", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_383", "url": "https://docs.streamlit.io/develop/api-reference/app-testing/testing-element-classes", "title": "st.testing.v1.element_tree.Block", "page_title": "Testing element classes - Streamlit Docs", "breadcrumbs": "st.testing.v1.element_tree.Block", "content": "st.testing.v1.element_tree.Block The Block class has the same methods and attributes as AppTest. A Block instance represents a container of elements just as AppTest represents the entire app. For example, Block.button will produce a WidgetList of Button in the same manner as AppTest.button. ChatMessage, Column, and Tab all inherit from Block. For all container classes, parameters of the original element can be obtained as properties. For example, ChatMessage.avatar and Tab.label.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_384", "url": "https://docs.streamlit.io/develop/api-reference/app-testing/testing-element-classes", "title": "Still have questions?", "page_title": "Testing element classes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_383", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_385", "url": "https://docs.streamlit.io/develop/quick-reference/prerelease", "title": "Pre-release features", "page_title": "Pre-release features - Streamlit Docs", "breadcrumbs": "Pre-release features", "content": "Pre-release features At Streamlit, we like to move quick while keeping things stable. In our latest effort to move even faster without sacrificing stability, we're offering our bold and fearless users two ways to try out Streamlit's bleeding-edge features: - Experimental features - Nightly releases", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_386", "url": "https://docs.streamlit.io/develop/quick-reference/prerelease", "title": "Experimental Features", "page_title": "Pre-release features - Streamlit Docs", "breadcrumbs": "Experimental Features", "content": "Experimental Features Less stable Streamlit features have one naming convention: st.experimental_. This distinction is a prefix we attach to our command names to make sure their status is clear to everyone. Here's a quick rundown of what you get from each naming convention: - st: this is where our core features likest.writeandst.dataframelive. If we ever make backward-incompatible changes to these, they will take place gradually and with months of announcements and warnings. - experimental: this is where we'll put all new features that may or may not ever make it into Streamlit core. This gives you a chance to try the next big thing we're cooking up weeks or months before we're ready to stabilize its API. We don't know whether these features have a future, but we want you to have access to everything we're trying, and work with us to figure them out. Features with the experimental_ naming convention are things that we're still working on or trying to understand. If these features are successful, at some point they'll become part of Streamlit core. If unsuccessful, these features are removed without much notice. While in experimental, a feature's API and behaviors may not be stable, and it's possible they could change in ways that aren't backward-compatible. - A feature is added with theexperimental_prefix. - The feature is potentially tweaked over time, with possible API/behavior breakages. - If successful, we promote the feature to Streamlit core and remove it fromexperimental_:a. The feature's API stabilizes and the feature isclonedwithout theexperimental_prefix, so it exists as bothstandexperimental_. At this point, users will see a warning when using the version of the feature with theexperimental_prefix -- but the feature will still work.b. At some point, the code of theexperimental_-prefixed feature isremoved, but there will still be a stub of the function prefixed withexperimental_that", "prev_chunk_id": "chunk_385", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_387", "url": "https://docs.streamlit.io/develop/quick-reference/prerelease", "title": "Experimental Features", "page_title": "Pre-release features - Streamlit Docs", "breadcrumbs": "Experimental Features", "content": "shows an error with appropriate instructions.c. Finally, at a later date theexperimental_version is removed. - If unsuccessful, the feature is removed without much notice and we leave a stub inexperimental_that shows an error with instructions.", "prev_chunk_id": "chunk_386", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_388", "url": "https://docs.streamlit.io/develop/quick-reference/prerelease", "title": "The lifecycle of an experimental feature", "page_title": "Pre-release features - Streamlit Docs", "breadcrumbs": "The lifecycle of an experimental feature", "content": "The lifecycle of an experimental feature - A feature is added with theexperimental_prefix. - The feature is potentially tweaked over time, with possible API/behavior breakages. - If successful, we promote the feature to Streamlit core and remove it fromexperimental_:a. The feature's API stabilizes and the feature isclonedwithout theexperimental_prefix, so it exists as bothstandexperimental_. At this point, users will see a warning when using the version of the feature with theexperimental_prefix -- but the feature will still work.b. At some point, the code of theexperimental_-prefixed feature isremoved, but there will still be a stub of the function prefixed withexperimental_that shows an error with appropriate instructions.c. Finally, at a later date theexperimental_version is removed. - If unsuccessful, the feature is removed without much notice and we leave a stub inexperimental_that shows an error with instructions.", "prev_chunk_id": "chunk_387", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_389", "url": "https://docs.streamlit.io/develop/quick-reference/prerelease", "title": "Nightly releases", "page_title": "Pre-release features - Streamlit Docs", "breadcrumbs": "Nightly releases", "content": "Nightly releases In addition to experimental features, we offer another way to try out Streamlit's newest features: nightly releases. At the end of each day (at night 🌛), our bots run automated tests against the latest Streamlit code and, if everything looks good, it publishes them as the streamlit-nightly package. This means the nightly build includes all our latest features, bug fixes, and other enhancements on the same day they land on our codebase. How does this differ from official releases? Official Streamlit releases go not only through both automated tests but also rigorous manual testing, while nightly releases only have automated tests. It's important to keep in mind that new features introduced in nightly releases often lack polish. In our official releases, we always make double-sure all new features are ready for prime time. How do I use the nightly release? All you need to do is install the streamlit-nightly package: Why should I use the nightly release? Because you can't wait for official releases, and you want to help us find bugs early! Why shouldn't I use the nightly release? While our automated tests have high coverage, there's still a significant likelihood that there will be some bugs in the nightly code. Can I choose which nightly release I want to install? If you'd like to use a specific version, you can find the version number in our Release history. Specify the desired version using pip as usual: pip install streamlit-nightly==x.yy.zz-123456. Can I compare changes between releases? If you'd like to review the changes for a nightly release, you can use the comparison tool on GitHub.", "prev_chunk_id": "chunk_388", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_390", "url": "https://docs.streamlit.io/develop/quick-reference/prerelease", "title": "Still have questions?", "page_title": "Pre-release features - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_389", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_391", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes", "title": "Release notes", "page_title": "Release notes - Streamlit Docs", "breadcrumbs": "Release notes", "content": "Release notes This page lists highlights, bug fixes, and known issues for the latest release of Streamlit. If you're looking for information about nightly releases or experimental features, see Pre-release features.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_392", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes", "title": "Version 1.48.0 (latest)", "page_title": "Release notes - Streamlit Docs", "breadcrumbs": "Version 1.48.0 (latest)", "content": "Version 1.48.0 (latest) Release date: August 5, 2025 Highlights - 💪 Announcing horizontal flexcontainers! Configure the alignment, direction, and gap of containers to create dynamic layouts. Notable Changes - 🪵st.logoutwill log the user out of their identity provider if the server metadata includesend_session_endpoint(#11901,#11900). Thanks,velochy! - 💬 You can configure the dismissibility ofst.dialogand set callback functions (#9504,#12034). Thanks,souvikmaji! - ↔️ You can set awidthparameter forbuttonsandpopovers. - 🧑‍💻codeFontWeightcan be configured separately in the sidebar. - 📶 You can configure the WebSocket ping interval with theserver.websocketPingIntervalconfiguration option (#12117,#12108). Other Changes - 🌀 The spinner design was unified across Streamlit commands (#12031). - 💅 Design and style tweaks (#12032,#11989,#11986,#11999,#12015,#11995,#11981,#11964). - 🔄 Error logic and logging was improved to reduce confusion fromasyncioruntime errors when unrelated errors are raised (#12008). - 🪧 Dataframe column menus include an icon to show the column type and a button to copy the column name (#11303). - 💽 For convenience, there are additional \"extras\" installation options (#11760,#8233). - 📁 Additional checks are performed to validate the extension of uploaded files, but app developers are still responsible for checking and handling the security of uploaded files (#11884,#11883). - 🔘 Button group widgets are identified by their command name in error messages (#11769,#11753). Thanks,bajajku! - ⚔️ Forst.snow,st.balloons, chat avatars, and media elements, thecrossoriginproperty can be configured by hosts (#12087,#11948). - 🦗 Bug fix: Ctrl+C will stop a Streamlit server in Windows, even if there is no active session (#12049,#6855). - 🦂 Bug fix:st.line_chartuses the column order in the chart data instead of reordering them alphabetically (#12092,#12071). - 🦟 Bug fix: Menu items set inst.set_page_configare not hidden whenclient.toolbarModeis set to\"minimal\"(#12091,#12083). - 🦠 Bug fix:theme.codeFontWeightdoes not interfere with bold inline code (#12074,#11976). - 🪰 Bug fix: To allow fractional pixel values, heading font sizes in theming configuration aren't rounded (#12077,#11963). - 🪳 Bug fix:", "prev_chunk_id": "chunk_391", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_393", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes", "title": "Version 1.48.0 (latest)", "page_title": "Release notes - Streamlit Docs", "breadcrumbs": "Version 1.48.0 (latest)", "content": "Altair 5.4.0 and 5.4.1 have been excluded to prevent an upstream bug with reading dataframes (#12066,#12064). - 🕷️ Bug fix: Dataframe scrollbars have been tweaked to avoid sizing problems (#11936,#11921,#12053,#11985). - 🐞 Bug fix: Linting accepts lists in addition to tuples for callback arguments in widgets (#12039). - 🐝 Bug fix: To fix a deprecation warning, Altair theme syntax was updated (#12050). - 🐜 Bug fix:st.navigationdoes not hide the menu when a single section is used withposition=\"top\"(#12025,#12029). - 🪲 Bug fix: The sidebar state does not reset when the window is resized (#12024,#12016). - 🐛 Bug fix:st.pillsandst.segmented_controldon't raise unintendedStreamlitDuplicateElementIderrors (#11982,#11975).", "prev_chunk_id": "chunk_392", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_394", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes", "title": "Older versions of Streamlit", "page_title": "Release notes - Streamlit Docs", "breadcrumbs": "Older versions of Streamlit", "content": "Older versions of Streamlit - 2025 release notes - 2024 release notes - 2023 release notes - 2022 release notes - 2021 release notes - 2020 release notes - 2019 release notes", "prev_chunk_id": "chunk_393", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_395", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes", "title": "Still have questions?", "page_title": "Release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_394", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_396", "url": "https://docs.streamlit.io/deploy/concepts/secrets", "title": "Managing secrets when deploying your app", "page_title": "Managing secrets when deploying your app - Streamlit Docs", "breadcrumbs": "Managing secrets when deploying your app", "content": "Managing secrets when deploying your app If you are connecting to data sources or external services, you will likely be handling secret information like credentials or keys. Secret information should be stored and transmitted in a secure manner. When you deploy your app, ensure that you understand your platform's features and mechanisms for handling secrets so you can follow best practice. Avoid saving secrets directly in your code and keep .gitignore updated to prevent accidentally committing a local secret to your repository. For helpful reminders, see Security reminders. If you are using Streamlit Community Cloud, Secrets management allows you save environment variables and store secrets outside of your code. If you are using another platform designed for Streamlit, check if they have a built-in mechanism for working with secrets. In some cases, they may even support st.secrets or securely uploading your secrets.toml file. For information about using st.connection with environment variables, see Global secrets, managing multiple apps and multiple data stores.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_397", "url": "https://docs.streamlit.io/deploy/concepts/secrets", "title": "Still have questions?", "page_title": "Managing secrets when deploying your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_396", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_398", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Quickstart", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Quickstart", "content": "Quickstart This is a concise set of steps to create your Streamlit Community Cloud account, deploy a sample app, and start editing it with GitHub Codespaces. For other options and complete explanations, start with Create your account. You will sign in to your GitHub account during this process. Community Cloud will use the email from your GitHub account to create your Community Cloud account. For other sign-in options, see Create your account.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_399", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Prerequisites", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - You must have a GitHub account.", "prev_chunk_id": "chunk_398", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_400", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Sign up for Streamlit Community Cloud", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Sign up for Streamlit Community Cloud", "content": "Sign up for Streamlit Community Cloud - Go toshare.streamlit.io. - Click \"Continue to sign-in.\" - Click \"Continue with GitHub.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Fill in your account information, and click \"I accept\" at the bottom.", "prev_chunk_id": "chunk_399", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_401", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Add access to your public repositories", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Add access to your public repositories", "content": "Add access to your public repositories - In the upper-left corner, click \"Workspaceswarning.\" - From the drop down, click \"Connect GitHub account.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_400", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_402", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Optional: Add access to private repositories", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Optional: Add access to private repositories", "content": "Optional: Add access to private repositories - In the upper-left corner, click on your GitHub username. - From the drop down, click \"Settings.\" - On the left side of the dialog, select \"Linked accounts.\" - Under \"Source control,\" click \"Connect herearrow_forward.\" - Click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_401", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_403", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Create a new app from a template", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Create a new app from a template", "content": "Create a new app from a template - In the upper-right corner, click \"Create app.\" - When asked \"Do you already have an app?\" click \"Nope, create one from a template.\" - From the list of templates on the left, select \"Blank app.\" - At the bottom, select the option to \"Open GitHub Codespaces...\" - At the bottom, click \"Deploy.\"", "prev_chunk_id": "chunk_402", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_404", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Edit your app in GitHub Codespaces", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Edit your app in GitHub Codespaces", "content": "Edit your app in GitHub Codespaces - Wait for GitHub to set up your codespace.It can take several minutes to fully initialize your codespace. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file. - Go to the app's entrypoint file (streamlit_app.py) in the left pane, and change line 3 by adding \"Streamlit\" insidest.title.-st.title(\"🎈 My new app\") +st.title(\"🎈 My new Streamlit app\")Files are automatically saved in your codespace with each edit. - A moment after typing a change, your app on the right side will display a rerun prompt. Click \"Always rerun.\"If the rerun prompt disappears before you click it, you can hover over the overflow menu icon (more_vert) to bring it back. - Optional: Continue to make edits and observe the changes within seconds.", "prev_chunk_id": "chunk_403", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_405", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Publish your changes", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Publish your changes", "content": "Publish your changes - In the left navigation bar, click the source control icon. - In the source control sidebar on the left, enter a name for your commit. - Click \"checkCommit.\" - To stage and commit all your changes, in the confirmation dialog, click \"Yes.\" Your changes are committed locally in your codespace. - To push your commit to GitHub, in the source control sidebar on the left, click \"cached1arrow_upward.\" - To push commits to \"origin/main,\" in the confirmation dialog, click \"OK.\"Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app. - Optional: To see your updated, published app, return to the \"My apps\" section of your workspace atshare.streamlit.io, and click on your app.", "prev_chunk_id": "chunk_404", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_406", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Stop or delete your codespace", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Stop or delete your codespace", "content": "Stop or delete your codespace When you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done. - Go togithub.com/codespaces. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (more_horiz) for your codespace. - If you want to return to your work later, click \"Stop codespace.\" Otherwise, click \"Delete.\" - Congratulations! You just deployed an app to Streamlit Community Cloud. 🎉 Return to your workspace atshare.streamlit.io/anddeploy another Streamlit app.", "prev_chunk_id": "chunk_405", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_407", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart", "title": "Still have questions?", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_406", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_408", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "Use Streamlit in Snowflake to code in a secure environment Snowflake is a single, global platform that powers the Data Cloud. If you want to use a secure platform with role-based access control, this is the option for you! This page walks you through creating a trial Snowflake account and building a \"Hello world\" app. Your trial account comes with an account credit so you can try out the service without entering any payment information. All you need is an email address! Everything else happens in your 30-day trial account. - Go tosignup.snowflake.com. (This link will open in a new tab.) - Fill in your information, and click \"CONTINUE.\" - Select \"Standard\" for your Snowflake edition and \"Amazon Web Services\" for your cloud provider. - Choose the region nearest you, accept the terms, and click \"GET STARTED.\" - Answer a few questions to let us know more about yourself, or skip them. - A message will display: \"You're now signed up!\" Go to your email, and click on the activation link. (Within your link, note the subdomain. This is your Snowflake account identifier.https://<account_identifier>.snowflakecomputing.com) - Set your username and password. This will be an admin user account within your Snowflake account. Your Snowflake account can have multiple users within it. - If you are not signed in after setting your password, follow the instructions to enter your Snowflake account identifier, and then enter your username and password. If you've accidentally closed your browser, you can sign in atapp.snowflake.com. Congratulations! You have a trial Snowflake account. The displayed interface is called Snowsight. Snowsight provides a web-based, graphical user interface for your Snowflake account. The default page is \"Home,\" which provides popular quick actions to get started. You can access your \"Projects\" in the left navigation or at the bottom of your \"Home\"", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_409", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "page. \"Projects\" include worksheets, notebooks, Streamlit apps, and dashboards. Check out the Snowflake docs for a quick tour.) Warehouses provide compute resources for tasks and apps in your Snowflake account. Your trial account already has an XS warehouse which you can use. This is named \"COMPUTE_WH.\" However, if you want to use more compute resources, you can create another warehouse. - In the lower-left corner under your name, confirm that your current role is \"ACCOUNTADMIN.\" If it isn't, click your name, hover over \"Switch Role,\" and select \"ACCOUNTADMIN.\" - In the left navigation, select \"Admin\" → \"Warehouses.\" - In the upper-right corner, click the blue \"addWarehouse\" button. - Enter \"STREAMLIT_WH\" for the name and select a type and size. The default type and size are \"Standard\" and \"X-Small,\" respectively. Click \"Create Warehouse.\" Databases provide storage for data and apps in your Snowflake account. Your trial account comes with a shared database of sample data, but you must create a new database in your account to store your app files. - In the left navigation, select \"Data\" → \"Databases.\" - In the upper-right corner, click the blue \"addDatabase\" button. - Enter \"STREAMLIT_DB\" for the name, and click \"Create.\" Yay! You now have a new database to hold all your Streamlit apps. The databases in the above screenshot are as follows: - \"SNOWFLAKE:\" A built-in database that stores meta data for your account. - \"SNOWFLAKE_SAMPLE_DATA:\" A shared database with sample data. - \"STREAMLIT_DB:\" Your new database where you'll put your Streamlit files. - In the left navigation, select \"Projects\" → \"Streamlit.\" - In the upper-right corner, click the blue \"addStreamlit App\" button. - Enter your app details as follows:App title: \"Hello World\"App location: \"STREAMLIT_DB\" and \"PUBLIC\"App warehouse: \"COMPUTE_WH\" (default) or \"STREAMLIT_WH\" (if you created a new warehouse)If you can't select your database,", "prev_chunk_id": "chunk_408", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_410", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "refresh the page to ensure that the interface is displaying current information. - Click \"Create.\" (Note that the app will run with the rights of \"ACCOUNTADMIN\" for simplicity. You can curate your roles and permissions to choose who can create and access apps.)Your new app is prefilled with example code and opens in editing mode. The left panel shows your code. The right panel shows the resulting app. - Optional: Explore the example app. - In the left code editor, delete everything, and replace it with the following:import streamlit as st st.write(\"Hello World\")If you want to return to the sample code later, you can always make another app to edit the same example again. - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Hooray! You just wrote a Streamlit app.starTipIn the lower-left corner of the editing interface, you can click the splitscreen icons to toggle the visibility of your file navigation, code editor, and app preview. - Changest.writetost.title:import streamlit as st st.title(\"Hello World\") - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Your app now displays the larger title text. - Optional: Make more edits to your app. You must interact with your app or click the blue \"play_arrowRun\" button to display the changes. This is different from a local environment where you can save your changes to trigger a rerun. - To return to Snowsight, in the upper-left corner, click \"chevron_leftStreamlit Apps.\" When you want to view or edit your app again, you can return to it through Snowsight. If you are returning to the site, you can sign in at app.snowflake.com. - In the left navigation, select \"Projects\" → \"Streamlit.\" - In your list of apps, click \"Hello World.\"If you don't see", "prev_chunk_id": "chunk_409", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_411", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "your app, check that your role is set to \"ACCOUNTADMIN\" as described inOptional: Create a warehouse. - Your app will open in viewing mode. To edit your app, in the upper-right corner, click \"Edit.\" Read about our Basic concepts and try out more commands in your app. Or, create more apps in Snowflake! You can reuse your warehouse and database, so you don't need to repeat those steps. For more information about creating and managing Streamlit in Snowflake apps, check out the Snowflake docs.", "prev_chunk_id": "chunk_410", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_412", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Prerequisites", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites All you need is an email address! Everything else happens in your 30-day trial account.", "prev_chunk_id": "chunk_411", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_413", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Create an account", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create an account", "content": "Create an account - Go tosignup.snowflake.com. (This link will open in a new tab.) - Fill in your information, and click \"CONTINUE.\" - Select \"Standard\" for your Snowflake edition and \"Amazon Web Services\" for your cloud provider. - Choose the region nearest you, accept the terms, and click \"GET STARTED.\" - Answer a few questions to let us know more about yourself, or skip them. - A message will display: \"You're now signed up!\" Go to your email, and click on the activation link. (Within your link, note the subdomain. This is your Snowflake account identifier.https://<account_identifier>.snowflakecomputing.com) - Set your username and password. This will be an admin user account within your Snowflake account. Your Snowflake account can have multiple users within it. - If you are not signed in after setting your password, follow the instructions to enter your Snowflake account identifier, and then enter your username and password. If you've accidentally closed your browser, you can sign in atapp.snowflake.com. Congratulations! You have a trial Snowflake account. The displayed interface is called Snowsight. Snowsight provides a web-based, graphical user interface for your Snowflake account. The default page is \"Home,\" which provides popular quick actions to get started. You can access your \"Projects\" in the left navigation or at the bottom of your \"Home\" page. \"Projects\" include worksheets, notebooks, Streamlit apps, and dashboards. Check out the Snowflake docs for a quick tour.)", "prev_chunk_id": "chunk_412", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_414", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Optional: Create a warehouse", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Optional: Create a warehouse", "content": "Optional: Create a warehouse Warehouses provide compute resources for tasks and apps in your Snowflake account. Your trial account already has an XS warehouse which you can use. This is named \"COMPUTE_WH.\" However, if you want to use more compute resources, you can create another warehouse. - In the lower-left corner under your name, confirm that your current role is \"ACCOUNTADMIN.\" If it isn't, click your name, hover over \"Switch Role,\" and select \"ACCOUNTADMIN.\" - In the left navigation, select \"Admin\" → \"Warehouses.\" - In the upper-right corner, click the blue \"addWarehouse\" button. - Enter \"STREAMLIT_WH\" for the name and select a type and size. The default type and size are \"Standard\" and \"X-Small,\" respectively. Click \"Create Warehouse.\"", "prev_chunk_id": "chunk_413", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_415", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Create a database", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create a database", "content": "Create a database Databases provide storage for data and apps in your Snowflake account. Your trial account comes with a shared database of sample data, but you must create a new database in your account to store your app files. - In the left navigation, select \"Data\" → \"Databases.\" - In the upper-right corner, click the blue \"addDatabase\" button. - Enter \"STREAMLIT_DB\" for the name, and click \"Create.\" Yay! You now have a new database to hold all your Streamlit apps. The databases in the above screenshot are as follows: - \"SNOWFLAKE:\" A built-in database that stores meta data for your account. - \"SNOWFLAKE_SAMPLE_DATA:\" A shared database with sample data. - \"STREAMLIT_DB:\" Your new database where you'll put your Streamlit files.", "prev_chunk_id": "chunk_414", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_416", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Create a \"Hello World\" Streamlit app", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create a \"Hello World\" Streamlit app", "content": "Create a \"Hello World\" Streamlit app - In the left navigation, select \"Projects\" → \"Streamlit.\" - In the upper-right corner, click the blue \"addStreamlit App\" button. - Enter your app details as follows:App title: \"Hello World\"App location: \"STREAMLIT_DB\" and \"PUBLIC\"App warehouse: \"COMPUTE_WH\" (default) or \"STREAMLIT_WH\" (if you created a new warehouse)If you can't select your database, refresh the page to ensure that the interface is displaying current information. - Click \"Create.\" (Note that the app will run with the rights of \"ACCOUNTADMIN\" for simplicity. You can curate your roles and permissions to choose who can create and access apps.)Your new app is prefilled with example code and opens in editing mode. The left panel shows your code. The right panel shows the resulting app. - Optional: Explore the example app. - In the left code editor, delete everything, and replace it with the following:import streamlit as st st.write(\"Hello World\")If you want to return to the sample code later, you can always make another app to edit the same example again. - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Hooray! You just wrote a Streamlit app.starTipIn the lower-left corner of the editing interface, you can click the splitscreen icons to toggle the visibility of your file navigation, code editor, and app preview. - Changest.writetost.title:import streamlit as st st.title(\"Hello World\") - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Your app now displays the larger title text. - Optional: Make more edits to your app. You must interact with your app or click the blue \"play_arrowRun\" button to display the changes. This is different from a local environment where you can save your changes to trigger a rerun. - To return to Snowsight, in the", "prev_chunk_id": "chunk_415", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_417", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Create a \"Hello World\" Streamlit app", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create a \"Hello World\" Streamlit app", "content": "upper-left corner, click \"chevron_leftStreamlit Apps.\"", "prev_chunk_id": "chunk_416", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_418", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Return to your app", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Return to your app", "content": "Return to your app When you want to view or edit your app again, you can return to it through Snowsight. If you are returning to the site, you can sign in at app.snowflake.com. - In the left navigation, select \"Projects\" → \"Streamlit.\" - In your list of apps, click \"Hello World.\"If you don't see your app, check that your role is set to \"ACCOUNTADMIN\" as described inOptional: Create a warehouse. - Your app will open in viewing mode. To edit your app, in the upper-right corner, click \"Edit.\"", "prev_chunk_id": "chunk_417", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_419", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "What's next?", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "What's next?", "content": "What's next? Read about our Basic concepts and try out more commands in your app. Or, create more apps in Snowflake! You can reuse your warehouse and database, so you don't need to repeat those steps. For more information about creating and managing Streamlit in Snowflake apps, check out the Snowflake docs.", "prev_chunk_id": "chunk_418", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_420", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake?slug=deploy&slug=snowflake", "title": "Still have questions?", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_419", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_421", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Introduction", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction So you have an amazing app and you want to start sharing it with other people, what do you do? You have a few options. First, where do you want to run your Streamlit app, and how do you want to access it? - On your corporate network- Most corporate networks are closed to the outside world. You typically use a VPN to log onto your corporate network and access resources there. You could run your Streamlit app on a server in your corporate network for security reasons, to ensure that only folks internal to your company can access it. - On the cloud- If you'd like to access your Streamlit app from outside of a corporate network, or share your app with folks outside of your home network or laptop, you might choose this option. In this case, it'll depend on your hosting provider. We havecommunity-submitted guidesfrom Heroku, AWS, and other providers. Wherever you decide to deploy your app, you will first need to containerize it. This guide walks you through using Kubernetes to deploy your app. If you prefer Docker see Deploy Streamlit using Docker.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_422", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Prerequisites", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - Install Docker Engine - Install the gcloud CLI", "prev_chunk_id": "chunk_421", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_423", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Install Docker Engine", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Install Docker Engine", "content": "Install Docker Engine If you haven't already done so, install Docker on your server. Docker provides .deb and .rpm packages from many Linux distributions, including: - Debian - Ubuntu Verify that Docker Engine is installed correctly by running the hello-world Docker image:", "prev_chunk_id": "chunk_422", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_424", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Install the gcloud CLI", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Install the gcloud CLI", "content": "Install the gcloud CLI In this guide, we will orchestrate Docker containers with Kubernetes and host docker images on the Google Container Registry (GCR). As GCR is a Google-supported Docker registry, we need to register gcloud as the Docker credential helper. Follow the official documentation to Install the gcloud CLI and initialize it.", "prev_chunk_id": "chunk_423", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_425", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Create a Docker container", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Create a Docker container", "content": "Create a Docker container We need to create a docker container which contains all the dependencies and the application code. Below you can see the entrypoint, i.e. the command run when the container starts, and the Dockerfile definition.", "prev_chunk_id": "chunk_424", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_426", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Create an entrypoint script", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Create an entrypoint script", "content": "Create an entrypoint script Create a run.sh script containing the following:", "prev_chunk_id": "chunk_425", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_427", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Create a Dockerfile", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Create a Dockerfile", "content": "Create a Dockerfile Docker builds images by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Learn more in the Dockerfile reference. The docker build command builds an image from a Dockerfile. The docker run command first creates a container over the specified image, and then starts it using the specified command. Here's an example Dockerfile that you can add to the root of your directory.", "prev_chunk_id": "chunk_426", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_428", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Build a Docker image", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Build a Docker image", "content": "Build a Docker image Put the above files (run.sh and Dockerfile) in the same folder and build the docker image:", "prev_chunk_id": "chunk_427", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_429", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Upload the Docker image to a container registry", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Upload the Docker image to a container registry", "content": "Upload the Docker image to a container registry The next step is to upload the Docker image to a container registry. In this example, we will use the Google Container Registry (GCR). Start by enabling the Container Registry API. Sign in to Google Cloud and navigate to your project’s Container Registry and click Enable. We can now build the Docker image from the previous step and push it to our project’s GCR. Be sure to replace $GCP_PROJECT_ID in the docker push command with the name of your project:", "prev_chunk_id": "chunk_428", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_430", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Create a Kubernetes deployment", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Create a Kubernetes deployment", "content": "Create a Kubernetes deployment For this step you will need a: - Running Kubernetes service - Custom domain for which you can generate a TLS certificate - DNS service where you can configure your custom domain to point to the application IP As the image was uploaded to the container registry in the previous step, we can run it in Kubernetes using the below configurations.", "prev_chunk_id": "chunk_429", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_431", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Install and run Kubernetes", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Install and run Kubernetes", "content": "Install and run Kubernetes Make sure your Kubernetes client, kubectl, is installed and running on your machine.", "prev_chunk_id": "chunk_430", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_432", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Configure a Google OAuth Client and oauth2-proxy", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Configure a Google OAuth Client and oauth2-proxy", "content": "Configure a Google OAuth Client and oauth2-proxy For configuring the Google OAuth Client, please see Google Auth Provider. Configure oauth2-proxy to use the desired OAuth Provider Configuration and update the oath2-proxy config in the config map. The below configuration contains a ouath2-proxy sidecar container which handles the authentication with Google. You can learn more from the oauth2-proxy repository.", "prev_chunk_id": "chunk_431", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_433", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Create a Kubernetes configuration file", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Create a Kubernetes configuration file", "content": "Create a Kubernetes configuration file Create a YAML configuration file named k8s-streamlit.yaml: Now create the configuration from the file in Kubernetes with the kubectl create command:", "prev_chunk_id": "chunk_432", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_434", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Set up TLS support", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Set up TLS support", "content": "Set up TLS support Since you are using the Google authentication, you will need to set up TLS support. Find out how in TLS Configuration.", "prev_chunk_id": "chunk_433", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_435", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Verify the deployment", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Verify the deployment", "content": "Verify the deployment Once the deployment and the service are created, we need to wait a couple of minutes for the public IP address to become available. We can check when that is ready by running: After the public IP is assigned, you will need to configure in your DNS service an A record pointing to the above IP address.", "prev_chunk_id": "chunk_434", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_436", "url": "https://docs.streamlit.io/deploy/tutorials/kubernetes", "title": "Still have questions?", "page_title": "Deploy Streamlit using Kubernetes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_435", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_437", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Introduction", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction So you have an amazing app and you want to start sharing it with other people, what do you do? You have a few options. First, where do you want to run your Streamlit app, and how do you want to access it? - On your corporate network- Most corporate networks are closed to the outside world. You typically use a VPN to log onto your corporate network and access resources there. You could run your Streamlit app on a server in your corporate network for security reasons, to ensure that only folks internal to your company can access it. - On the cloud- If you'd like to access your Streamlit app from outside of a corporate network, or share your app with folks outside of your home network or laptop, you might choose this option. In this case, it'll depend on your hosting provider. We havecommunity-submitted guidesfrom Heroku, AWS, and other providers. Wherever you decide to deploy your app, you will first need to containerize it. This guide walks you through using Docker to deploy your app. If you prefer Kubernetes see Deploy Streamlit using Kubernetes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_438", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Prerequisites", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - Install Docker Engine - Check network port accessibility", "prev_chunk_id": "chunk_437", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_439", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Install Docker Engine", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Install Docker Engine", "content": "Install Docker Engine If you haven't already done so, install Docker on your server. Docker provides .deb and .rpm packages from many Linux distributions, including: - Debian - Ubuntu Verify that Docker Engine is installed correctly by running the hello-world Docker image:", "prev_chunk_id": "chunk_438", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_440", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Check network port accessibility", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Check network port accessibility", "content": "Check network port accessibility As you and your users are behind your corporate VPN, you need to make sure all of you can access a certain network port. Let's say port 8501, as it is the default port used by Streamlit. Contact your IT team and request access to port 8501 for you and your users.", "prev_chunk_id": "chunk_439", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_441", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Create a Dockerfile", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Create a Dockerfile", "content": "Create a Dockerfile Docker builds images by reading the instructions from a Dockerfile. A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Learn more in the Dockerfile reference. The docker build command builds an image from a Dockerfile. The docker run command first creates a container over the specified image, and then starts it using the specified command. Here's an example Dockerfile that you can add to the root of your directory. i.e. in /app/", "prev_chunk_id": "chunk_440", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_442", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Dockerfile walkthrough", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Dockerfile walkthrough", "content": "Dockerfile walkthrough Let’s walk through each line of the Dockerfile : - ADockerfilemust start with aFROMinstruction. It sets theBase Image(think OS) for the container:FROM python:3.9-slimDocker has a number of official Docker base images based on various Linux distributions. They also have base images that come with language-specific modules such asPython. Thepythonimages come in many flavors, each designed for a specific use case. Here, we use thepython:3.9-slimimage which is a lightweight image that comes with the latest version of Python 3.9.starTipYou can also use your own base image, provided the image you use contains asupported version of Pythonfor Streamlit. There is no one-size-fits-all approach to using any specific base image, nor is there an official Streamlit-specific base image. - TheWORKDIRinstruction sets the working directory for anyRUN,CMD,ENTRYPOINT,COPYandADDinstructions that follow it in theDockerfile. Let’s set it toapp/:WORKDIR /apppriority_highImportantAs mentioned inDevelopment flow, for Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. Your main script should live in a directory other than the root directory. If you try to run a Streamlit app from the root directory, Streamlit will throw aFileNotFoundError: [Errno 2] No such file or directoryerror. For more information, see GitHub issue#5239.If you are using Streamlit version 1.10.0 or higher, you must set theWORKDIRto a directory other than the root directory. For example, you can set theWORKDIRto/appas shown in the exampleDockerfileabove. - Installgitso that we can clone the app code from a remote repo:RUN apt-get update && apt-get install -y \\ build-essential \\ curl \\ software-properties-common \\ git \\ && rm -rf /var/lib/apt/lists/* - Clone your code that lives in a remote repo toWORKDIR:a. If your code is in a public repo:RUN git clone https://github.com/streamlit/streamlit-example.git .Once cloned, the directory ofWORKDIRwill look like the following:app/ - requirements.txt - streamlit_app.pywhererequirements.txtfile contains all yourPython dependencies. E.galtair pandas", "prev_chunk_id": "chunk_441", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_443", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Dockerfile walkthrough", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Dockerfile walkthrough", "content": "streamlitandstreamlit_app.pyis your main script. E.g.from collections import namedtuple import altair as alt import math import pandas as pd import streamlit as st \"\"\" # Welcome to Streamlit! Edit `/streamlit_app.py` to customize this app to your heart's desire :heart: If you have any questions, checkout our [documentation](https://docs.streamlit.io) and [community forums](https://discuss.streamlit.io). In the meantime, below is an example of what you can do with just a few lines of code: \"\"\" with st.echo(code_location='below'): total_points = st.slider(\"Number of points in spiral\", 1, 5000, 2000) num_turns = st.slider(\"Number of turns in spiral\", 1, 100, 9) Point = namedtuple('Point', 'x y') data = [] points_per_turn = total_points / num_turns for curr_point_num in range(total_points): curr_turn, i = divmod(curr_point_num, points_per_turn) angle = (curr_turn + 1) * 2 * math.pi * i / points_per_turn radius = curr_point_num / total_points x = radius * math.cos(angle) y = radius * math.sin(angle) data.append(Point(x, y)) st.altair_chart(alt.Chart(pd.DataFrame(data), height=500, width=500) .mark_circle(color='#0068c9', opacity=0.5) .encode(x='x:Q', y='y:Q'))b. If your code is in a private repo, please readUsing SSH to access private data in buildsand modify the Dockerfile accordingly -- to install an SSH client, download the public key forgithub.com, and clone your private repo. If you use an alternative VCS such as GitLab or Bitbucket, please consult the documentation for that VCS on how to copy your code to theWORKDIRof the Dockerfile.c. If your code lives in the same directory as the Dockerfile, copy all your app files from your server into the container, includingstreamlit_app.py,requirements.txt, etc, by replacing thegit cloneline with:COPY . .More generally, the idea is copy your app code from wherever it may live on your server into the container. If the code is not in the same directory as the Dockerfile, modify the above command to include the path to the code. - Install your app’sPython dependenciesfrom the clonedrequirements.txtin the container:RUN pip3 install -r", "prev_chunk_id": "chunk_442", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_444", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Dockerfile walkthrough", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Dockerfile walkthrough", "content": "requirements.txt - TheEXPOSEinstruction informs Docker that the container listens on the specified network ports at runtime. Your container needs to listen to Streamlit’s (default) port 8501:EXPOSE 8501 - TheHEALTHCHECKinstruction tells Docker how to test a container to check that it is still working. Your container needs to listen to Streamlit’s (default) port 8501:HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health - AnENTRYPOINTallows you to configure a container that will run as an executable. Here, it also contains the entirestreamlit runcommand for your app, so you don’t have to call it from the command line:ENTRYPOINT [\"streamlit\", \"run\", \"streamlit_app.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]", "prev_chunk_id": "chunk_443", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_445", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Build a Docker image", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Build a Docker image", "content": "Build a Docker image The docker build command builds an image from a Dockerfile . Run the following command from the app/ directory on your server to build the image: The -t flag is used to tag the image. Here, we have tagged the image streamlit. If you run: You should see a streamlit image under the REPOSITORY column. For example:", "prev_chunk_id": "chunk_444", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_446", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Run the Docker container", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Run the Docker container", "content": "Run the Docker container Now that you have built the image, you can run the container by executing: The -p flag publishes the container’s port 8501 to your server’s 8501 port. If all went well, you should see an output similar to the following: To view your app, users can browse to http://0.0.0.0:8501 or http://localhost:8501", "prev_chunk_id": "chunk_445", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_447", "url": "https://docs.streamlit.io/deploy/tutorials/docker", "title": "Still have questions?", "page_title": "Deploy Streamlit using Docker - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_446", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_448", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.experimental_set_query_params", "title": "Still have questions?", "page_title": "st.experimental_set_query_params - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_449", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.experimental_get_query_params", "title": "Still have questions?", "page_title": "st.experimental_get_query_params - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_450", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app", "title": "Edit your app", "page_title": "Edit your app - Streamlit Docs", "breadcrumbs": "Edit your app", "content": "Edit your app You can edit your app from any development environment of your choice. Streamlit Community Cloud will monitor your repository and automatically copy any file changes you commit. You will immediately see commits reflected in your deployed app for most changes (such as edits to your app's Python files). Community Cloud also makes it easy to skip the work of setting up a development environment. With a few simple clicks, you can configure a development environment using GitHub Codespaces.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_451", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app", "title": "Edit your app with GitHub Codespaces", "page_title": "Edit your app - Streamlit Docs", "breadcrumbs": "Edit your app with GitHub Codespaces", "content": "Edit your app with GitHub Codespaces Spin up a cloud-based development environment for your deployed app in minutes. You can run your app within your codespace to enjoy experimenting in a safe, sandboxed environment. When you are done editing your code, you can commit your changes to your repo or just leave them in your codespace to return to later.", "prev_chunk_id": "chunk_450", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_452", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app", "title": "Create a codespace for your deployed app", "page_title": "Edit your app - Streamlit Docs", "breadcrumbs": "Create a codespace for your deployed app", "content": "Create a codespace for your deployed app - From your workspace atshare.streamlit.io, click the overflow icon (more_vert) next to your app. Click \"Edit with Codespaces.\"Community Cloud will add a.devcontainer/devcontainer.jsonfile to your repository. If you already have a file of the same name in your repository, it will not be changed. If you want your repository to receive the instance created by Community Cloud, delete or rename your existing devcontainer configuration. - Wait for GitHub to set up your codespace.It can take several minutes to fully initialize your codespace. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file. - Optional: For more room to work, open the app preview in another tab.If you have multiple monitors and want a little more room to work, open your app preview in another tab instead of using the Simple Browser within Visual Studio Code. Just copy the URL from the Simple Browser into another tab, and then close the Simple Browser. Now you have more room to edit your code. The remaining steps on this page will continue to display the split-screen view in Visual Studio Code. - Make a change to your app.When you make changes to your app, the file is automatically saved within your codespace. Your edits do not affect your repository or deployed app until you commit those changes, which is explained in a later step. The app preview shown on the right is local to your codespace. - In order to see updates automatically reflected on the right,", "prev_chunk_id": "chunk_451", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_453", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app", "title": "Create a codespace for your deployed app", "page_title": "Edit your app - Streamlit Docs", "breadcrumbs": "Create a codespace for your deployed app", "content": "click \"Always rerun\" when prompted after your first edit.Alternatively, you can click \"Rerun\" to avoid unnecessary reruns while writing code. Because your code is continually saved, automatically rerunning the app will raises errors when you pause partway through a line of code. Regardless of which you choose, you can change the setting through the app chrome. Just click the overflow icon (more_vert) in the upper-right corner of your preview app, click \"Settings,\" and then toggle \"Run on save.\" - Continue to edit your app. Your codespace will continue to automatically save your files as you work with them, and the preview will continue to update as the app reruns.", "prev_chunk_id": "chunk_452", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_454", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app", "title": "Optional: Publish your changes", "page_title": "Edit your app - Streamlit Docs", "breadcrumbs": "Optional: Publish your changes", "content": "Optional: Publish your changes After making edits to your app, you can choose to commit your edits to your repository to update your deployed app instantly. If you just want to keep your edits in your codespace to return to later, skip to Stop or delete your codespace. - In the left navigation bar, click the source control icon. - In the source control sidebar on the left, enter a name for your commit. - Click \"checkCommit.\" - To stage and commit all your changes, in the confirmation dialog, click \"Yes.\" Your changes are committed locally in your codespace. - To push your commit to GitHub, in the source control sidebar on the left, click \"cached1arrow_upward.\" - To push commits to \"origin/main,\" in the confirmation dialog, click \"OK.\"Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app. - Optional: To see your updated, published app, return to the \"My apps\" section of your workspace atshare.streamlit.io, and click on your app.", "prev_chunk_id": "chunk_453", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_455", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app", "title": "Stop or delete your codespace", "page_title": "Edit your app - Streamlit Docs", "breadcrumbs": "Stop or delete your codespace", "content": "Stop or delete your codespace When you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done. - Go togithub.com/codespaces. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (more_horiz) for your codespace. - Click \"Stop codespace\" if you'd like to return to your work later. Otherwise, click \"Delete.\" - Congratulations! You just deployed an app to Community Cloud. 🎉 Head back to your workspace atshare.streamlit.io/anddeploy another Streamlit app.", "prev_chunk_id": "chunk_454", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_456", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/edit-your-app", "title": "Still have questions?", "page_title": "Edit your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_455", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_457", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Community Cloud Status", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Community Cloud Status", "content": "Community Cloud Status You can view the current status of Community Cloud at streamlitstatus.com.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_458", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "GitHub OAuth scope", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "GitHub OAuth scope", "content": "GitHub OAuth scope To deploy your app, Streamlit requires access to your app's source code in GitHub and the ability to manage the public keys associated with your repositories. The default GitHub OAuth scopes are sufficient to work with apps in public GitHub repositories. However, to access your private repositories, we create a read-only GitHub Deploy Key and then access your repo using an SSH key. When we create this key, GitHub notifies repo admins of the creation as a security measure. Streamlit requires the additional repo OAuth scope from GitHub to work with your private repos and manage deploy keys. We recognize that the repo scope provides Streamlit with extra permissions that we do not really need and which, as people who prize security, we'd rather not even be granted. This was the permission model available from GitHub when Community Cloud was created. However, we are working on adopting the new GitHub permission model to reduce uneeded permissions.", "prev_chunk_id": "chunk_457", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_459", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Developer permissions", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Developer permissions", "content": "Developer permissions Because of the OAuth limitations noted above, a developer must have administrative permissions to a repository to deploy apps from it.", "prev_chunk_id": "chunk_458", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_460", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Repository file structure", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Repository file structure", "content": "Repository file structure You can deploy multiple apps from your repository, and your entrypoint file(s) may be anywhere in your directory structure. However, Community Cloud initializes all apps from the root of your repository, even if the entrypoint file is in a subdirectory. This has the following consequences: - Community Cloud only recognizes one.streamlit/configuration.tomlfile at the root (of each branch) of your repository. - You must declare image, video, and audio file paths for Streamlit commands relative to the root of your repository. For example,st.image,st.logo, and thepage_iconparameter inst.set_page_configexpect file locations relative to your working directory (i.e. where you executestreamlit run).", "prev_chunk_id": "chunk_459", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_461", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Linux environments", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Linux environments", "content": "Linux environments Community Cloud is built on Debian Linux. - Community Cloud uses Debian 11 (\"bullseye\"). To browse available packages that can be installed, see thepackage list. - All file paths must use forward-slash path separators.", "prev_chunk_id": "chunk_460", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_462", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Python environments", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Python environments", "content": "Python environments - You cannot mix and match Python package managers for a single app. Community Cloud configures your app's Python environment based on the first environment configuration file it finds. For more information, seeOther Python package managers. - We recommend that you use the latest version of Streamlit to ensure full Community Cloud functionality. Be sure to take note of Streamlit'scurrent requirementsfor package compatibility when planning your environment, especiallyprotobuf>=3.20,<6. - If you pinstreamlit< 1.20.0, you must also pinaltair<5. Earlier versions of Streamlit did not correctly restrict Altair's version. A workaround script running on Community Cloud will forcibly installaltair<5if a newer version is detected. This could unintentionally upgrade Altair's dependencies in violation of your environment configuration. Newer versions of Streamlit support Altair version 5. - Community Cloud only supports released versions of Python that are still receiving security updates. You may not use end-of-life, prerelease, or feature versions of Python. For more information, seeStatus of Python versions.", "prev_chunk_id": "chunk_461", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_463", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Configuration", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Configuration", "content": "Configuration The following configuration options are set within Community Cloud and will override any contrary setting in your config.toml file:", "prev_chunk_id": "chunk_462", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_464", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "IP addresses", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "IP addresses", "content": "IP addresses If you need to whitelist IP addresses for a connection, Community Cloud is currently served from the following IP addresses:", "prev_chunk_id": "chunk_463", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_465", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Other limitations", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Other limitations", "content": "Other limitations - When you print something to the Cloud logs, you may need to do asys.stdout.flush()before it shows up. - Community Cloud hosts all apps in the United States. This is currently not configurable. - Community Cloud rate limits app updates from GitHub to no more than five per minute.", "prev_chunk_id": "chunk_464", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_466", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/status", "title": "Still have questions?", "page_title": "Status and limitations - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_465", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_467", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account", "title": "Manage your account", "page_title": "Manage your account - Streamlit Docs", "breadcrumbs": "Manage your account", "content": "Manage your account You can Update your email or completely Delete your account through Workspace settings. Your Streamlit Community Cloud account is identified by your email. When you sign in to Community Cloud, regardless of which method you use, you are providing Community Cloud with your email address. In particular, when you sign in to Community Cloud using GitHub, you are using the primary email on your GitHub account. You can view your email identity and source-control identity from your workspace settings, under \"Linked accounts.\"", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_468", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account", "title": "Access your workspace settings", "page_title": "Manage your account - Streamlit Docs", "breadcrumbs": "Access your workspace settings", "content": "Access your workspace settings - Sign in toshare.streamlit.io. - In the upper-left corner, click on your workspace name. - In the drop-down menu, click \"Settings.\"", "prev_chunk_id": "chunk_467", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_469", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account", "title": "Still have questions?", "page_title": "Manage your account - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_468", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_470", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Share your app", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Share your app", "content": "Share your app Now that your app is deployed you can easily share it and collaborate on it. But first, let's take a moment and do a little joy dance for getting that app deployed! 🕺💃 Your app is now live at a fixed URL, so go wild and share it with whomever you want. Your app will inherit permissions from your GitHub repo, meaning that if your repo is private your app will be private and if your repo is public your app will be public. If you want to change that you can simply do so from the app settings menu. You are only allowed one private app at a time. If you've deployed from a private repository, you will have to make that app public or delete it before you can deploy another app from a private repository. Only developers can change your app between public and private. - Make your app public or private - Share your public app - Share your private app", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_471", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Make your app public or private", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Make your app public or private", "content": "Make your app public or private If you deployed your app from a public repository, your app will be public by default. If you deployed your app from a private repository, you will need to make the app public if you want to freely share it with the community at large.", "prev_chunk_id": "chunk_470", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_472", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Set privacy from your app settings", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Set privacy from your app settings", "content": "Set privacy from your app settings - Access yourApp settingsand go to the \"Sharing\" section. - Set your app's privacy under \"Who can view this app.\" Select \"This app is public and searchable\" to make your app public. Select \"Only specific people can view this app\" to make your app private.", "prev_chunk_id": "chunk_471", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_473", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Set privacy from the share button", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Set privacy from the share button", "content": "Set privacy from the share button - From your app at<your-custom-subdomain>.streamlit.app, click \"Share\" in the upper-right corner. - Toggle your app between public and private by clicking \"Make this app public.\"", "prev_chunk_id": "chunk_472", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_474", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Share your public app", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Share your public app", "content": "Share your public app Once your app is public, just give anyone your app's URL and they view it! Streamlit Community Cloud has several convenient shortcuts for sharing your app.", "prev_chunk_id": "chunk_473", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_475", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Share your app on social media", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Share your app on social media", "content": "Share your app on social media - From your app at<your-custom-subdomain>.streamlit.app, click \"Share\" in the upper-right corner. - Click \"Social\" to access convenient social media share buttons.", "prev_chunk_id": "chunk_474", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_476", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Invite viewers by email", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Invite viewers by email", "content": "Invite viewers by email Whether your app is public or private, you can send an email invite to your app directly from Streamlit Community Cloud. This grants the viewer access to analytics for all your public apps and the ability to invite other viewers to your workspace. Developers and invited viewers are identified by their email in analytics instead of appearing anonymously (if they view any of your apps while signed in). Read more about viewers in App analytics. - From your app at<your-custom-subdomain>.streamlit.app, click \"Share\" in the upper-right corner. - Enter an email address and click \"Invite.\" - Invited users will get a direct link to your app in their inbox.", "prev_chunk_id": "chunk_475", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_477", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Copy your app's URL", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Copy your app's URL", "content": "Copy your app's URL From your app click \"Share\" in the upper-right corner then click \"Copy link.\"", "prev_chunk_id": "chunk_476", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_478", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Add a badge to your GitHub repository", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Add a badge to your GitHub repository", "content": "Add a badge to your GitHub repository To help others find and play with your Streamlit app, you can add Streamlit's GitHub badge to your repo. Below is an enlarged example of what the badge looks like. Clicking on the badge takes you to—in this case—Streamlit's Roadmap. Once you deploy your app, you can embed this badge right into your GitHub README.md by adding the following Markdown:", "prev_chunk_id": "chunk_477", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_479", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Share your private app", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Share your private app", "content": "Share your private app By default an app deployed from a private repository will be private to the developers in the workspace. A private app will not be visible to anyone else unless you grant them explicit permission. You can grant permission by adding them as a developer on GitHub or by adding them as a viewer on Streamlit Community Cloud. Once you have added someone's email address to your app's viewer list, that person will be able to sign in and view your private app. If their email is associated with a Google account, they will be able to sign in with Google OAuth. Otherwise, they will be able to sign in with single-use, emailed links. Streamlit sends an email invitation with a link to your app every time you invite someone. - From your app at<your-custom-subdomain>.streamlit.app, click \"Share\" in the upper-right corner. - Enter the email to send an invitation to and click \"Invite.\" - Invited users appear in the list below. - Invited users will get a direct link to your app in their inbox. - To remove a viewer, simply access the share menu as above and click theclosenext to their name. - Access yourApp settingsand go to the \"Sharing\" section. - Add or remove users from the list of viewers. Click \"Save.\"", "prev_chunk_id": "chunk_478", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_480", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Invite viewers from the share button", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Invite viewers from the share button", "content": "Invite viewers from the share button - From your app at<your-custom-subdomain>.streamlit.app, click \"Share\" in the upper-right corner. - Enter the email to send an invitation to and click \"Invite.\" - Invited users appear in the list below. - Invited users will get a direct link to your app in their inbox. - To remove a viewer, simply access the share menu as above and click theclosenext to their name.", "prev_chunk_id": "chunk_479", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_481", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Invite viewers from your app settings", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Invite viewers from your app settings", "content": "Invite viewers from your app settings - Access yourApp settingsand go to the \"Sharing\" section. - Add or remove users from the list of viewers. Click \"Save.\"", "prev_chunk_id": "chunk_480", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_482", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app", "title": "Still have questions?", "page_title": "Share your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_481", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_483", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Caching overview", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Caching overview", "content": "Caching overview Streamlit runs your script from top to bottom at every user interaction or code change. This execution model makes development super easy. But it comes with two major challenges: - Long-running functions run again and again, which slows down your app. - Objects get recreated again and again, which makes it hard to persist them across reruns or sessions. But don't worry! Streamlit lets you tackle both issues with its built-in caching mechanism. Caching stores the results of slow function calls, so they only need to run once. This makes your app much faster and helps with persisting objects across reruns. Cached values are available to all users of your app. If you need to save results that should only be accessible within a session, use Session State instead.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_484", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Minimal example", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Minimal example", "content": "Minimal example To cache a function in Streamlit, you must decorate it with one of two decorators (st.cache_data or st.cache_resource): In this example, decorating long_running_function with @st.cache_data tells Streamlit that whenever the function is called, it checks two things: - The values of the input parameters (in this case,param1andparam2). - The code inside the function. If this is the first time Streamlit sees these parameter values and function code, it runs the function and stores the return value in a cache. The next time the function is called with the same parameters and code (e.g., when a user interacts with the app), Streamlit will skip executing the function altogether and return the cached value instead. During development, the cache updates automatically as the function code changes, ensuring that the latest changes are reflected in the cache. As mentioned, there are two caching decorators: - st.cache_datais the recommended way to cache computations that return data: loading a DataFrame from CSV, transforming a NumPy array, querying an API, or any other function that returns a serializable data object (str, int, float, DataFrame, array, list, …). It creates a new copy of the data at each function call, making it safe againstmutations and race conditions. The behavior ofst.cache_datais what you want in most cases – so if you're unsure, start withst.cache_dataand see if it works! - st.cache_resourceis the recommended way to cache global resources like ML models or database connections – unserializable objects that you don't want to load multiple times. Using it, you can share these resources across all reruns and sessions of an app without copying or duplication. Note that any mutations to the cached return value directly mutate the object in the cache (more details below).", "prev_chunk_id": "chunk_483", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_485", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "st.cache_data", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "st.cache_data", "content": "st.cache_data st.cache_data is your go-to command for all functions that return data – whether DataFrames, NumPy arrays, str, int, float, or other serializable types. It's the right command for almost all use cases! Within each user session, an @st.cache_data-decorated function returns a copy of the cached return value (if the value is already cached).", "prev_chunk_id": "chunk_484", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_486", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Usage", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Usage", "content": "Usage Let's look at an example of using st.cache_data. Suppose your app loads the Uber ride-sharing dataset – a CSV file of 50 MB – from the internet into a DataFrame: Running the load_data function takes 2 to 30 seconds, depending on your internet connection. (Tip: if you are on a slow connection, use this 5 MB dataset instead). Without caching, the download is rerun each time the app is loaded or with user interaction. Try it yourself by clicking the button we added! Not a great experience… 😕 Now let's add the @st.cache_data decorator on load_data: Run the app again. You'll notice that the slow download only happens on the first run. Every subsequent rerun should be almost instant! 💨", "prev_chunk_id": "chunk_485", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_487", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Behavior", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Behavior", "content": "Behavior How does this work? Let's go through the behavior of st.cache_data step by step: - On the first run, Streamlit recognizes that it has never called theload_datafunction with the specified parameter value (the URL of the CSV file) So it runs the function and downloads the data. - Now our caching mechanism becomes active: the returned DataFrame is serialized (converted to bytes) viapickleand stored in the cache (together with the value of theurlparameter). - On the next run, Streamlit checks the cache for an entry ofload_datawith the specificurl. There is one! So it retrieves the cached object, deserializes it to a DataFrame, and returns it instead of re-running the function and downloading the data again. This process of serializing and deserializing the cached object creates a copy of our original DataFrame. While this copying behavior may seem unnecessary, it's what we want when caching data objects since it effectively prevents mutation and concurrency issues. Read the section “Mutation and concurrency issues\" below to understand this in more detail.", "prev_chunk_id": "chunk_486", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_488", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Examples", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Examples", "content": "Examples DataFrame transformations In the example above, we already showed how to cache loading a DataFrame. It can also be useful to cache DataFrame transformations such as df.filter, df.apply, or df.sort_values. Especially with large DataFrames, these operations can be slow. Array computations Similarly, it can make sense to cache computations on NumPy arrays: Database queries You usually make SQL queries to load data into your app when working with databases. Repeatedly running these queries can be slow, cost money, and degrade the performance of your database. We strongly recommend caching any database queries in your app. See also our guides on connecting Streamlit to different databases for in-depth examples. API calls Similarly, it makes sense to cache API calls. Doing so also avoids rate limits. Running ML models (inference) Running complex machine learning models can use significant time and memory. To avoid rerunning the same computations over and over, use caching.", "prev_chunk_id": "chunk_487", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_489", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "st.cache_resource", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "st.cache_resource", "content": "st.cache_resource st.cache_resource is the right command to cache “resources\" that should be available globally across all users, sessions, and reruns. It has more limited use cases than st.cache_data, especially for caching database connections and ML models. Within each user session, an @st.cache_resource-decorated function returns the cached instance of the return value (if the value is already cached). Therefore, objects cached by st.cache_resource act like singletons and can mutate.", "prev_chunk_id": "chunk_488", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_490", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Usage", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Usage", "content": "Usage As an example for st.cache_resource, let's look at a typical machine learning app. As a first step, we need to load an ML model. We do this with Hugging Face's transformers library: If we put this code into a Streamlit app directly, the app will load the model at each rerun or user interaction. Repeatedly loading the model poses two problems: - Loading the model takes time and slows down the app. - Each session loads the model from scratch, which takes up a huge amount of memory. Instead, it would make much more sense to load the model once and use that same object across all users and sessions. That's exactly the use case for st.cache_resource! Let's add it to our app and process some text the user entered: If you run this app, you'll see that the app calls load_model only once – right when the app starts. Subsequent runs will reuse that same model stored in the cache, saving time and memory!", "prev_chunk_id": "chunk_489", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_491", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Behavior", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Behavior", "content": "Behavior Using st.cache_resource is very similar to using st.cache_data. But there are a few important differences in behavior: - st.cache_resourcedoesnotcreate a copy of the cached return value but instead stores the object itself in the cache. All mutations on the function's return value directly affect the object in the cache, so you must ensure that mutations from multiple sessions do not cause problems. In short, the return value must be thread-safe.priority_highWarningUsingst.cache_resourceon objects that are not thread-safe might lead to crashes or corrupted data. Learn more below underMutation and concurrency issues. - Not creating a copy means there's just one global instance of the cached return object, which saves memory, e.g. when using a large ML model. In computer science terms, we create asingleton. - Return values of functions do not need to be serializable. This behavior is great for types not serializable by nature, e.g., database connections, file handles, or threads. Caching these objects withst.cache_datais not possible.", "prev_chunk_id": "chunk_490", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_492", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Examples", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Examples", "content": "Examples Database connections st.cache_resource is useful for connecting to databases. Usually, you're creating a connection object that you want to reuse globally for every query. Creating a new connection object at each run would be inefficient and might lead to connection errors. That's exactly what st.cache_resource can do, e.g., for a Postgres database: Of course, you can do the same for any other database. Have a look at our guides on how to connect Streamlit to databases for in-depth examples. Loading ML models Your app should always cache ML models, so they are not loaded into memory again for every new session. See the example above for how this works with 🤗 Hugging Face models. You can do the same thing for PyTorch, TensorFlow, etc. Here's an example for PyTorch:", "prev_chunk_id": "chunk_491", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_493", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Deciding which caching decorator to use", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Deciding which caching decorator to use", "content": "Deciding which caching decorator to use The sections above showed many common examples for each caching decorator. But there are edge cases for which it's less trivial to decide which caching decorator to use. Eventually, it all comes down to the difference between “data\" and “resource\": - Data are serializable objects (objects that can be converted to bytes viapickle) that you could easily save to disk. Imagine all the types you would usually store in a database or on a file system – basic types like str, int, and float, but also arrays, DataFrames, images, or combinations of these types (lists, tuples, dicts, and so on). - Resources are unserializable objects that you usually would not save to disk or a database. They are often more complex, non-permanent objects like database connections, ML models, file handles, threads, etc. From the types listed above, it should be obvious that most objects in Python are “data.\" That's also why st.cache_data is the correct command for almost all use cases. st.cache_resource is a more exotic command that you should only use in specific situations. Or if you're lazy and don't want to think too much, look up your use case or return type in the table below 😉: Use case | Typical return types | Caching decorator Reading a CSV file with pd.read_csv | pandas.DataFrame | st.cache_data Reading a text file | str, list of str | st.cache_data Transforming pandas dataframes | pandas.DataFrame, pandas.Series | st.cache_data Computing with numpy arrays | numpy.ndarray | st.cache_data Simple computations with basic types | str, int, float, … | st.cache_data Querying a database | pandas.DataFrame | st.cache_data Querying an API | pandas.DataFrame, str, dict | st.cache_data Running an ML model (inference) | pandas.DataFrame, str, int, dict, list | st.cache_data Creating or processing images | PIL.Image.Image, numpy.ndarray |", "prev_chunk_id": "chunk_492", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_494", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Deciding which caching decorator to use", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Deciding which caching decorator to use", "content": "st.cache_data Creating charts | matplotlib.figure.Figure, plotly.graph_objects.Figure, altair.Chart | st.cache_data (but some libraries require st.cache_resource, since the chart object is not serializable – make sure not to mutate the chart after creation!) Lazy computations | polars.LazyFrame | st.cache_resource (but may be better to use st.cache_data on the collected results) Loading ML models | transformers.Pipeline, torch.nn.Module, tensorflow.keras.Model | st.cache_resource Initializing database connections | pyodbc.Connection, sqlalchemy.engine.base.Engine, psycopg2.connection, mysql.connector.MySQLConnection, sqlite3.Connection | st.cache_resource Opening persistent file handles | _io.TextIOWrapper | st.cache_resource Opening persistent threads | threading.thread | st.cache_resource", "prev_chunk_id": "chunk_493", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_495", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Controlling cache size and duration", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Controlling cache size and duration", "content": "Controlling cache size and duration If your app runs for a long time and constantly caches functions, you might run into two problems: - The app runs out of memory because the cache is too large. - Objects in the cache become stale, e.g. because you cached old data from a database. You can combat these problems with the ttl and max_entries parameters, which are available for both caching decorators. The ttl (time-to-live) parameter ttl sets a time to live on a cached function. If that time is up and you call the function again, the app will discard any old, cached values, and the function will be rerun. The newly computed value will then be stored in the cache. This behavior is useful for preventing stale data (problem 2) and the cache from growing too large (problem 1). Especially when pulling data from a database or API, you should always set a ttl so you are not using old data. Here's an example: The max_entries parameter max_entries sets the maximum number of entries in the cache. An upper bound on the number of cache entries is useful for limiting memory (problem 1), especially when caching large objects. The oldest entry will be removed when a new entry is added to a full cache. Here's an example:", "prev_chunk_id": "chunk_494", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_496", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Customizing the spinner", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Customizing the spinner", "content": "Customizing the spinner By default, Streamlit shows a small loading spinner in the app when a cached function is running. You can modify it easily with the show_spinner parameter, which is available for both caching decorators:", "prev_chunk_id": "chunk_495", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_497", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Excluding input parameters", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Excluding input parameters", "content": "Excluding input parameters In a cached function, all input parameters must be hashable. Let's quickly explain why and what it means. When the function is called, Streamlit looks at its parameter values to determine if it was cached before. Therefore, it needs a reliable way to compare the parameter values across function calls. Trivial for a string or int – but complex for arbitrary objects! Streamlit uses hashing to solve that. It converts the parameter to a stable key and stores that key. At the next function call, it hashes the parameter again and compares it with the stored hash key. Unfortunately, not all parameters are hashable! E.g., you might pass an unhashable database connection or ML model to your cached function. In this case, you can exclude input parameters from caching. Simply prepend the parameter name with an underscore (e.g., _param1), and it will not be used for caching. Even if it changes, Streamlit will return a cached result if all the other parameters match up. Here's an example: But what if you want to cache a function that takes an unhashable parameter? For example, you might want to cache a function that takes an ML model as input and returns the layer names of that model. Since the model is the only input parameter, you cannot exclude it from caching. In this case you can use the hash_funcs parameter to specify a custom hashing function for the model.", "prev_chunk_id": "chunk_496", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_498", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "The hash_funcs parameter", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "The hash_funcs parameter", "content": "The hash_funcs parameter As described above, Streamlit's caching decorators hash the input parameters and cached function's signature to determine whether the function has been run before and has a return value stored (\"cache hit\") or needs to be run (\"cache miss\"). Input parameters that are not hashable by Streamlit's hashing implementation can be ignored by prepending an underscore to their name. But there two rare cases where this is undesirable. i.e. where you want to hash the parameter that Streamlit is unable to hash: - When Streamlit's hashing mechanism fails to hash a parameter, resulting in aUnhashableParamErrorbeing raised. - When you want to override Streamlit's default hashing mechanism for a parameter. Let's discuss each of these cases in turn with examples.", "prev_chunk_id": "chunk_497", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_499", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Example 1: Hashing a custom class", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Example 1: Hashing a custom class", "content": "Example 1: Hashing a custom class Streamlit does not know how to hash custom classes. If you pass a custom class to a cached function, Streamlit will raise a UnhashableParamError. For example, let's define a custom class MyCustomClass that accepts an initial integer score. Let's also define a cached function multiply_score that multiplies the score by a multiplier: If you run this app, you'll see that Streamlit raises a UnhashableParamError since it does not know how to hash MyCustomClass: To fix this, we can use the hash_funcs parameter to tell Streamlit how to hash MyCustomClass. We do this by passing a dictionary to hash_funcs that maps the name of the parameter to a hash function. The choice of hash function is up to the developer. In this case, let's define a custom hash function hash_func that takes the custom class as input and returns the score. We want the score to be the unique identifier of the object, so we can use it to deterministically hash the object: Now if you run the app, you'll see that Streamlit no longer raises a UnhashableParamError and the app runs as expected. Let's now consider the case where multiply_score is an attribute of MyCustomClass and we want to hash the entire object: If you run this app, you'll see that Streamlit raises a UnhashableParamError since it cannot hash the argument 'self' (of type __main__.MyCustomClass) in 'multiply_score'. A simple fix here could be to use Python's hash() function to hash the object: Above, the hash function is defined as lambda x: hash(x.my_score). This creates a hash based on the my_score attribute of the MyCustomClass instance. As long as my_score remains the same, the hash remains the same. Thus, the result of multiply_score can be retrieved from the cache without recomputation. As an astute Pythonista,", "prev_chunk_id": "chunk_498", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_500", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Example 1: Hashing a custom class", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Example 1: Hashing a custom class", "content": "you may have been tempted to use Python's id() function to hash the object like so: If you run the app, you'll notice that Streamlit recomputes multiply_score each time even if my_score hasn't changed! Puzzled? In Python, id() returns the identity of an object, which is unique and constant for the object during its lifetime. This means that even if the my_score value is the same between two instances of MyCustomClass, id() will return different values for these two instances, leading to different hash values. As a result, Streamlit considers these two different instances as needing separate cached values, thus it recomputes the multiply_score each time even if my_score hasn't changed. This is why we discourage using it as hash func, and instead encourage functions that return deterministic, true hash values. That said, if you know what you're doing, you can use id() as a hash function. Just be aware of the consequences. For example, id is often the correct hash func when you're passing the result of an @st.cache_resource function as the input param to another cached function. There's a whole class of object types that aren’t otherwise hashable.", "prev_chunk_id": "chunk_499", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_501", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Example 2: Hashing a Pydantic model", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Example 2: Hashing a Pydantic model", "content": "Example 2: Hashing a Pydantic model Let's consider another example where we want to hash a Pydantic model: Above, we define a custom class Person using Pydantic's BaseModel with a single attribute name. We also define an identity function which accepts an instance of Person as an arg and returns it without modification. This function is intended to cache the result, therefore, if called multiple times with the same Person instance, it won't recompute but return the cached instance. If you run the app, however, you'll run into a UnhashableParamError: Cannot hash argument 'person' (of type __main__.Person) in 'identity'. error. This is because Streamlit does not know how to hash the Person class. To fix this, we can use the hash_funcs kwarg to tell Streamlit how to hash Person. In the version below, we define a custom hash function hash_func that takes the Person instance as input and returns the name attribute. We want the name to be the unique identifier of the object, so we can use it to deterministically hash the object:", "prev_chunk_id": "chunk_500", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_502", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Example 3: Hashing a ML model", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Example 3: Hashing a ML model", "content": "Example 3: Hashing a ML model There may be cases where you want to pass your favorite machine learning model to a cached function. For example, let's say you want to pass a TensorFlow model to a cached function, based on what model the user selects in the app. You might try something like this: In the above app, the user can select one of two models. Based on the selection, the app loads the corresponding model and passes it to load_layers. This function then returns the names of the layers in the model. If you run the app, you'll see that Streamlit raises a UnhashableParamError since it cannot hash the argument 'base_model' (of type keras.engine.functional.Functional) in 'load_layers'. If you disable hashing for base_model by prepending an underscore to its name, you'll observe that regardless of which base model is chosen, the layers displayed are same. This subtle bug is due to the fact that the load_layers function is not re-run when the base model changes. This is because Streamlit does not hash the base_model argument, so it does not know that the function needs to be re-run when the base model changes. To fix this, we can use the hash_funcs kwarg to tell Streamlit how to hash the base_model argument. In the version below, we define a custom hash function hash_func: Functional: lambda x: x.name. Our choice of hash func is informed by our knowledge that the name attribute of a Functional object or model uniquely identifies it. As long as the name attribute remains the same, the hash remains the same. Thus, the result of load_layers can be retrieved from the cache without recomputation. In the above case, we could also have used hash_funcs={Functional: id} as the hash function. This is because id is often the correct hash", "prev_chunk_id": "chunk_501", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_503", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Example 3: Hashing a ML model", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Example 3: Hashing a ML model", "content": "func when you're passing the result of an @st.cache_resource function as the input param to another cached function.", "prev_chunk_id": "chunk_502", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_504", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Example 4: Overriding Streamlit's default hashing mechanism", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Example 4: Overriding Streamlit's default hashing mechanism", "content": "Example 4: Overriding Streamlit's default hashing mechanism Let's consider another example where we want to override Streamlit's default hashing mechanism for a pytz-localized datetime object: It may be surprising to see that although now and now_tz are of the same <class 'datetime.datetime'> type, Streamlit does not how to hash now_tz and raises a UnhashableParamError. In this case, we can override Streamlit's default hashing mechanism for datetime objects by passing a custom hash function to the hash_funcs kwarg: Let's now consider a case where we want to override Streamlit's default hashing mechanism for NumPy arrays. While Streamlit natively hashes Pandas and NumPy objects, there may be cases where you want to override Streamlit's default hashing mechanism for these objects. For example, let's say we create a cache-decorated show_data function that accepts a NumPy array and returns it without modification. In the bellow app, data = df[\"str\"].unique() (which is a NumPy array) is passed to the show_data function. Since data is always the same, we expect the show_data function to return the cached value. However, if you run the app, and click the Re-run button, you'll notice that the show_data function is re-run each time. We can assume this behavior is a consequence of Streamlit's default hashing mechanism for NumPy arrays. To work around this, let's define a custom hash function hash_func that takes a NumPy array as input and returns a string representation of the array: Now if you run the app, and click the Re-run button, you'll notice that the show_data function is no longer re-run each time. It's important to note here that our choice of hash function was very naive and not necessarily the best choice. For example, if the NumPy array is large, converting it to a string representation may be expensive. In such cases, it is", "prev_chunk_id": "chunk_503", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_505", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Example 4: Overriding Streamlit's default hashing mechanism", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Example 4: Overriding Streamlit's default hashing mechanism", "content": "up to you as the developer to define what a good hash function is for your use case.", "prev_chunk_id": "chunk_504", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_506", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Static elements", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Static elements", "content": "Static elements Since version 1.16.0, cached functions can contain Streamlit commands! For example, you can do this: As we know, Streamlit only runs this function if it hasn't been cached before. On this first run, the st.success message will appear in the app. But what happens on subsequent runs? It still shows up! Streamlit realizes that there is an st. command inside the cached function, saves it during the first run, and replays it on subsequent runs. Replaying static elements works for both caching decorators. You can also use this functionality to cache entire parts of your UI:", "prev_chunk_id": "chunk_505", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_507", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Input widgets", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Input widgets", "content": "Input widgets You can also use interactive input widgets like st.slider or st.text_input in cached functions. Widget replay is an experimental feature at the moment. To enable it, you need to set the experimental_allow_widgets parameter: Streamlit treats the slider like an additional input parameter to the cached function. If you change the slider position, Streamlit will see if it has already cached the function for this slider value. If yes, it will return the cached value. If not, it will rerun the function using the new slider value. Using widgets in cached functions is extremely powerful because it lets you cache entire parts of your app. But it can be dangerous! Since Streamlit treats the widget value as an additional input parameter, it can easily lead to excessive memory usage. Imagine your cached function has five sliders and returns a 100 MB DataFrame. Then we'll add 100 MB to the cache for every permutation of these five slider values – even if the sliders do not influence the returned data! These additions can make your cache explode very quickly. Please be aware of this limitation if you use widgets in cached functions. We recommend using this feature only for isolated parts of your UI where the widgets directly influence the cached return value.", "prev_chunk_id": "chunk_506", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_508", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Dealing with large data", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Dealing with large data", "content": "Dealing with large data As we explained, you should cache data objects with st.cache_data. But this can be slow for extremely large data, e.g., DataFrames or arrays with >100 million rows. That's because of the copying behavior of st.cache_data: on the first run, it serializes the return value to bytes and deserializes it on subsequent runs. Both operations take time. If you're dealing with extremely large data, it can make sense to use st.cache_resource instead. It does not create a copy of the return value via serialization/deserialization and is almost instant. But watch out: any mutation to the function's return value (such as dropping a column from a DataFrame or setting a value in an array) directly manipulates the object in the cache. You must ensure this doesn't corrupt your data or lead to crashes. See the section on Mutation and concurrency issues below. When benchmarking st.cache_data on pandas DataFrames with four columns, we found that it becomes slow when going beyond 100 million rows. The table shows runtimes for both caching decorators at different numbers of rows (all with four columns): | | 10M rows | 50M rows | 100M rows | 200M rows st.cache_data | First run* | 0.4 s | 3 s | 14 s | 28 s | Subsequent runs | 0.2 s | 1 s | 2 s | 7 s st.cache_resource | First run* | 0.01 s | 0.1 s | 0.2 s | 1 s | Subsequent runs | 0 s | 0 s | 0 s | 0 s *For the first run, the table only shows the overhead time of using the caching decorator. It does not include the runtime of the cached function itself.", "prev_chunk_id": "chunk_507", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_509", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Mutation and concurrency issues", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Mutation and concurrency issues", "content": "Mutation and concurrency issues In the sections above, we talked a lot about issues when mutating return objects of cached functions. This topic is complicated! But it's central to understanding the behavior differences between st.cache_data and st.cache_resource. So let's dive in a bit deeper. First, we should clearly define what we mean by mutations and concurrency: - Bymutations, we mean any changes made to a cached function's return valueafterthat function has been called. I.e. something like this:@st.cache_data def create_list(): l = [1, 2, 3] l = create_list() # 👈 Call the function l[0] = 2 # 👈 Mutate its return value - Byconcurrency, we mean that multiple sessions can cause these mutations at the same time. Streamlit is a web framework that needs to handle many users and sessions connecting to an app. If two people view an app at the same time, they will both cause the Python script to rerun, which may manipulate cached return objects at the same time – concurrently. Mutating cached return objects can be dangerous. It can lead to exceptions in your app and even corrupt your data (which can be worse than a crashed app!). Below, we'll first explain the copying behavior of st.cache_data and show how it can avoid mutation issues. Then, we'll show how concurrent mutations can lead to data corruption and how to prevent it.", "prev_chunk_id": "chunk_508", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_510", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Copying behavior", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Copying behavior", "content": "Copying behavior st.cache_data creates a copy of the cached return value each time the function is called. This avoids most mutations and concurrency issues. To understand it in detail, let's go back to the Uber ridesharing example from the section on st.cache_data above. We are making two modifications to it: - We are usingst.cache_resourceinstead ofst.cache_data.st.cache_resourcedoesnotcreate a copy of the cached object, so we can see what happens without the copying behavior. - After loading the data, we manipulate the returned DataFrame (in place!) by dropping the column\"Lat\". Here's the code: Let's run it and see what happens! The first run should work fine. But in the second run, you see an exception: KeyError: \"['Lat'] not found in axis\". Why is that happening? Let's go step by step: - On the first run, Streamlit runsload_dataand stores the resulting DataFrame in the cache. Since we're usingst.cache_resource, it doesnotcreate a copy but stores the original DataFrame. - Then we drop the column\"Lat\"from the DataFrame. Note that this is dropping the column from theoriginalDataFrame stored in the cache. We are manipulating it! - On the second run, Streamlit returns that exact same manipulated DataFrame from the cache. It does not have the column\"Lat\"anymore! So our call todf.dropresults in an exception. Pandas cannot drop a column that doesn't exist. The copying behavior of st.cache_data prevents this kind of mutation error. Mutations can only affect a specific copy and not the underlying object in the cache. The next rerun will get its own, unmutated copy of the DataFrame. You can try it yourself, just replace st.cache_resource with st.cache_data above, and you'll see that everything works. Because of this copying behavior, st.cache_data is the recommended way to cache data transforms and computations – anything that returns a serializable object.", "prev_chunk_id": "chunk_509", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_511", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Concurrency issues", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Concurrency issues", "content": "Concurrency issues Now let's look at what can happen when multiple users concurrently mutate an object in the cache. Let's say you have a function that returns a list. Again, we are using st.cache_resource to cache it so that we are not creating a copy: Let's say user A runs the app. They will see the following output: Let's say another user, B, visits the app right after. In contrast to user A, they will see the following output: Now, user A reruns the app immediately after user B. They will see the following output: What is happening here? Why are all outputs different? - When user A visits the app,create_list()is called, and the list[1, 2, 3]is stored in the cache. This list is then returned to user A. The first value of the list,1, is assigned tofirst_list_value, andl[0]is changed to2. - When user B visits the app,create_list()returns the mutated list from the cache:[2, 2, 3]. The first value of the list,2, is assigned tofirst_list_valueandl[0]is changed to3. - When user A reruns the app,create_list()returns the mutated list again:[3, 2, 3]. The first value of the list,3, is assigned tofirst_list_value,andl[0]is changed to 4. If you think about it, this makes sense. Users A and B use the same list object (the one stored in the cache). And since the list object is mutated, user A's change to the list object is also reflected in user B's app. This is why you must be careful about mutating objects cached with st.cache_resource, especially when multiple users access the app concurrently. If we had used st.cache_data instead of st.cache_resource, the app would have copied the list object for each user, and the above example would have worked as expected – users A and B would have both seen:", "prev_chunk_id": "chunk_510", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_512", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Migrating from st.cache", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Migrating from st.cache", "content": "Migrating from st.cache We introduced the caching commands described above in Streamlit 1.18.0. Before that, we had one catch-all command st.cache. Using it was often confusing, resulted in weird exceptions, and was slow. That's why we replaced st.cache with the new commands in 1.18.0 (read more in this blog post). The new commands provide a more intuitive and efficient way to cache your data and resources and are intended to replace st.cache in all new development. If your app is still using st.cache, don't despair! Here are a few notes on migrating: - Streamlit will show a deprecation warning if your app usesst.cache. - We will not removest.cachesoon, so you don't need to worry about your 2-year-old app breaking. But we encourage you to try the new commands going forward – they will be way less annoying! - Switching code to the new commands should be easy in most cases. To decide whether to usest.cache_dataorst.cache_resource, readDeciding which caching decorator to use. Streamlit will also recognize common use cases and show hints right in the deprecation warnings. - Most parameters fromst.cacheare also present in the new commands, with a few exceptions:allow_output_mutationdoes not exist anymore. You can safely delete it. Just make sure you use the right caching command for your use case.suppress_st_warningdoes not exist anymore. You can safely delete it. Cached functions can now contain Streamlit commands and will replay them. If you want to use widgets inside cached functions, setexperimental_allow_widgets=True. SeeInput widgetsfor an example. If you have any questions or issues during the migration process, please contact us on the forum, and we will be happy to assist you. 🎈", "prev_chunk_id": "chunk_511", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_513", "url": "https://docs.streamlit.io/develop/concepts/architecture/caching", "title": "Still have questions?", "page_title": "Caching overview - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_512", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_514", "url": "https://docs.streamlit.io/develop/concepts/app-testing/cheat-sheet", "title": "Limitations", "page_title": "App testing cheat sheet - Streamlit Docs", "breadcrumbs": "Limitations", "content": "Limitations As of Streamlit 1.28, the following Streamlit features are not natively supported by AppTest. However, workarounds are possible for many of them by inspecting the underlying proto directly using AppTest.get(). We plan to regularly add support for missing elements until all features are supported. - Chart elements (st.bar_chart,st.line_chart, etc) - Media elements (st.image,st.video,st.audio) - st.file_uploader - st.data_editor - st.expander - st.status - st.camera_input - st.download_button - st.link_button", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_515", "url": "https://docs.streamlit.io/develop/concepts/app-testing/cheat-sheet", "title": "Still have questions?", "page_title": "App testing cheat sheet - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_514", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_516", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Customize fonts in your Streamlit app", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Customize fonts in your Streamlit app", "content": "Customize fonts in your Streamlit app Streamlit lets you change and customize the fonts in your app. You can load font files from a public URL or host them with your app using static file serving.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_517", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Default Streamlit fonts", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Default Streamlit fonts", "content": "Default Streamlit fonts Streamlit comes with Source Sans, Source Serif, and Source Code fonts. These font files are included with the Streamlit library so clients don't download them from a third party. By default, Streamlit uses Source Sans for all text except inline code and code blocks, which use Source Code instead. To use these default faults, you can set each of the following configuration options to \"sans-serif\" (Source Sans), \"serif\" (Source Serif), or \"monospace\" (Source Code) in config.toml: You can set the base font weight and size in the [theme] table in config.toml. These can't be configured separately in the sidebar. - theme.baseFontSizesets the root font size for your app. - theme.baseFontWeightsets the root font weight for your app. The following configuration options can be set separately for the sidebar by using the [theme.sidebar] table instead of the [theme] table in config.toml: - theme.fontsets the default font for all text in the app (except inline code and code blocks). This is\"sans-serif\"(Source Sans) by default. - theme.headingFontsets the default font for all headings in the app. If this is not set, Streamlit usestheme.fontinstead. - theme.headingFontSizessets the font sizes for<h1>-<h6>headings. - theme.headingFontWeightssets the font sizes for<h1>-<h6>headings. - theme.codeFontsets the default font for all inline code and code blocks. This is\"monospace\"(Source Code) by default. - theme.codeFontSizesets the size of code text in code blocks,st.json, andst.help(but not inline code). - theme.codeFontWeightsets the weight of code text in code blocks,st.json, andst.help(but not inline code). When fonts are not declared in [theme.sidebar], Streamlit will inherit each option from [theme] before defaulting to less specific options. For example, if theme.sidebar.headingFont is not set, Streamlit uses (in order of precedence) theme.headingFont, theme.sidebar.font, or theme.font instead. In the following config.toml example, Streamlit uses Source Serif in the main body of the app and Source Sans in the sidebar.", "prev_chunk_id": "chunk_516", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_518", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Loading alternative fonts", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Loading alternative fonts", "content": "Loading alternative fonts To use an alternative font in your app, you must declare the font in config.toml under [[theme.fontFaces]]. For multiple alternative fonts, declare multiple [[theme.fontFaces]] tables in your configuration file. You can self-host your font by using Streamlit static file serving, or you can point to a publicly hosted font file. Fonts are defined with the following attributes in their [[theme.fontFaces]] tables: - family: This is the name of the font and is used to identify the font for use by other configuration options. - url: This is the location of the font file. If you are self-hosting the font file with your app, the value will be similar to\"app/static/font_file.woff\". - weight(optional): This declares the weight of the font within the font file (e.g.,400,\"200 800\", or\"bold\"). For more information, see thefont-weightCSS@font-facedescriptor. - style(optional): This declares the style of the font within the font file (e.g.,\"normal\",\"italic\", or\"oblique\"). For more information, see thefont-styleCSS@font-facedescriptor. - unicodeRange(optional): This declares the specific range of characters within the font file (e.g.\"U+0025-00FF, U+4??\") For more information, see theunicode-rangeCSS `@font-face descriptor. The following example uses static file serving to host Google's Noto Sans and Noto Sans Mono fonts and configures the app to use them. Both of these fonts are defined with variable font files that include a parameterized weight. However, because font style is not parameterized, Noto Sans requires two files to define the normal and italic styles separately. Noto Sans Mono does not include a separate file for its italic style. Per CSS rules, if no italic style is explicitly provided, it will be simulated by skewing the normal-style font. A line-by-line explanation of this example is available in a tutorial. .streamlit/config.toml: Directory structure: In this configuration example, an alternative font is declared with multiple static font files. To cover basic Markdown formatting, each", "prev_chunk_id": "chunk_517", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_519", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Loading alternative fonts", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Loading alternative fonts", "content": "font should have at least four static files to define the following weight-style pairs: - normal normal - normal bold - italic normal - italic bold If your app uses a font without a matching weight-style definition, the user's browser will use the closest font that is available. The default weight for <h2>-<h6> headings is semibold (600). For completeness, include additional font files to cover the semibold weight and all the font weights in your app. The following example uses Tuffy font. The font has four static font files that cover the four weight-style pairs. A line-by-line explanation of this example is available in a tutorial. .streamlit/config.toml: Directory structure: If you don't want to download and host your font files with your app, you can point to externally hosted font files. If your files aren't hosted with your app, it's recommended to declare fallback fonts. In your configuration file, wherever you declare a default font, you can use a comma-separated list of fonts instead. The font (or comma-separated list of fonts) is passed to the CSS font-family property. You can always include one of Streamlit's default fonts as a final fallback. The following example uses Nunito font. The configuration file points to the Google-hosted font files and identifies Streamlit's built-in font as the backup. A line-by-line explanation of this example is available in a tutorial. .streamlit/config.toml:", "prev_chunk_id": "chunk_518", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_520", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Example 1: Define an alternative font with variable font files", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Example 1: Define an alternative font with variable font files", "content": "Example 1: Define an alternative font with variable font files The following example uses static file serving to host Google's Noto Sans and Noto Sans Mono fonts and configures the app to use them. Both of these fonts are defined with variable font files that include a parameterized weight. However, because font style is not parameterized, Noto Sans requires two files to define the normal and italic styles separately. Noto Sans Mono does not include a separate file for its italic style. Per CSS rules, if no italic style is explicitly provided, it will be simulated by skewing the normal-style font. A line-by-line explanation of this example is available in a tutorial. .streamlit/config.toml: Directory structure:", "prev_chunk_id": "chunk_519", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_521", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Example 2: Define an alternative font with static font files", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Example 2: Define an alternative font with static font files", "content": "Example 2: Define an alternative font with static font files In this configuration example, an alternative font is declared with multiple static font files. To cover basic Markdown formatting, each font should have at least four static files to define the following weight-style pairs: - normal normal - normal bold - italic normal - italic bold If your app uses a font without a matching weight-style definition, the user's browser will use the closest font that is available. The default weight for <h2>-<h6> headings is semibold (600). For completeness, include additional font files to cover the semibold weight and all the font weights in your app. The following example uses Tuffy font. The font has four static font files that cover the four weight-style pairs. A line-by-line explanation of this example is available in a tutorial. .streamlit/config.toml: Directory structure:", "prev_chunk_id": "chunk_520", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_522", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Example 3: Define an alternative font with fallbacks", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Example 3: Define an alternative font with fallbacks", "content": "Example 3: Define an alternative font with fallbacks If you don't want to download and host your font files with your app, you can point to externally hosted font files. If your files aren't hosted with your app, it's recommended to declare fallback fonts. In your configuration file, wherever you declare a default font, you can use a comma-separated list of fonts instead. The font (or comma-separated list of fonts) is passed to the CSS font-family property. You can always include one of Streamlit's default fonts as a final fallback. The following example uses Nunito font. The configuration file points to the Google-hosted font files and identifies Streamlit's built-in font as the backup. A line-by-line explanation of this example is available in a tutorial. .streamlit/config.toml:", "prev_chunk_id": "chunk_521", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_523", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Font size", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Font size", "content": "Font size You can set the base font size for your app in pixels. You must specify the base font size as an integer. The following configuration is equivalent to the default base font size of 16 pixels: Additionally, you can set the font size for code blocks. The font size can be declared in pixels or rem. The following configuration is equivalent to the default code font size of 0.875rem.", "prev_chunk_id": "chunk_522", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_524", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Font colors", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Font colors", "content": "Font colors Font color options are described in Customize colors and borders in your Streamlit app.", "prev_chunk_id": "chunk_523", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_525", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Design tips", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Design tips", "content": "Design tips When using alternative fonts in your Streamlit app, keep good design practices in mind. The legibility of a font is strongly influenced by its size, contrast with its background, and shape. Streamlit lets you declare a different font for your headers from the rest of your text. If you introduce a more elaborate font, limit it to your headers. Because theme.font and theme.sidebar.font are used to set the font in widget labels, tooltips, column headers, and dataframe cells, they should always be a highly readable font. For inspiration, see Fonts in Use.", "prev_chunk_id": "chunk_524", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_526", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-fonts", "title": "Still have questions?", "page_title": "Customize fonts - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_525", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_527", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Color values", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Color values", "content": "Color values For all configuration options that accept a color, you can specify the value with one of the following strings: - A CSS<named-color>like\"darkBlue\"or\"maroon\". - A HEX string like\"#483d8b\"or\"#6A5ACD\". - An RGB string like\"rgb(106, 90, 205)\"or\"RGB(70, 130, 180)\". - An HSL string like\"hsl(248, 53%, 58%)\"or\"HSL(147, 50%, 47%)\".", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_528", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Default Streamlit colors", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Default Streamlit colors", "content": "Default Streamlit colors Streamlit comes with two preconfigured themes: light and dark. If you don't specify any theme configuration options, Streamlit will attempt to use the preconfigured theme that best matches each user's browser settings.", "prev_chunk_id": "chunk_527", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_529", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Color and border configuration options", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Color and border configuration options", "content": "Color and border configuration options Most theme configuration options can be set for your whole app, but you can override some with a different value for the sidebar. For example, your app's primary color (primaryColor) is used to highlight interactive elements and show focus. If you set theme.primaryColor, this will change the primary color for your whole app. However, if you set theme.sidebar.primaryColor, this will override theme.primaryColor in the sidebar, allowing you to use two different primary colors. The following two configuration options can only be applied to the whole app: - theme.basesets the default colors for your app's theme to match one of Streamlit's two default themes (\"light\"or\"dark\"). If any theme configuation option is used andtheme.baseis not set, then Streamlit will use\"light\". - theme.showSidebarBordersets the visibility of the border between the sidebar and the main body of your app. - theme.chartCategoricalColorsandtheme.chartSequentialColorsset the series colors for Plotly, Altair, and Vega-Lite charts. The following configuration options can be set separately for the sidebar by using the [theme.sidebar] table instead of the [theme] table in config.toml: - theme.primaryColor - theme.backgroundColor - theme.secondaryBackgroundColor - theme.textColor - theme.linkColor - theme.linkUnderline - theme.codeBackgroundColor - theme.baseRadius - theme.buttonRadius - theme.borderColor - theme.dataframeBorderColor - theme.dataframeHeaderBackgroundColor - theme.showWidgetBorder For brevity, on the rest of this page, theming configuration options will not include the theme. or theme.sidebar. prefix.", "prev_chunk_id": "chunk_528", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_530", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "primaryColor", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "primaryColor", "content": "primaryColor primaryColor defines the accent color most often used throughout your Streamlit app. The following features and effects use your primary color: - Button hover effects - Elements in focus - Selected elements The following configuration example has a \"forestGreen\" primary color. In the sidebar, the configuration overrides the primary color to \"darkGoldenrod\". If you click inside a widget to give it focus, Streamlit displays a primary-color border around the widget. Additionally, if you hover over the secondary and tertiary buttons, the hover color matches the primary color.", "prev_chunk_id": "chunk_529", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_531", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Example 1: Primary color", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Example 1: Primary color", "content": "Example 1: Primary color The following configuration example has a \"forestGreen\" primary color. In the sidebar, the configuration overrides the primary color to \"darkGoldenrod\". If you click inside a widget to give it focus, Streamlit displays a primary-color border around the widget. Additionally, if you hover over the secondary and tertiary buttons, the hover color matches the primary color.", "prev_chunk_id": "chunk_530", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_532", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "backgroundColor, secondaryBackgroundColor, codeBackgroundColor, and dataframeHeaderBackgroundColor", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "backgroundColor, secondaryBackgroundColor, codeBackgroundColor, and dataframeHeaderBackgroundColor", "content": "backgroundColor, secondaryBackgroundColor, codeBackgroundColor, and dataframeHeaderBackgroundColor - backgroundColordefines the background color of your app. - secondaryBackgroundColoris used for contrast in the following places:The background of input or selection regions for widgetsHeaders within elements likest.helpandst.dataframe(ifdataframeHeaderBackgroundColorisn't set)Code blocks and inline code (ifcodeBackgroundColorisn't set) - codeBackgroundColorsets the background for code blocks and line code. IfcodeBackgroundColoris not set, Streamlit usessecondaryBackgroundColorinstead. - dataframeHeaderBackgroundColorsets the background for dataframe headers (including the cells used for row selection and addition, if present). The following configuration example has a \"white\" background, with a lavender-tinted \"ghostWhite\" sidebar background. The secondary color for the whole app is \"lavender\" and the code background color is \"powderBlue\". The code background color is configured once in [theme] and inherited in the sidebar. However, because Streamlit swaps background colors when the sidebar inherits them, the secondary background color is set in both [theme] and [theme.sidebar]. To see the secondary color used for a hover effect, hover over a dataframe cell or open the multiselect drop-down menu.", "prev_chunk_id": "chunk_531", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_533", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Example 2: Background colors", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Example 2: Background colors", "content": "Example 2: Background colors The following configuration example has a \"white\" background, with a lavender-tinted \"ghostWhite\" sidebar background. The secondary color for the whole app is \"lavender\" and the code background color is \"powderBlue\". The code background color is configured once in [theme] and inherited in the sidebar. However, because Streamlit swaps background colors when the sidebar inherits them, the secondary background color is set in both [theme] and [theme.sidebar]. To see the secondary color used for a hover effect, hover over a dataframe cell or open the multiselect drop-down menu.", "prev_chunk_id": "chunk_532", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_534", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "textColor, linkColor, and linkUnderline", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "textColor, linkColor, and linkUnderline", "content": "textColor, linkColor, and linkUnderline You can configure the color of body text and links. textColor sets the default text color for all text in the app except language-highlighting in code blocks, inline code, and links. linkColor sets the default font color for all Markdown links in the app. If linkUnderline is set to true (default), the link underline color matches linkColor. The following elements are impacted by textColor: - Markdown text, except links - Text in code blocks that's not colored otherwise from language highlighting - App-chrome and sidebar menu icons - Widget labels, icons, option text, and placeholder text - Dataframe and table text - Non-Markdown links, likest.page_link,st.link_button, and the navigation menu As noted previously, Streamlit changes the text color to white when text is displayed against your primary color.", "prev_chunk_id": "chunk_533", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_535", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Example 3: Text colors", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Example 3: Text colors", "content": "Example 3: Text colors The following configuration example has \"darkGoldenrod\" text and \"darkOrchid\" links on a \"dark\" base. Buttons (including st.link_button) use the \"darkGoldenrod\" text color. In the multiselect widget, the placeholder text, drop-down menu, and tooltip all have \"darkGoldenrod\" text. If you hover over the sidebar, the scrollbar and collapse icon (chevron_left) are \"darkGoldenrod\".", "prev_chunk_id": "chunk_534", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_536", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "baseRadius and buttonRadius", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "baseRadius and buttonRadius", "content": "baseRadius and buttonRadius baseRadius defines the radius of borders and backgrounds for the following elements: - Buttons and input areas on widgets - Selected items, including items inst.multiselectand the navigation menu - Code blocks and inline code - Dataframes (exterior) - Badges and Markdown-text backgrounds - Containers with borders, including expanders, forms, dialogs, popovers, and toasts - Tooltips, including tooltips within charts - Status and exception message blocks - Images, includingst.graphvizandst.pyplot, which display as static images buttonRadius overrides baseRadius for buttons and st.segmented_control. A few elements are notably not fully affected by baseRadius. Interactive charts and videos, which have a more complex underlying HTML, will always have square corners. This includes st.video, st.map, and st.pydeck_chart. Conversely, st.chat_input and st.audio_input will always be fully rounded. Sub-elements like tooltips are still affected by baseRadius.", "prev_chunk_id": "chunk_535", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_537", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Example 4: Border radius", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Example 4: Border radius", "content": "Example 4: Border radius In the following configuration example, the main body of the app uses a \"full\" (1rem) base radius, and the sidebar uses \"none\" (0rem). To better highlight this difference, the example includes contrasting primary and background colors.", "prev_chunk_id": "chunk_536", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_538", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "borderColor, dataframeBorderColor, and showWidgetBorder", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "borderColor, dataframeBorderColor, and showWidgetBorder", "content": "borderColor, dataframeBorderColor, and showWidgetBorder Streamlit does not display borders for unfocused widgets by default (except for buttons). When a user focuses on a widget, Streamlit displays a border around the input area in your primaryColor. When the user removes focus, Streamlit hides the border. If you set showWidgetBorder=true, Streamlit will display widget borders when the widget is not in focus. For those widgets, the border color is set by borderColor. If borderColor is not set, Streamlit infers a color by adding transparency to your textColor. The following elements have borders that you can modify: - Containers with borders, including expanders, forms, dialogs, popovers, and toasts - The sidebar, including the right edge and the boundary below the navigation menu - Dataframes and tables - st.tabs(bottom border) - Buttons, includingst.button,st.pills, andst.segmented_control - Borders on input regions dataframeBorderColor overrides borderColor for dataframes and tables.", "prev_chunk_id": "chunk_537", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_539", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Example 5: Border color and visibility", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Example 5: Border color and visibility", "content": "Example 5: Border color and visibility The following configuration example uses a \"mediumSlateBlue\" border color throughout the app. In the sidebar, widget borders are shown. In the main body of the app, widget borders are not shown, and there is no border around the multiselect, text, or chat input regions except when they are in focus. However, many other elements, like buttons and dataframes, have always-visible borders.", "prev_chunk_id": "chunk_538", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_540", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming-customize-colors-and-borders", "title": "Still have questions?", "page_title": "Colors and borders - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_539", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_541", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "2019 release notes", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "2019 release notes", "content": "2019 release notes This page contains release notes for Streamlit versions released in 2019. For the latest version of Streamlit, see Release notes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_542", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.52.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.52.0", "content": "Version 0.52.0 Release date: December 20, 2019 Highlights: - 📤 Preview release of the file uploader widget. To try it out just callst.file_uploader!Note that as apreview releasethings may change in the near future. Looking forward to hearing input from the community before we stabilize the API! - 👋 Support foremoji codesinst.writeandst.markdown! Try it out withst.write(\"Hello :wave:\"). Breaking changes: - 🧹st.pyplotnow clears figures by default, since that's what you want 99% of the time. This allows you to create two or more Matplotlib charts without having to callpyplot.clfevery time. If you want to turn this behavior off, usest.pyplot(clear_figure=False) - 📣st.cacheno longer checks for input mutations. This is the first change of our ongoing effort to simplify the caching system and prepare Streamlit for the launch of other caching primitives like Session State!", "prev_chunk_id": "chunk_541", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_543", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.51.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.51.0", "content": "Version 0.51.0 Release date: November 30, 2019 Highlights: - 🐕 You can now tweak the behavior of the file watcher with the config optionserver.fileWatcherType. Use it to switch between:auto(default) : Streamlit will attempt to use the watchdog module, and falls back to polling if watchdog is not available.watchdog: Force Streamlit to use the watchdog module.poll: Force Streamlit to always use polling.none: Streamlit will not watch files. Notable bug fixes: - Fix the \"keyPrefix\" option in static report sharing#724 - Add support for getColorX and getTargetColorX to DeckGL Chart#718 - Fixing Tornado on Windows + Python 3.8#682 - Fall back on webbrowser if xdg-open is not installed on Linux#701 - Fixing number input spin buttons for Firefox#683 - Fixing CTRL+ENTER on Windows#699 - Do not automatically create credential file when in headless mode#467", "prev_chunk_id": "chunk_542", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_544", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.50.1", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.50.1", "content": "Version 0.50.1 Release date: November 10, 2019 Highlights: - 👩‍🎓 SymPy support and ability to draw mathematical expressions using LaTeX! Seest.latex,st.markdown, andst.write. - 🌄 You can now set config options using environment variables. For example,export STREAMLIT_SERVER_PORT=9876. - 🐱 Ability to callstreamlit rundirectly with Github and Gist URLs. No need to grab the \"raw\" URL first! - 📃 Cleaner exception stack traces. We now remove all Streamlit-specific code from stack traces originating from the user's app.", "prev_chunk_id": "chunk_543", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_545", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.49.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.49.0", "content": "Version 0.49.0 Release date: October 23, 2019 Highlights: - 💯 New input widget for entering numbers with the keyboard:st.number_input() - 📺 Audio/video improvements: ability to load from a URL, to embed YouTube videos, and to set the start position. - 🤝 You can now (once again) share static snapshots of your apps to S3! See the S3 section ofstreamlit config showto set it up. Then share from top-right menu. - ⚙️ Useserver.baseUrlPathconfig option to set Streamlit's URL to something likehttp://domain.com/customPath. Notable bug fixes: - Fixes numerous Windows bugs, includingIssues #339and#401.", "prev_chunk_id": "chunk_544", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_546", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.48.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.48.0", "content": "Version 0.48.0 Release date: October 12, 2019 Highlights: - 🔧 Ability to set config options as command line flags or in a local config file. - ↕️ You can now maximize charts and images! - ⚡ Streamlit is now much faster when writing data in quick succession to your app. - ✳️ Ability to blacklist folder globs from \"run on save\" and@st.cachehashing. - 🎛️ Improved handling of widget state when Python file is modified. - 🙈 Improved HTML support inst.writeandst.markdown. HTML is still unsafe, though! Notable bug fixes: - Fixes@st.cachebug related to having your Python environment on current working directory.Issue #242 - Fixes loading of root url/on Windows.Issue #244", "prev_chunk_id": "chunk_545", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_547", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.47.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.47.0", "content": "Version 0.47.0 Release date: October 1, 2019 Highlights: - 🌄 New hello.py showing off 4 glorious Streamlit apps. Try it out! - 🔄 Streamlit now automatically selects an unused port when 8501 is already in use. - 🎁 Sidebar support is now out of beta! Just start any command withst.sidebar.instead ofst. - ⚡ Performance improvements: we added a cache to our websocket layer so we no longer re-send data to the browser when it hasn't changed between runs - 📈 Our \"native\" chartsst.line_chart,st.area_chartandst.bar_chartnow use Altair behind the scenes - 🔫 Improved widgets: custom st.slider labels; default values in multiselect - 🕵️‍♀️ The filesystem watcher now ignores hidden folders and virtual environments - 💅 Plus lots of polish around caching and widget state management Breaking change: - 🛡️ We have temporarily disabled support for sharing static \"snapshots\" of Streamlit apps. Now that we're no longer in a limited-access beta, we need to make sure sharing is well thought through and abides by laws like the DMCA. But we're working on a solution!", "prev_chunk_id": "chunk_546", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_548", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.46.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.46.0", "content": "Version 0.46.0 Release date: September 19, 2019 Highlights: - ✨ Magic commands! Usest.writewithout typingst.write. Seehttps://docs.streamlit.io/en/latest/api.html#magic-commands - 🎛️ Newst.multiselectwidget. - 🐍 Fixed numerous install issues so now you can usepip install streamliteven in Conda! We've therefore deactivated our Conda repo. - 🐞 Multiple bug fixes and additional polish in preparation for our launch! Breaking change: - 🛡️ HTML tags are now blacklisted inst.write/st.markdownby default. More information and a temporary work-around at:https://github.com/streamlit/streamlit/issues/152", "prev_chunk_id": "chunk_547", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_549", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.45.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.45.0", "content": "Version 0.45.0 Release date: August 28, 2019 Highlights: - 😱 Experimental support forsidebar! Let us know if you want to be a beta tester. - 🎁 Completely redesignedst.cache! Much more performant, has a cleaner API, support for caching functions called by@st.cachedfunctions, user-friendly error messages, and much more! - 🖼️ Lightning fastst.image, ability to choose between JPEG and PNG compression, and between RGB and BGR (for OpenCV). - 💡 Smarter API forst.slider,st.selectbox, andst.radio. - 🤖 Automatically fixes the Matplotlib backend -- no need to edit .matplotlibrc", "prev_chunk_id": "chunk_548", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_550", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.44.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.44.0", "content": "Version 0.44.0 Release date: July 28, 2019 Highlights: - ⚡ Lightning-fast reconnect when you do a ctrl-c/rerun on your Streamlit code - 📣 Useful error messages when the connection fails - 💎 Fixed multiple bugs and improved polish of our newly-released interactive widgets", "prev_chunk_id": "chunk_549", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_551", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.43.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.43.0", "content": "Version 0.43.0 Release date: July 9, 2019 Highlights: - ⚡ Support for interactive widgets! 🎈🎉", "prev_chunk_id": "chunk_550", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_552", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.42.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.42.0", "content": "Version 0.42.0 Release date: July 1, 2019 Highlights: - 💾 Ability to save Vega-Lite and Altair charts to SVG or PNG - 🐇 We now cache JS files in your browser for faster loading - ⛔ Improvements to error-handling inside Streamlit apps", "prev_chunk_id": "chunk_551", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_553", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.41.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.41.0", "content": "Version 0.41.0 Release date: June 24, 2019 Highlights: - 📈 Greatly improved our support for named datasets in Vega-Lite and Altair - 🙄 Added ability to ignore certain folders when watching for file changes. See theserver.folderWatchBlacklistconfig option. - ☔ More robust against syntax errors on the user's script and imported modules", "prev_chunk_id": "chunk_552", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_554", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.40.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.40.0", "content": "Version 0.40.0 Release date: June 10, 2019 Highlights: - Streamlit is more than 10x faster. Just save and watch your analyses update instantly. - We changed how you run Streamlit apps:$ streamlit run your_script.py [script args] - Unlike the previous versions of Streamlit,streamlit run [script] [script args]creates a server (now you don't need to worry if the proxy is up). To kill the server, all you need to do is hitCtrl+c. Why is this so much faster? Now, Streamlit keeps a single Python session running until you kill the server. This means that Streamlit can re-run your code without kicking off a new process; imported libraries are cached to memory. An added bonus is that st.cache now caches to memory instead of to disk. What happens if I run Streamlit the old way? If you run $ python your_script.py the script will execute from top to bottom, but won't produce a Streamlit app. What are the limitations of the new architecture? - To switch Streamlit apps, first you have to kill the Streamlit server withCtrl-c. Then, you can usestreamlit runto generate the next app. - Streamlit only works when used inside Python files, not interactively from the Python REPL. What else do I need to know? - The strings we print to the command line whenliveSaveis on have been cleaned up. You may need to adjust any RegEx that depends on those. - A number of config options have been renamed:Old configNew configproxy.isRemoteserver.headlessproxy.liveSaveserver.liveSaveproxy.runOnSaveserver.runOnSaveproxy.watchFileSystemserver.runOnSaveproxy.enableCORSserver.enableCORSproxy.portserver.portbrowser.proxyAddressbrowser.serverAddressbrowser.proxyPortbrowser.serverPortclient.waitForProxySecsn/aclient.throttleSecsn/aclient.tryToOutliveProxyn/aclient.proxyAddressn/aclient.proxyPortn/aproxy.autoCloseDelaySecsn/aproxy.reportExpirationSecsn/a What if something breaks? If the new Streamlit isn't working, please let us know by Slack or email. You can downgrade at any time with these commands: What's next? Thank you for staying with us on this journey! This version of Streamlit lays the foundation for interactive widgets, a new feature of Streamlit we're really excited to", "prev_chunk_id": "chunk_553", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_555", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.40.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.40.0", "content": "share with you in the next few months.", "prev_chunk_id": "chunk_554", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_556", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.36.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.36.0", "content": "Version 0.36.0 Release date: May 03, 2019 Highlights - 🚣‍♀️st.progress()now also accepts floats from 0.0–1.0 - 🤯 Improved rendering of long headers in DataFrames - 🔐 Shared apps now default to HTTPS", "prev_chunk_id": "chunk_555", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_557", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Version 0.35.0", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Version 0.35.0", "content": "Version 0.35.0 Release date: April 26, 2019 Highlights - 📷 Bokeh support! Check out docs forst.bokeh_chart - ⚡️ Improved the size and load time of saved apps - ⚾️ Implemented better error-catching throughout the codebase", "prev_chunk_id": "chunk_556", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_558", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2019", "title": "Still have questions?", "page_title": "2019 release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_557", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_559", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Connecting to data", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Connecting to data", "content": "Connecting to data Most Streamlit apps need some kind of data or API access to be useful - either retrieving data to view or saving the results of some user action. This data or API is often part of some remote service, database, or other data source. Anything you can do with Python, including data connections, will generally work in Streamlit. Streamlit's tutorials are a great starting place for many data sources. However: - Connecting to data in a Python application is often tedious and annoying. - There are specific considerations for connecting to data from streamlit apps, such as caching and secrets management. Streamlit provides st.connection() to more easily connect your Streamlit apps to data and APIs with just a few lines of code. This page provides a basic example of using the feature and then focuses on advanced usage. For a comprehensive overview of this feature, check out this video tutorial by Joshua Carroll, Streamlit's Product Manager for Developer Experience. You'll learn about the feature's utility in creating and managing data connections within your apps by using real-world examples.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_560", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Basic usage", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Basic usage", "content": "Basic usage For basic startup and usage examples, read up on the relevant data source tutorial. Streamlit has built-in connections to SQL dialects and Snowflake. We also maintain installable connections for Cloud File Storage and Google Sheets. If you are just starting, the best way to learn is to pick a data source you can access and get a minimal example working from one of the pages above 👆. Here, we will provide an ultra-minimal usage example for using a SQLite database. From there, the rest of this page will focus on advanced usage.", "prev_chunk_id": "chunk_559", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_561", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "A simple starting point - using a local SQLite database", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "A simple starting point - using a local SQLite database", "content": "A simple starting point - using a local SQLite database A local SQLite database could be useful for your app's semi-persistent data storage. To see the example below running live, check out the interactive demo below: All SQLConnections in Streamlit use SQLAlchemy. For most other SQL dialects, you also need to install the driver. But the SQLite driver ships with python3, so it isn't necessary. Create a directory and file .streamlit/secrets.toml in the same directory your app will run from. Add the following to the file. The following app creates a connection to the database, uses it to create a table and insert some data, then queries the data back and displays it in a data frame. In this example, we didn't set a ttl= value on the call to conn.query(), meaning Streamlit caches the result indefinitely as long as the app server runs. Now, on to more advanced topics! 🚀", "prev_chunk_id": "chunk_560", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_562", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Step 1: Install prerequisite library - SQLAlchemy", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Step 1: Install prerequisite library - SQLAlchemy", "content": "Step 1: Install prerequisite library - SQLAlchemy All SQLConnections in Streamlit use SQLAlchemy. For most other SQL dialects, you also need to install the driver. But the SQLite driver ships with python3, so it isn't necessary.", "prev_chunk_id": "chunk_561", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_563", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Step 2: Set a database URL in your Streamlit secrets.toml file", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Step 2: Set a database URL in your Streamlit secrets.toml file", "content": "Step 2: Set a database URL in your Streamlit secrets.toml file Create a directory and file .streamlit/secrets.toml in the same directory your app will run from. Add the following to the file.", "prev_chunk_id": "chunk_562", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_564", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Step 3: Use the connection in your app", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Step 3: Use the connection in your app", "content": "Step 3: Use the connection in your app The following app creates a connection to the database, uses it to create a table and insert some data, then queries the data back and displays it in a data frame. In this example, we didn't set a ttl= value on the call to conn.query(), meaning Streamlit caches the result indefinitely as long as the app server runs. Now, on to more advanced topics! 🚀", "prev_chunk_id": "chunk_563", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_565", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Global secrets, managing multiple apps and multiple data stores", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Global secrets, managing multiple apps and multiple data stores", "content": "Global secrets, managing multiple apps and multiple data stores Streamlit supports a global secrets file specified in the user's home directory, such as ~/.streamlit/secrets.toml. If you build or manage multiple apps, we recommend using a global credential or secret file for local development across apps. With this approach, you only need to set up and manage your credentials in one place, and connecting a new app to your existing data sources is effectively a one-liner. It also reduces the risk of accidentally checking in your credentials to git since they don't need to exist in the project repository. For cases where you have multiple similar data sources that you connect to during local development (such as a local vs. staging database), you can define different connection sections in your secrets or credentials file for different environments and then decide which to use at runtime. st.connection supports this with the name=env:<MY_NAME_VARIABLE> syntax. E.g., say I have a local and a staging MySQL database and want to connect my app to either at different times. I could create a global secrets file like this: Then I can configure my app connection to take its name from a specified environment variable Now I can specify whether to connect to local or staging at runtime by setting the DB_CONN environment variable.", "prev_chunk_id": "chunk_564", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_566", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Advanced SQLConnection configuration", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Advanced SQLConnection configuration", "content": "Advanced SQLConnection configuration The SQLConnection configuration uses SQLAlchemy create_engine() function. It will take a single URL argument or attempt to construct a URL from several parts (username, database, host, and so on) using SQLAlchemy.engine.URL.create(). Several popular SQLAlchemy dialects, such as Snowflake and Google BigQuery, can be configured using additional arguments to create_engine() besides the URL. These can be passed as **kwargs to the st.connection call directly or specified in an additional secrets section called create_engine_kwargs. E.g. snowflake-sqlalchemy takes an additional connect_args argument as a dictionary for configuration that isn’t supported in the URL. These could be specified as follows: Alternatively, this could be specified entirely in **kwargs. You can also provide both kwargs and secrets.toml values, and they will be merged (typically, kwargs take precedence).", "prev_chunk_id": "chunk_565", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_567", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Connection considerations in frequently used or long-running apps", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Connection considerations in frequently used or long-running apps", "content": "Connection considerations in frequently used or long-running apps By default, connection objects are cached without expiration using st.cache_resource. In most cases this is desired. You can do st.connection('myconn', type=MyConnection, ttl=<N>) if you want the connection object to expire after some time. Many connection types are expected to be long-running or completely stateless, so expiration is unnecessary. Suppose a connection becomes stale (such as a cached token expiring or a server-side connection being closed). In that case, every connection has a reset() method, which will invalidate the cached version and cause Streamlit to recreate the connection the next time it is retrieved Convenience methods like query() and read() will typically cache results by default using st.cache_data without an expiration. When an app can run many different read operations with large results, it can cause high memory usage over time and results to become stale in a long-running app, the same as with any other usage of st.cache_data. For production use cases, we recommend setting an appropriate ttl on these read operations, such as conn.read('path/to/file', ttl=\"1d\"). Refer to Caching for more information. For apps that could get significant concurrent usage, ensure that you understand any thread safety implications of your connection, particularly when using a connection built by a third party. Connections built by Streamlit should provide thread-safe operations by default.", "prev_chunk_id": "chunk_566", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_568", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Build your own connection", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Build your own connection", "content": "Build your own connection Building your own basic connection implementation using an existing driver or SDK is quite straightforward in most cases. However, you can add more complex functionality with further effort. This custom implementation can be a great way to extend support to a new data source and contribute to the Streamlit ecosystem. Maintaining a tailored internal Connection implementation across many apps can be a powerful practice for organizations with frequently used access patterns and data sources. Check out the Build your own Connection page in the st.experimental connection demo app below for a quick tutorial and working implementation. This demo builds a minimal but very functional Connection on top of DuckDB. The typical steps are: - Declare the Connection class, extendingExperimentalBaseConnectionwith the type parameter bound to the underlying connection object:from streamlit.connections import ExperimentalBaseConnection import duckdb class DuckDBConnection(ExperimentalBaseConnection[duckdb.DuckDBPyConnection]) - Implement the_connectmethod that reads any kwargs, external config/credential locations, and Streamlit secrets to initialize the underlying connection:def _connect(self, **kwargs) -> duckdb.DuckDBPyConnection: if 'database' in kwargs: db = kwargs.pop('database') else: db = self._secrets['database'] return duckdb.connect(database=db, **kwargs) - Add useful helper methods that make sense for your connection (wrapping them inst.cache_datawhere caching is desired)", "prev_chunk_id": "chunk_567", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_569", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Connection-building best practices", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Connection-building best practices", "content": "Connection-building best practices We recommend applying the following best practices to make your Connection consistent with the Connections built into Streamlit and the wider Streamlit ecosystem. These practices are especially important for Connections that you intend to distribute publicly. - Extend existing drivers or SDKs, and default to semantics that makes sense for their existing users.You should rarely need to implement complex data access logic from scratch when building a Connection. Use existing popular Python drivers and clients whenever possible. Doing so makes your Connection easier to maintain, more secure, and enables users to get the latest features. E.g.SQLConnectionextends SQLAlchemy,FileConnectionextendsfsspec,GsheetsConnectionextendsgspread, etc.Consider using access patterns, method/argument naming, and return values that are consistent with the underlying package and familiar to existing users of that package. - Intuitive, easy to use read methods.Much of the power of st.connection is providing intuitive, easy-to-use read methods that enable app developers to get started quickly. Most connections should expose at least one read method that is:Named with a simple verb, likeread(),query(), orget()Wrapped byst.cache_databy default, with at leastttl=argument supportedIf the result is in a tabular format, it returns a pandas DataFrameProvides commonly used keyword arguments (such as paging or formatting) with sensible defaults - ideally, the common case requires only 1-2 arguments. - Config, secrets, and precedence in_connectmethod.Every Connection should support commonly used connection parameters provided via Streamlit secrets and keyword arguments. The names should match the ones used when initializing or configuring the underlying package.Additionally, where relevant, Connections should support data source specific configuration through existing standard environment variables or config / credential files. In many cases, the underlying package provides constructors or factory functions that already handle this easily.When you can specify the same connection parameters in multiple places, we recommend using the following precedence order when possible (highest to lowest):Keyword arguments specified in", "prev_chunk_id": "chunk_568", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_570", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Connection-building best practices", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Connection-building best practices", "content": "the codeStreamlit secretsdata source specific configuration (if relevant) - Handling thread safety and stale connections.Connections should provide thread-safe operations when practical (which should be most of the time) and clearly document any considerations around this. Most underlying drivers or SDKs should provide thread-safe objects or methods - use these when possible.If the underlying driver or SDK has a risk of stateful connection objects becoming stale or invalid, consider building a low impact health check or reset/retry pattern into the access methods. The SQLConnection built into Streamlit has a good example of this pattern usingtenacityand the built-inConnection.reset()method. An alternate approach is to encourage developers to set an appropriate TTL on thest.connection()call to ensure it periodically reinitializes the connection object.", "prev_chunk_id": "chunk_569", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_571", "url": "https://docs.streamlit.io/develop/concepts/connections/connecting-to-data", "title": "Still have questions?", "page_title": "Connecting to data - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_570", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_572", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Streamlit trust and security", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Streamlit trust and security", "content": "Streamlit trust and security Streamlit is a framework that turns Python scripts into interactive apps, giving data scientists the ability to quickly create data and model-based apps for the entire company. A simple Streamlit app is: When you streamlit run my_app.py, you start a web server that runs the interactive application on your local computer at http://localhost:8501. This is great for local development. When you want to share with your colleagues, Streamlit Community Cloud enables you to deploy and run these applications in the cloud. Streamlit Community Cloud handles the details of containerization and provides you an interface for easily managing your deployed apps. This document provides an overview of the security safeguards we've implemented to protect you and your data. Security, however, is a shared responsibility and you are ultimately responsible for making appropriate use of Streamlit and the Streamlit Community Cloud, including implementation of appropriate user-configurable security safeguards and best practices.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_573", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Authentication", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Authentication", "content": "Authentication You must authenticate through GitHub to deploy or administer an app. Authentication through Google or single-use emailed links are required to view a private app when you don't have push or admin permissions on the associated GitHub repository. The single-use emailed links are valid for 15 minutes once requested.", "prev_chunk_id": "chunk_572", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_574", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Permissions", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Permissions", "content": "Permissions Streamlit Community Cloud inherits the permissions you have assigned in GitHub. Users with write access to a GitHub repository for a given app will be able to make changes in the Streamlit administrative console. However, only users with admin access to a repository are able to deploy and delete apps.", "prev_chunk_id": "chunk_573", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_575", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Data hosting", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Data hosting", "content": "Data hosting Our physical infrastructure is hosted and managed within secure data centers maintained by infrastructure-as-a-service cloud providers. Streamlit leverages many of these platforms' built-in security, privacy, and redundancy features. Our cloud providers continually monitor their data centers for risk and undergo assessments to ensure compliance with industry standards.", "prev_chunk_id": "chunk_574", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_576", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Data deletion", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Data deletion", "content": "Data deletion Community Cloud users have the option to delete any apps they’ve deployed as well as their entire account. When a user deletes their application from the admin console, we delete their source code, including any files copied from their GitHub repository or created within our system from the running app. However, we keep a record representing the application in our database. This record contains the coordinates of the application: the GitHub organization or user, the GitHub repository, the branch, and the path of the main module file. When a user deletes their account, we perform a hard deletion of their data and a hard deletion of all the apps that belong to the GitHub identity associated with their account. In this case, we do not maintain the records of application coordinates described above. When an account is deleted, we also delete any HubSpot contact associated with the Community Cloud account.", "prev_chunk_id": "chunk_575", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_577", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Virtual private cloud", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Virtual private cloud", "content": "Virtual private cloud All of our servers are within a virtual private cloud (VPC) with firewalls and network access control lists (ACLs) to allow external access to a select few API endpoints; all other internal services are only accessible within the VPC.", "prev_chunk_id": "chunk_576", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_578", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Encryption", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Encryption", "content": "Encryption Streamlit apps are served entirely over HTTPS. We use only strong cipher suites and HTTP Strict Transport Security (HSTS) to ensure browsers interact with Streamlit apps over HTTPS. All data sent to or from Streamlit over the public internet is encrypted in transit using 256-bit encryption. Our API and application endpoints use Transport Layer Security (TLS) 1.2 (or better). We also encrypt data at rest on disk using AES-256.", "prev_chunk_id": "chunk_577", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_579", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Permissions and authentication", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Permissions and authentication", "content": "Permissions and authentication Access to Community Cloud user account data is limited to authorized personnel. We run a zero-trust corporate network, utilize single sign-on and multi-factor authentication (MFA), and enforce strong password policies to ensure access to cloud-related services is protected.", "prev_chunk_id": "chunk_578", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_580", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Incident response", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Incident response", "content": "Incident response Our internal protocol for handling security events includes detection, analysis, response, escalation, and mitigation. Security advisories are made available at https://streamlit.io/advisories.", "prev_chunk_id": "chunk_579", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_581", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Penetration testing", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Penetration testing", "content": "Penetration testing Streamlit uses third-party security tools to scan for vulnerabilities on a regular basis. Our security teams conduct periodic, intensive penetration tests on the Streamlit platform. Our product development team responds to any identified issues or potential vulnerabilities to ensure the quality, security, and availability of Streamlit applications.", "prev_chunk_id": "chunk_580", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_582", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Vulnerability management", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Vulnerability management", "content": "Vulnerability management We keep our systems up-to-date with the latest security patches and continuously monitor for new vulnerabilities. This includes automated scanning of our code repositories for vulnerable dependencies. If you discover a vulnerability in one of our products or websites, please report the issue to HackerOne.", "prev_chunk_id": "chunk_581", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_583", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security", "title": "Still have questions?", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_582", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_584", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/fork-and-edit-a-public-app", "title": "Fork and edit a public app", "page_title": "Fork and edit a public app - Streamlit Docs", "breadcrumbs": "Fork and edit a public app", "content": "Fork and edit a public app Community Cloud is all about learning, sharing, and exploring the world of Streamlit. For apps with public repositories, you can quickly fork copies to your GitHub account, deploy your own version, and jump into a codespace on GitHub to start editing and exploring Streamlit code. - From a forkable app, in the upper-right corner, click \"Fork.\" - Optional: In the \"App URL\" field, choose a custom subdomain for your app.Every Community Cloud app is deployed to a subdomain onstreamlit.app, but you can change your app's subdomain at any time. For more information, seeApp settings. - Click \"Fork!\"The repository will be forked to your GitHub account. If you have already forked the repository, Community Cloud will use the existing fork. If your existing fork already has an associated codespace, the codespace will be reused.priority_highWarningDo not use this method in the following situations:You have an existing repository that matches the fork name (but isn't a fork of this app).You have an existing fork of this app, but you've changed the name of the repository.If you have an existing fork of this app and kept the original repository name, Community Cloud will use your existing fork. If you've previously deployed the app and opened a codespace, Community Cloud will open your existing codespace. - Wait for GitHub to set up your codespace.It can take several minutes to fully initialize your codespace. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.priority_highImportantThe app displayed in your codespace is", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_585", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/fork-and-edit-a-public-app", "title": "Fork and edit a public app", "page_title": "Fork and edit a public app - Streamlit Docs", "breadcrumbs": "Fork and edit a public app", "content": "not the same instance you deployed on Community Cloud. Your codespace is a self-contained development environment. When you make edits inside a codespace, those edits don't leave the codespace until you commit them to your repository. When you commit your changes to your repository, Community Cloud detects the changes and updates your deployed app. To learn more, seeEdit your app. - Edit your newly forked app as desired. For more instructions on working with GitHub Codespaces, seeEdit your app.", "prev_chunk_id": "chunk_584", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_586", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/fork-and-edit-a-public-app", "title": "Still have questions?", "page_title": "Fork and edit a public app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_585", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_587", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies", "title": "App dependencies for your Community Cloud app", "page_title": "App dependencies for your Community Cloud app - Streamlit Docs", "breadcrumbs": "App dependencies for your Community Cloud app", "content": "App dependencies for your Community Cloud app The main reason that apps fail to build properly is because Streamlit Community Cloud can't find your dependencies! There are two kinds of dependencies your app might have: Python dependencies and external dependencies. Python dependencies are other Python packages (just like Streamlit!) that you import into your script. External dependencies are less common, but they include any other software your script needs to function properly. Because Community Cloud runs on Linux, these will be Linux dependencies installed with apt-get outside the Python environment. For your dependencies to be installed correctly, make sure you: - Add arequirements filefor Python dependencies. - Optional: To manage any external dependencies, add apackages.txtfile. With each import statement in your script, you are bringing in a Python dependency. You need to tell Community Cloud how to install those dependencies through a Python package manager. We recommend using a requirements.txt file, which is based on pip. You should not include built-in Python libraries like math, random, or distutils in your requirements.txt file. These are a part of Python and aren't installed separately. Also, Community Cloud has streamlit installed by default. You don't strictly need to include streamlit unless you want to pin or restrict the version. If you deploy an app without a requirements.txt file, your app will run in an environment with just streamlit (and its dependencies) installed. If you have a script like the following, no extra dependencies would be needed since pandas and numpy are installed as direct dependencies of streamlit. Similarly, math and random are built into Python. However, a valid requirements.txt file would be: Alternatively, if you needed to specify certain versions, another valid example would be: In the above example, streamlit is pinned to version 1.24.1, pandas must be strictly greater than version 2.0,", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_588", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies", "title": "App dependencies for your Community Cloud app", "page_title": "App dependencies for your Community Cloud app - Streamlit Docs", "breadcrumbs": "App dependencies for your Community Cloud app", "content": "and numpy must be at-or-below version 1.25.1. Each line in your requirements.txt file is effectively what you would like to pip install into your cloud environment. There are other Python package managers in addition to pip. If you want to consider alternatives to using a requirements.txt file, Community Cloud will use the first dependency file it finds. Community Cloud will search the directory where your entrypoint file is, then it will search the root of your repository. In each location, dependency files are prioritized in the following order: Recognized Filename | Python Package Manager uv.lock | uv Pipfile | pipenv environment.yml | conda requirements.txt | pip† pyproject.toml | poetry † For efficiency, Community Cloud will attempt to process requirements.txt with uv, but will fall back to pip if needed. uv is generally faster and more efficient than pip. For many apps, a packages.txt file is not required. However, if your script requires any software to be installed that is not a Python package, you need a packages.txt file. Community Cloud is built on Debian Linux. Anything you want to apt-get install must go in your packages.txt file. To browse available packages that can be installed, see the Debian 11 (\"bullseye\") package list. If packages.txt exists in the root directory of your repository we automatically detect it, parse it, and install the listed packages. You can read more about apt-get in Linux documentation. Add apt-get dependencies to packages.txt — one package name per line. For example, mysqlclient is a Python package which requires additional software be installed to function. A valid packages.txt file to enable mysqlclient would be:", "prev_chunk_id": "chunk_587", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_589", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies", "title": "Add Python dependencies", "page_title": "App dependencies for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Add Python dependencies", "content": "Add Python dependencies With each import statement in your script, you are bringing in a Python dependency. You need to tell Community Cloud how to install those dependencies through a Python package manager. We recommend using a requirements.txt file, which is based on pip. You should not include built-in Python libraries like math, random, or distutils in your requirements.txt file. These are a part of Python and aren't installed separately. Also, Community Cloud has streamlit installed by default. You don't strictly need to include streamlit unless you want to pin or restrict the version. If you deploy an app without a requirements.txt file, your app will run in an environment with just streamlit (and its dependencies) installed. If you have a script like the following, no extra dependencies would be needed since pandas and numpy are installed as direct dependencies of streamlit. Similarly, math and random are built into Python. However, a valid requirements.txt file would be: Alternatively, if you needed to specify certain versions, another valid example would be: In the above example, streamlit is pinned to version 1.24.1, pandas must be strictly greater than version 2.0, and numpy must be at-or-below version 1.25.1. Each line in your requirements.txt file is effectively what you would like to pip install into your cloud environment. There are other Python package managers in addition to pip. If you want to consider alternatives to using a requirements.txt file, Community Cloud will use the first dependency file it finds. Community Cloud will search the directory where your entrypoint file is, then it will search the root of your repository. In each location, dependency files are prioritized in the following order: Recognized Filename | Python Package Manager uv.lock | uv Pipfile | pipenv environment.yml | conda requirements.txt | pip† pyproject.toml | poetry † For efficiency,", "prev_chunk_id": "chunk_588", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_590", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies", "title": "Add Python dependencies", "page_title": "App dependencies for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Add Python dependencies", "content": "Community Cloud will attempt to process requirements.txt with uv, but will fall back to pip if needed. uv is generally faster and more efficient than pip.", "prev_chunk_id": "chunk_589", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_591", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies", "title": "Other Python package managers", "page_title": "App dependencies for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Other Python package managers", "content": "Other Python package managers There are other Python package managers in addition to pip. If you want to consider alternatives to using a requirements.txt file, Community Cloud will use the first dependency file it finds. Community Cloud will search the directory where your entrypoint file is, then it will search the root of your repository. In each location, dependency files are prioritized in the following order: Recognized Filename | Python Package Manager uv.lock | uv Pipfile | pipenv environment.yml | conda requirements.txt | pip† pyproject.toml | poetry † For efficiency, Community Cloud will attempt to process requirements.txt with uv, but will fall back to pip if needed. uv is generally faster and more efficient than pip.", "prev_chunk_id": "chunk_590", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_592", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies", "title": "apt-get dependencies", "page_title": "App dependencies for your Community Cloud app - Streamlit Docs", "breadcrumbs": "apt-get dependencies", "content": "apt-get dependencies For many apps, a packages.txt file is not required. However, if your script requires any software to be installed that is not a Python package, you need a packages.txt file. Community Cloud is built on Debian Linux. Anything you want to apt-get install must go in your packages.txt file. To browse available packages that can be installed, see the Debian 11 (\"bullseye\") package list. If packages.txt exists in the root directory of your repository we automatically detect it, parse it, and install the listed packages. You can read more about apt-get in Linux documentation. Add apt-get dependencies to packages.txt — one package name per line. For example, mysqlclient is a Python package which requires additional software be installed to function. A valid packages.txt file to enable mysqlclient would be:", "prev_chunk_id": "chunk_591", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_593", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/app-dependencies", "title": "Still have questions?", "page_title": "App dependencies for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_592", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_594", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Sanity checks", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Sanity checks", "content": "Sanity checks If you're having problems running your Streamlit app, here are a few things to try out.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_595", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #0: Are you using a Streamlit-supported version of Python?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #0: Are you using a Streamlit-supported version of Python?", "content": "Check #0: Are you using a Streamlit-supported version of Python? Streamlit will maintain backwards-compatibility with earlier Python versions as practical, guaranteeing compatibility with at least the last three minor versions of Python 3. As new versions of Python are released, we will try to be compatible with the new version as soon as possible, though frequently we are at the mercy of other Python packages to support these new versions as well. Streamlit currently supports versions 3.9, 3.10, 3.11, 3.12, and 3.13 of Python.", "prev_chunk_id": "chunk_594", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_596", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #1: Is Streamlit running?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #1: Is Streamlit running?", "content": "Check #1: Is Streamlit running? On a Mac or Linux machine, type this on the terminal: If you don't see streamlit run in the output (or streamlit hello, if that's the command you ran) then the Streamlit server is not running. So re-run your command and see if the bug goes away.", "prev_chunk_id": "chunk_595", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_597", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #2: Is this an already-fixed Streamlit bug?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #2: Is this an already-fixed Streamlit bug?", "content": "Check #2: Is this an already-fixed Streamlit bug? We try to fix bugs quickly, so many times a problem will go away when you upgrade Streamlit. So the first thing to try when having an issue is upgrading to the latest version of Streamlit: ...and then verify that the version number printed corresponds to the version number displayed on PyPI. Try reproducing the issue now. If not fixed, keep reading on.", "prev_chunk_id": "chunk_596", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_598", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #3: Are you running the correct Streamlit binary?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #3: Are you running the correct Streamlit binary?", "content": "Check #3: Are you running the correct Streamlit binary? Let's check whether your Python environment is set up correctly. Edit the Streamlit script where you're experiencing your issue, comment everything out, and add these lines instead: ...then call streamlit run on your script and make sure it says the same version as above. If not the same version, check out these instructions for some sure-fire ways to set up your environment.", "prev_chunk_id": "chunk_597", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_599", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #4: Is your browser caching your app too aggressively?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #4: Is your browser caching your app too aggressively?", "content": "Check #4: Is your browser caching your app too aggressively? There are two easy ways to check this: - Load your app in a browser then pressCtrl-Shift-Ror⌘-Shift-Rto do a hard refresh (Chrome/Firefox). - As a test, run Streamlit on another port. This way the browser starts the page with a brand new cache. For that, pass the--server.portargument to Streamlit on the command line:streamlit run my_app.py --server.port=9876", "prev_chunk_id": "chunk_598", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_600", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #5: Is this a Streamlit regression?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #5: Is this a Streamlit regression?", "content": "Check #5: Is this a Streamlit regression? If you've upgraded to the latest version of Streamlit and things aren't working, you can downgrade at any time using this command: ...where 1.0.0 is the version you'd like to downgrade to. See Release notes for a complete list of Streamlit versions.", "prev_chunk_id": "chunk_599", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_601", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #6 [Windows]: Is Python added to your PATH?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #6 [Windows]: Is Python added to your PATH?", "content": "Check #6 [Windows]: Is Python added to your PATH? When installed by downloading from python.org, Python is not automatically added to the Windows system PATH. Because of this, you may get error messages like the following: Command Prompt: PowerShell: To resolve this issue, add Python to the Windows system PATH. After adding Python to your Windows PATH, you should then be able to follow the instructions in our Get Started section.", "prev_chunk_id": "chunk_600", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_602", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Check #7 [Windows]: Do you need Build Tools for Visual Studio installed?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Check #7 [Windows]: Do you need Build Tools for Visual Studio installed?", "content": "Check #7 [Windows]: Do you need Build Tools for Visual Studio installed? Streamlit includes pyarrow as an install dependency. Occasionally, when trying to install Streamlit from PyPI, you may see errors such as the following: This error indicates that Python is trying to compile certain libraries during install, but it cannot find the proper compilers on your system, as reflected by the line error: Microsoft Visual C++ 14.0 is required. Get it with \"Build Tools for Visual Studio\". Installing Build Tools for Visual Studio should resolve this issue.", "prev_chunk_id": "chunk_601", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_603", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/sanity-checks", "title": "Still have questions?", "page_title": "Sanity checks - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_602", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_604", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/deploy-from-a-template", "title": "Deploy an app from a template", "page_title": "Deploy an app from a template - Streamlit Docs", "breadcrumbs": "Deploy an app from a template", "content": "Deploy an app from a template Streamlit Community Cloud makes it easy to get started with several convenient templates. Just pick a template, and Community Cloud will fork it to your account and deploy it. Any edits you push to your new fork will immediately show up in your deployed app. Additionally, if you don't want to use a local development environment, Community Cloud makes it easy to create a GitHub codespace that's fully configured for Streamlit app development.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_605", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/deploy-from-a-template", "title": "Access the template picker", "page_title": "Deploy an app from a template - Streamlit Docs", "breadcrumbs": "Access the template picker", "content": "Access the template picker There are two ways to begin deploying a template: the \"Create app\" button and the template gallery at the bottom of your workspace. - If you click the \"Create app\" button, Community Cloud will ask you \"Do you already have an app?\" Select \"Nope, create one from a template.\" - If you scroll to the bottom of your workspace in the \"My apps\" section, you can see the most popular templates. Click on one directly, or select \"View all templates.\" The template picker shows a list of available templates on the left. A preview for the current, selected template shows on the right.", "prev_chunk_id": "chunk_604", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_606", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/deploy-from-a-template", "title": "Select a template", "page_title": "Deploy an app from a template - Streamlit Docs", "breadcrumbs": "Select a template", "content": "Select a template - From the list of templates on the left, select \"GDP dashboard.\" - Optional: For \"Name of new GitHub repository,\" enter a name for your new, forked repository.When you deploy a template, Community Cloud forks the template repository into your GitHub account. Community Cloud chooses a default name for this repository based on the selected template. If you have previously deployed the same template with its default name, Community Cloud will append an auto-incrementing number to the name.push_pinNoteEven if you have another user's or organization's workspace selected, Community Cloud will always deploy a template app from your personal workspace. That is, Community Cloud will always fork a template into your GitHub user account. If you want to deploy a template app from an organization, manually fork the template in GitHub, and deploy it from your fork in the associated workspace. - Optional: In the \"App URL\" field, choose a subdomain for your new app.Every Community Cloud app is deployed to a subdomain onstreamlit.app, but you can change your app's subdomain at any time. For more information, seeApp settings. - Optional: To edit the template in a GitHub codespace immediately, select the option to \"Open GitHub Codespaces...\"You can create a codespace for your app at any time. To learn how to create a codespace after you've deployed an app, seeEdit your app. - Optional: To change the version of Python, at the bottom of the screen, click \"Advanced settings,\" select a Python version, and then click \"Save.\"priority_highImportantAfter an app is deployed, you can't change the version of Python without deleting and redeploying the app. - At the bottom, click \"Deploy.\"", "prev_chunk_id": "chunk_605", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_607", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/deploy-from-a-template", "title": "View your app", "page_title": "Deploy an app from a template - Streamlit Docs", "breadcrumbs": "View your app", "content": "View your app - If you didn't select the option to open GitHub Codespaces, you are redirected to your new app. - If you selected the option to open GitHub Codespaces, you are redirected to your new codespace, which can take several minutes to be fully initialized. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file.", "prev_chunk_id": "chunk_606", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_608", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/deploy-from-a-template", "title": "Still have questions?", "page_title": "Deploy an app from a template - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_607", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_609", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-streamlit", "title": "Upgrade your app's Streamlit version on Streamlit Community Cloud", "page_title": "Upgrade your app's Streamlit version on Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Upgrade your app's Streamlit version on Streamlit Community Cloud", "content": "Upgrade your app's Streamlit version on Streamlit Community Cloud Want to use a cool new Streamlit feature but your app on Streamlit Community Cloud is running an old version of the Streamlit library? If that's you, don't worry! Here's how to upgrade your app's Streamlit version, based on how you manage your app dependencies:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_610", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-streamlit", "title": "No dependency file", "page_title": "Upgrade your app's Streamlit version on Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "No dependency file", "content": "No dependency file When there is no dependencies file in your repository, your app will use the lastest Streamlit version that existed when it was last rebooted. In this case, simply reboot your app and Community Cloud will install the latest version. You may want to avoid getting into this situation if your app depends on a specific version of Streamlit. That is why we encourage you to use a dependency file and pin your desired version of Streamlit.", "prev_chunk_id": "chunk_609", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_611", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-streamlit", "title": "With a dependency file", "page_title": "Upgrade your app's Streamlit version on Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "With a dependency file", "content": "With a dependency file When your app includes a dependency file, reboot your app or change your dependency file as follows: - If Streamlit is not included in your dependency file, reboot the app as described above.Note that we don't recommend having an incomplete dependency file sincepipwon't be able to includestreamlitwhen resolving compatible versions of your dependencies. - If Streamlit is included in your dependency file, but the version is not pinned or capped, reboot the app as described above.When Community Cloud reboots your app, it will re-resolve your dependency file. Your app will then have the latest version of all dependencies that are consistent with your dependency file. - If Streamlit is included in your dependency file, and the version is pinned (e.g.,streamlit==1.37.0), update your dependency file.When you commit a change to your dependency file in your repository, Community Cloud will detect the change and automatically resolve the new dependencies. This is how you add, remove, or change all Python dependencies in general. You don't need to manually reboot your app, but you can if you want to.", "prev_chunk_id": "chunk_610", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_612", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-streamlit", "title": "Still have questions?", "page_title": "Upgrade your app's Streamlit version on Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_611", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_613", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-python", "title": "Upgrade your app's Python version on Community Cloud", "page_title": "Upgrade your app's Python version on Community Cloud - Streamlit Docs", "breadcrumbs": "Upgrade your app's Python version on Community Cloud", "content": "Upgrade your app's Python version on Community Cloud Dependencies within Python can be upgraded in place by simply changing your environment configuration file (typically requirements.txt). However, Python itself can't be changed after deployment. When you deploy an app, you can select the version of Python through the \"Advanced settings\" dialog. After you have deployed an app, you must delete it and redeploy it to change the version of Python it uses. - Take note of your app's settings:Current, custom subdomain.GitHub coordinates (repository, branch, and entrypoint file path).Secrets.When you delete an app, its custom subdomain is immediately available for reuse. - Delete your app. - Deploy your app.On the deployment page, select your app's GitHub coordinates.Set your custom domain to match your deleted instance.Click \"Advanced settings.\"Choose your desired version of Python.Optional: If your app had secrets, re-enter them.Click \"Save.\"Click \"Deploy.\" In a few minutes, Community Cloud will redirect you to your redployed app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_614", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/upgrade-python", "title": "Still have questions?", "page_title": "Upgrade your app's Python version on Community Cloud - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_613", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_615", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/delete-your-account", "title": "Delete your account", "page_title": "Delete your account - Streamlit Docs", "breadcrumbs": "Delete your account", "content": "Delete your account Deleting your Streamlit Community Cloud account is just as easy as creating it. When you delete your account, your information, account, and all your hosted apps are deleted as well. Read more about data deletion in Streamlit trust and security. Follow these steps to delete your account: - Sign in to Streamlit Community Cloud atshare.streamlit.ioand access yourWorkspace settings. - From the \"Linked accounts\" section, click \"Delete account.\" - In the confirmation dialog, follow the prompt and click \"Delete account forever.\"All your information and apps will be permanently deleted. It's that simple! If you have any questions or run into issues deleting your account, please reach out to us on our forum. We're happy to help! 🎈", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_616", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/delete-your-account", "title": "How to delete your account", "page_title": "Delete your account - Streamlit Docs", "breadcrumbs": "How to delete your account", "content": "How to delete your account Follow these steps to delete your account: - Sign in to Streamlit Community Cloud atshare.streamlit.ioand access yourWorkspace settings. - From the \"Linked accounts\" section, click \"Delete account.\" - In the confirmation dialog, follow the prompt and click \"Delete account forever.\"All your information and apps will be permanently deleted. It's that simple! If you have any questions or run into issues deleting your account, please reach out to us on our forum. We're happy to help! 🎈", "prev_chunk_id": "chunk_615", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_617", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/delete-your-account", "title": "Still have questions?", "page_title": "Delete your account - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_616", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_618", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews", "title": "Share previews", "page_title": "Share previews - Streamlit Docs", "breadcrumbs": "Share previews", "content": "Share previews Social media sites generate a card with a title, preview image, and description when you share a link. This feature is called a \"share preview.\" In the same way, when you share a link to a public Streamlit app on social media, a share preview is also generated. Here's an example of a share preview for a public Streamlit app posted on Twitter: The title is the text that appears at the top of the share preview. The text also appears in the browser tab when you visit the app. You should set the title to something that will make sense to your app's audience and describe what the app does. It is best practice to keep the title concise, ideally under 60 characters. There are two ways to set the title of a share preview: - Set thepage_titleparameter inst.set_page_config()to your desired title. E.g.:import streamlit as st st.set_page_config(page_title=\"My App\") # ... rest of your app - If you don't set thepage_titleparameter, the title of the share preview will be the name of your app's GitHub repository. For example, the default title for an app hosted on GitHub atgithub.com/jrieke/traingeneratorwill be \"traingenerator\". The description is the text that appears below the title in the share preview. The description should summarize what the app does and ideally should be under 100 characters. Streamlit pulls the description from the README in the app's GitHub repository. If there is no README, the description will default to: This app was built in Streamlit! Check it out and visit https://streamlit.io for more awesome community apps. 🎈 If you want your share previews to look great and want users to share your app and click on your links, you should write a good description in the README of your app’s GitHub repository. Streamlit Community Cloud takes", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_619", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews", "title": "Share previews", "page_title": "Share previews - Streamlit Docs", "breadcrumbs": "Share previews", "content": "a screenshot of your app once a day and uses it as the preview image, unlike titles and descriptions which are pulled directly from your app's code or GitHub repository. This screenshot may take up to 24 hours to update. If you initially made your app public and later decided to make it private, we will stop generating share previews for the app. However, it may take up to 24 hours for the share previews to stop appearing.", "prev_chunk_id": "chunk_618", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_620", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews", "title": "Titles", "page_title": "Share previews - Streamlit Docs", "breadcrumbs": "Titles", "content": "Titles The title is the text that appears at the top of the share preview. The text also appears in the browser tab when you visit the app. You should set the title to something that will make sense to your app's audience and describe what the app does. It is best practice to keep the title concise, ideally under 60 characters. There are two ways to set the title of a share preview: - Set thepage_titleparameter inst.set_page_config()to your desired title. E.g.:import streamlit as st st.set_page_config(page_title=\"My App\") # ... rest of your app - If you don't set thepage_titleparameter, the title of the share preview will be the name of your app's GitHub repository. For example, the default title for an app hosted on GitHub atgithub.com/jrieke/traingeneratorwill be \"traingenerator\".", "prev_chunk_id": "chunk_619", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_621", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews", "title": "Descriptions", "page_title": "Share previews - Streamlit Docs", "breadcrumbs": "Descriptions", "content": "Descriptions The description is the text that appears below the title in the share preview. The description should summarize what the app does and ideally should be under 100 characters. Streamlit pulls the description from the README in the app's GitHub repository. If there is no README, the description will default to: This app was built in Streamlit! Check it out and visit https://streamlit.io for more awesome community apps. 🎈 If you want your share previews to look great and want users to share your app and click on your links, you should write a good description in the README of your app’s GitHub repository.", "prev_chunk_id": "chunk_620", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_622", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews", "title": "Preview images", "page_title": "Share previews - Streamlit Docs", "breadcrumbs": "Preview images", "content": "Preview images Streamlit Community Cloud takes a screenshot of your app once a day and uses it as the preview image, unlike titles and descriptions which are pulled directly from your app's code or GitHub repository. This screenshot may take up to 24 hours to update.", "prev_chunk_id": "chunk_621", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_623", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews", "title": "Switching your app from public to private", "page_title": "Share previews - Streamlit Docs", "breadcrumbs": "Switching your app from public to private", "content": "Switching your app from public to private If you initially made your app public and later decided to make it private, we will stop generating share previews for the app. However, it may take up to 24 hours for the share previews to stop appearing.", "prev_chunk_id": "chunk_622", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_624", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/share-previews", "title": "Still have questions?", "page_title": "Share previews - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_623", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_625", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Understanding widget behavior", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Understanding widget behavior", "content": "Understanding widget behavior Widgets (like st.button, st.selectbox, and st.text_input) are at the heart of Streamlit apps. They are the interactive elements of Streamlit that pass information from your users into your Python code. Widgets are magical and often work how you want, but they can have surprising behavior in some situations. Understanding the different parts of a widget and the precise order in which events occur helps you achieve your desired results. This guide covers advanced concepts about widgets. Generally, it begins with simpler concepts and increases in complexity. For most beginning users, these details won't be important to know right away. When you want to dynamically change widgets or preserve widget information between pages, these concepts will be important to understand. We recommend having a basic understanding of Session State before reading this guide.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_626", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Anatomy of a widget", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Anatomy of a widget", "content": "Anatomy of a widget There are four parts to keep in mind when using widgets: - The frontend component as seen by the user. - The backend value or value as seen throughst.session_state. - The key of the widget used to access its value viast.session_state. - The return value given by the widget's function.", "prev_chunk_id": "chunk_625", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_627", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Widgets are session dependent", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Widgets are session dependent", "content": "Widgets are session dependent Widget states are dependent on a particular session (browser connection). The actions of one user do not affect the widgets of any other user. Furthermore, if a user opens up multiple tabs to access an app, each tab will be a unique session. Changing a widget in one tab will not affect the same widget in another tab.", "prev_chunk_id": "chunk_626", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_628", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Widgets return simple Python data types", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Widgets return simple Python data types", "content": "Widgets return simple Python data types The value of a widget as seen through st.session_state and returned by the widget function are of simple Python types. For example, st.button returns a boolean value and will have the same boolean value saved in st.session_state if using a key. The first time a widget function is called (before a user interacts with it), it will return its default value. (e.g. st.selectbox returns the first option by default.) Default values are configurable for all widgets with a few special exceptions like st.button and st.file_uploader.", "prev_chunk_id": "chunk_627", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_629", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Keys help distinguish widgets and access their values", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Keys help distinguish widgets and access their values", "content": "Keys help distinguish widgets and access their values Widget keys serve two purposes: - Distinguishing two otherwise identical widgets. - Creating a means to access and manipulate the widget's value throughst.session_state. Whenever possible, Streamlit updates widgets incrementally on the frontend instead of rebuilding them with each rerun. This means Streamlit assigns an ID to each widget from the arguments passed to the widget function. A widget's ID is based on parameters such as label, min or max value, default value, placeholder text, help text, and key. The page where the widget appears also factors into a widget's ID. If you have two widgets of the same type with the same arguments on the same page, you will get a DuplicateWidgetID error. In this case, assign unique keys to the two widgets.", "prev_chunk_id": "chunk_628", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_630", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Order of operations", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Order of operations", "content": "Order of operations When a user interacts with a widget, the order of logic is: - Its value inst.session_stateis updated. - The callback function (if any) is executed. - The page reruns with the widget function returning its new value. If the callback function writes anything to the screen, that content will appear above the rest of the page. A callback function runs as a prefix to the script rerunning. Consequently, that means anything written via a callback function will disappear as soon as the user performs their next action. Other widgets should generally not be created within a callback function. Using a callback function with a form requires consideration of this order of operations.", "prev_chunk_id": "chunk_629", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_631", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Using callback functions with forms", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Using callback functions with forms", "content": "Using callback functions with forms Using a callback function with a form requires consideration of this order of operations.", "prev_chunk_id": "chunk_630", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_632", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Statefulness of widgets", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Statefulness of widgets", "content": "Statefulness of widgets As long as the defining parameters of a widget remain the same and that widget is continuously rendered on the frontend, then it will be stateful and remember user input.", "prev_chunk_id": "chunk_631", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_633", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Changing parameters of a widget will reset it", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Changing parameters of a widget will reset it", "content": "Changing parameters of a widget will reset it If any of the defining parameters of a widget change, Streamlit will see it as a new widget and it will reset. The use of manually assigned keys and default values is particularly important in this case. Note that callback functions, callback args and kwargs, label visibility, and disabling a widget do not affect a widget's identity. In this example, we have a slider whose min and max values are changed. Try interacting with each slider to change its value then change the min or max setting to see what happens.", "prev_chunk_id": "chunk_632", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_634", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Updating a slider with no default value", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Updating a slider with no default value", "content": "Updating a slider with no default value For the first two sliders above, as soon as the min or max value is changed, the sliders reset to the min value. The changing of the min or max value makes them \"new\" widgets from Streamlit's perspective and so they are recreated from scratch when the app reruns with the changed parameters. Since no default value is defined, each widget will reset to its min value. This is the same with or without a key since it's seen as a new widget either way. There is a subtle point to understand about pre-existing keys connecting to widgets. This will be explained further down in Widget life cycle.", "prev_chunk_id": "chunk_633", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_635", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Updating a slider with a default value", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Updating a slider with a default value", "content": "Updating a slider with a default value For the last two sliders above, a change to the min or max value will result in the widgets being seen as \"new\" and thus recreated like before. Since a default value of 5 is defined, each widget will reset to 5 whenever the min or max is changed. This is again the same (with or without a key). A solution to Retain statefulness when changing a widget's parameters is provided further on.", "prev_chunk_id": "chunk_634", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_636", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Widgets do not persist when not continually rendered", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Widgets do not persist when not continually rendered", "content": "Widgets do not persist when not continually rendered If a widget's function is not called during a script run, then none of its parts will be retained, including its value in st.session_state. If a widget has a key and you navigate away from that widget, its key and associated value in st.session_state will be deleted. Even temporarily hiding a widget will cause it to reset when it reappears; Streamlit will treat it like a new widget. You can either interrupt the Widget clean-up process (described at the end of this page) or save the value to another key.", "prev_chunk_id": "chunk_635", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_637", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Save widget values in Session State to preserve them between pages", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Save widget values in Session State to preserve them between pages", "content": "Save widget values in Session State to preserve them between pages If you want to navigate away from a widget and return to it while keeping its value, use a separate key in st.session_state to save the information independently from the widget. In this example, a temporary key is used with a widget. The temporary key uses an underscore prefix. Hence, \"_my_key\" is used as the widget key, but the data is copied to \"my_key\" to preserve it between pages. If this is functionalized to work with multiple widgets, it could look something like this:", "prev_chunk_id": "chunk_636", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_638", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Widget life cycle", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Widget life cycle", "content": "Widget life cycle When a widget function is called, Streamlit will check if it already has a widget with the same parameters. Streamlit will reconnect if it thinks the widget already exists. Otherwise, it will make a new one. As mentioned earlier, Streamlit determines a widget's ID based on parameters such as label, min or max value, default value, placeholder text, help text, and key. The page name also factors into a widget's ID. On the other hand, callback functions, callback args and kwargs, label visibility, and disabling a widget do not affect a widget's identity.", "prev_chunk_id": "chunk_637", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_639", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Calling a widget function when the widget doesn't already exist", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Calling a widget function when the widget doesn't already exist", "content": "Calling a widget function when the widget doesn't already exist If your script rerun calls a widget function with changed parameters or calls a widget function that wasn't used on the last script run: - Streamlit will build the frontend and backend parts of the widget, using its default value. - If the widget has been assigned a key, Streamlit will check if that key already exists in Session State.a. If it exists and is not currently associated with another widget, Streamlit will assign that key's value to the widget. b. Otherwise, it will assign the default value to the key inst.session_state(creating a new key-value pair or overwriting an existing one). - If there are args or kwargs for a callback function, they are computed and saved at this point in time. - The widget value is then returned by the function. Step 2 can be tricky. If you have a widget: and you change it on a page rerun to: Streamlit will see that as a new widget because of the label change. The key \"A\" will be considered part of the widget labeled \"Alpha\" and will not be attached as-is to the new widget labeled \"Beta\". Streamlit will destroy st.session_state.A and recreate it with the default value. If a widget attaches to a pre-existing key when created and is also manually assigned a default value, you will get a warning if there is a disparity. If you want to control a widget's value through st.session_state, initialize the widget's value through st.session_state and avoid the default value argument to prevent conflict.", "prev_chunk_id": "chunk_638", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_640", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Calling a widget function when the widget already exists", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Calling a widget function when the widget already exists", "content": "Calling a widget function when the widget already exists When rerunning a script without changing a widget's parameters: - Streamlit will connect to the existing frontend and backend parts. - If the widget has a key that was deleted fromst.session_state, then Streamlit will recreate the key using the current frontend value. (e.g Deleting a key will not revert the widget to a default value.) - It will return the current value of the widget.", "prev_chunk_id": "chunk_639", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_641", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Widget clean-up process", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Widget clean-up process", "content": "Widget clean-up process When Streamlit gets to the end of a script run, it will delete the data for any widgets it has in memory that were not rendered on the screen. Most importantly, that means Streamlit will delete all key-value pairs in st.session_state associated with a widget not currently on screen.", "prev_chunk_id": "chunk_640", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_642", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Additional examples", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Additional examples", "content": "Additional examples As promised, let's address how to retain the statefulness of widgets when changing pages or modifying their parameters. There are two ways to do this. - Use dummy keys to duplicate widget values inst.session_stateand protect the data from being deleted along with the widget. - Interrupt the widget clean-up process. The first method was shown above in Save widget values in Session State to preserve them between pages", "prev_chunk_id": "chunk_641", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_643", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Interrupting the widget clean-up process", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Interrupting the widget clean-up process", "content": "Interrupting the widget clean-up process To retain information for a widget with key=\"my_key\", just add this to the top of every page: When you manually save data to a key in st.session_state, it will become detached from any widget as far as the clean-up process is concerned. If you navigate away from a widget with some key \"my_key\" and save data to st.session_state.my_key on the new page, you will interrupt the widget clean-up process and prevent the key-value pair from being deleted or overwritten if another widget with the same key exists.", "prev_chunk_id": "chunk_642", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_644", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Retain statefulness when changing a widget's parameters", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Retain statefulness when changing a widget's parameters", "content": "Retain statefulness when changing a widget's parameters Here is a solution to our earlier example of changing a slider's min and max values. This solution interrupts the clean-up process as described above. The update_value() helper function is actually doing two things. On the surface, it's making sure there are no inconsistent changes to the parameters values as described. Importantly, it's also interrupting the widget clean-up process. When the min or max value of the widget changes, Streamlit sees it as a new widget on rerun. Without saving a value to st.session_state.a, the value would be thrown out and replaced by the \"new\" widget's default value.", "prev_chunk_id": "chunk_643", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_645", "url": "https://docs.streamlit.io/develop/concepts/architecture/widget-behavior", "title": "Still have questions?", "page_title": "Widget behavior - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_644", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_646", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Working with fragments", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Working with fragments", "content": "Working with fragments Reruns are a central part of every Streamlit app. When users interact with widgets, your script reruns from top to bottom, and your app's frontend is updated. Streamlit provides several features to help you develop your app within this execution model. Streamlit version 1.37.0 introduced fragments to allow rerunning a portion of your code instead of your full script. As your app grows larger and more complex, these fragment reruns help your app be efficient and performant. Fragments give you finer, easy-to-understand control over your app's execution flow. Before you read about fragments, we recommend having a basic understanding of caching, Session State, and forms.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_647", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Use cases for fragments", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Use cases for fragments", "content": "Use cases for fragments Fragments are versatile and applicable to a wide variety of circumstances. Here are just a few, common scenarios where fragments are useful: - Your app has multiple visualizations and each one takes time to load, but you have a filter input that only updates one of them. - You have a dynamic form that doesn't need to update the rest of your app (until the form is complete). - You want to automatically update a single component or group of components to stream data.", "prev_chunk_id": "chunk_646", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_648", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Defining and calling a fragment", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Defining and calling a fragment", "content": "Defining and calling a fragment Streamlit provides a decorator (st.fragment) to turn any function into a fragment function. When you call a fragment function that contains a widget function, a user triggers a fragment rerun instead of a full rerun when they interact with that fragment's widget. During a fragment rerun, only your fragment function is re-executed. Anything within the main body of your fragment is updated on the frontend, while the rest of your app remains the same. We'll describe fragments written across multiple containers later on. Here is a basic example of defining and calling a fragment function. Just like with caching, remember to call your function after defining it. If you want the main body of your fragment to appear in the sidebar or another container, call your fragment function inside a context manager.", "prev_chunk_id": "chunk_647", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_649", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Fragment execution flow", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Fragment execution flow", "content": "Fragment execution flow Consider the following code with the explanation and diagram below. When a user interacts with an input widget inside a fragment, only the fragment reruns instead of the full script. When a user interacts with an input widget outside a fragment, the full script reruns as usual. If you run the code above, the full script will run top to bottom on your app's initial load. If you flip the toggle button in your running app, the first fragment (toggle_and_text()) will rerun, redrawing the toggle and text area while leaving everything else unchanged. If you click the checkbox, the second fragment (filter_and_file()) will rerun and consequently redraw the checkbox and file uploader. Everything else remains unchanged. Finally, if you click the update button, the full script will rerun, and Streamlit will redraw everything.", "prev_chunk_id": "chunk_648", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_650", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Fragment return values and interacting with the rest of your app", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Fragment return values and interacting with the rest of your app", "content": "Fragment return values and interacting with the rest of your app Streamlit ignores fragment return values during fragment reruns, so defining return values for your fragment functions is not recommended. Instead, if your fragment needs to share data with the rest of your app, use Session State. Fragments are just functions in your script, so they can access Session State, imported modules, and other Streamlit elements like containers. If your fragment writes to any container created outside of itself, note the following difference in behavior: - Elements drawn in the main body of your fragment are cleared and redrawn in place during a fragment rerun. Repeated fragment reruns will not cause additional elements to appear. - Elements drawn to containers outside the main body of fragment will not be cleared with each fragment rerun. Instead, Streamlit will draw them additively and these elements will accumulate until the next full-script rerun. - A fragment can't draw widgets in containers outside of the main body of the fragment. Widgets can only go in the main body of a fragment. To prevent elements from accumulating in outside containers, use st.empty containers. For a related tutorial, see Create a fragment across multiple containers. If you need to trigger a full-script rerun from inside a fragment, call st.rerun. For a related tutorial, see Trigger a full-script rerun from inside a fragment.", "prev_chunk_id": "chunk_649", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_651", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Automate fragment reruns", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Automate fragment reruns", "content": "Automate fragment reruns st.fragment includes a convenient run_every parameter that causes the fragment to rerun automatically at the specified time interval. These reruns are in addition to any reruns (fragment or full-script) triggered by your user. The automatic fragment reruns will continue even if your user is not interacting with your app. This is a great way to show a live data stream or status on a running background job, efficiently updating your rendered data and only your rendered data. For a related tutorial, see Start and stop a streaming fragment.", "prev_chunk_id": "chunk_650", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_652", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Fragments vs forms", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Fragments vs forms", "content": "Fragments vs forms Here is a comparison between fragments and forms: - Formsallow users to interact with widgets without rerunning your app. Streamlit does not send user actions within a form to your app's Python backend until the form is submitted. Widgets within a form can not dynamically update other widgets (in or out of the form) in real-time. - Fragmentsrun independently from the rest of your code. As your users interact with fragment widgets, their actions are immediately processed by your app's Python backend and your fragment code is rerun. Widgets within a fragment can dynamically update other widgets within the same fragment in real-time. A form batches user input without interaction between any widgets. A fragment immediately processes user input but limits the scope of the rerun.", "prev_chunk_id": "chunk_651", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_653", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Fragments vs callbacks", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Fragments vs callbacks", "content": "Fragments vs callbacks Here is a comparison between fragments and callbacks: - Callbacksallow you to execute a function at the beginning of a script rerun. A callback is asingle prefixto your script rerun. - Fragmentsallow you to rerun a portion of your script. A fragment is arepeatable postfixto your script, running each time a user interacts with a fragment widget, or automatically in sequence whenrun_everyis set. When callbacks render elements to your page, they are rendered before the rest of your page elements. When fragments render elements to your page, they are updated with each fragment rerun (unless they are written to containers outside of the fragment, in which case they accumulate there).", "prev_chunk_id": "chunk_652", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_654", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Fragments vs custom components", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Fragments vs custom components", "content": "Fragments vs custom components Here is a comparison between fragments and custom components: - Componentsare custom frontend code that can interact with the Python code, native elements, and widgets in your Streamlit app. Custom components extend what’s possible with Streamlit. They follow the normal Streamlit execution flow. - Fragmentsare parts of your app that can rerun independently of the full app. Fragments can be composed of multiple Streamlit elements, widgets, or any Python code. A fragment can include one or more custom components. A custom component could not easily include a fragment!", "prev_chunk_id": "chunk_653", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_655", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Fragments vs caching", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Fragments vs caching", "content": "Fragments vs caching Here is a comparison between fragments and caching: - Caching:allows you to skip over a function and return a previously computed value. When you use caching, you execute everything except the cached function (if you've already run it before). - Fragments:allow you to freeze most of your app and just execute the fragment. When you use fragments, you execute only the fragment (when triggering a fragment rerun). Caching saves you from unnecessarily running a piece of your app while the rest runs. Fragments save you from running your full app when you only want to run one piece.", "prev_chunk_id": "chunk_654", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_656", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Limitations and unsupported behavior", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Limitations and unsupported behavior", "content": "Limitations and unsupported behavior - Fragments can't detect a change in input values. It is best to use Session State for dynamic input and output for fragment functions. - Using caching and fragments on the same function is unsupported. - Fragments can't render widgets in externally-created containers; widgets can only be in the main body of a fragment.", "prev_chunk_id": "chunk_655", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_657", "url": "https://docs.streamlit.io/develop/concepts/architecture/fragments", "title": "Still have questions?", "page_title": "Working with fragments - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_656", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_658", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Use externally hosted fonts and fallbacks to customize your font", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Use externally hosted fonts and fallbacks to customize your font", "content": "Use externally hosted fonts and fallbacks to customize your font Streamlit comes with Source Sans as the default font, but you can configure your app to use another font. This tutorial uses variable font files and is a walkthrough of Example 3 from Customize fonts in your Streamlit app. For an example that uses self-hosted variable font files, see Use variable font files to customize your font. For an example that uses self-hosted static font files, see Use static font files to customize your font.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_659", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Prerequisites", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.46.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding of working with font files in web development. Otherwise, start by readingCustomize fonts in your Streamlit appup to Example 3.", "prev_chunk_id": "chunk_658", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_660", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Summary", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary The following example uses a Google-hosted instances of Nunito and Space Mono. Nunito is defined in variable font files. However, because font style is not parameterized, Nunito requires two files to define the normal and italic styles separately. Space Mono is defined in static font files. Here's a look at what you'll build:", "prev_chunk_id": "chunk_659", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_661", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Collect your font file URLs", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Collect your font file URLs", "content": "Collect your font file URLs - Go toGoogle fonts. - Search for or follow the link toNunito, and select \"Get font.\" - Search for or follow the link toSpace Mono, and select \"Get font.\" - To get a link to a style sheet for your font files, in the upper-right corner, select the shopping bag (shopping_bag), and then select \"codeGet embed code.\" - On the right, in the first code block, copy thehrefURL from the third link, and paste it into a new tab.By default, the \"Embed Code\" page loads with the \"Web\" tab and \"<link>\" radio option selected. The first code block is titled, \"Embed code in the <head> of your html.\" The URL is a link to a style sheet and should look like the following text:https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap - Go to your new tab and visit the URL.This page is a style sheet. It is filled with font-face declarations that look like the following text:/* cyrillic-ext */ @font-face { font-family: \"Nunito\"; font-style: italic; font-weight: 200 1000; font-display: swap; src: url(https://fonts.gstatic.com/s/nunito/v31/XRXX3I6Li01BKofIMNaORs7nczIHNHI.woff2) format(\"woff2\"); unicode-range: U+0460-052F, U+1C80-1C8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }Each font-face declaration starts with a comment to indication which character set is included in that declaration. For most English apps, only the/* latin */declarations are needed. - To store the portion of the style sheet you'll need in later steps, copy the font-face declarations that are prefixed with the/* latin */comment, and paste them into a text file.", "prev_chunk_id": "chunk_660", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_662", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Create your app configuration", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Create your app configuration", "content": "Create your app configuration - Inyour_repository/, create a.streamlit/config.tomlfile:your_repository/ └── .streamlit/ └── config.toml - To define your alternative fonts, in.streamlit/config.toml, paste each@font-facedeclaration, and change each one into a[[theme.fontFaces]]table.The following values in each@font-facedeclaration become the indicated value in a[[theme.fontFaces]]table:font-family→familysrc: url→url(Ignoreformat, and just keep the URL.)font-style→stylefont-weight→weightOptional:unicode-range→unicodeRange(This is only useful if you are using more than basic latin sets.)Remember to remove the comment lines and CSS syntax characters, which aren't compatible with TOML files. Your configuration file should contain the following text:[[theme.fontFaces]] family=\"Nunito\" url=\"https://fonts.gstatic.com/s/nunito/v31/XRXX3I6Li01BKofIMNaDRs7nczIH.woff2\" style=\"italic\" weight=\"200 1000\" [[theme.fontFaces]] family=\"Nunito\" url=\"https://fonts.gstatic.com/s/nunito/v31/XRXV3I6Li01BKofINeaBTMnFcQ.woff2\" style=\"normal\" weight=\"200 1000\" [[theme.fontFaces]] family=\"Space Mono\" url=\"https://fonts.gstatic.com/s/spacemono/v17/i7dNIFZifjKcF5UAWdDRYERMR3K_MQacbw.woff2\" style=\"italic\" weight=\"400\" [[theme.fontFaces]] family=\"Space Mono\" url=\"https://fonts.gstatic.com/s/spacemono/v17/i7dPIFZifjKcF5UAWdDRYEF8RXi4EwQ.woff2\" style=\"normal\" weight=\"400\" [[theme.fontFaces]] family=\"Space Mono\" url=\"https://fonts.gstatic.com/s/spacemono/v17/i7dSIFZifjKcF5UAWdDRYERE_FeqHCSRRXaPYw.woff2\" style=\"italic\" weight=\"700\" [[theme.fontFaces]] family=\"Space Mono\" url=\"https://fonts.gstatic.com/s/spacemono/v17/i7dMIFZifjKcF5UAWdDRaPpZUFWaHi6WZ3Q.woff2\" style=\"normal\" weight=\"700\"The[[theme.fontFaces]]table can be repeated to use multiple files to define a single font or to define multiple fonts. In this example, the definitions make\"Nunito\"and\"Space Mono\"available to other font configuration options. - To set your alternative fonts as the default font for your app, in.streamlit/config.toml, add the following text:[theme] font=\"Nunito, sans-serif\" codeFont=\"'Space Mono', monospace\"This sets Nunito as the default for all text in your app except inline code and code blocks, which will be Space Mono instead. If Google's font service is unavailable, the app will fall back to the indicated built-in fonts. Because there is a space in \"Space Mono\", the configuration option needs an inner quote on that family. If you want to avoid inner quotes, you can use hyphens or underscores in your font family declarations.", "prev_chunk_id": "chunk_661", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_663", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Build the example", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Build the example", "content": "Build the example To verify that your font is loaded correctly, create a simple app.", "prev_chunk_id": "chunk_662", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_664", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Initialize your app", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - In your_repository, create a file namedstreamlit_app.py. - In a terminal, change directories to your_repository, and start your app:streamlit run streamlit_app.pyYour app will be blank because you still need to add code. - Instreamlit_app.py, write the following:import streamlit as st - Save yourstreamlit_app.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes tostreamlit_app.py. - Return to your code.", "prev_chunk_id": "chunk_663", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_665", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Display some text in your app", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Display some text in your app", "content": "Display some text in your app - Create astreamlit_app.pyfile in your working directory. - Instreamlit_app.py, add the following text:import streamlit as st st.write(\"Normal efg\") st.write(\"*Italic efg*\") st.write(\"**Bold efg**\") st.write(\"***Bold-italic efg***\") st.write(\"`Code normal efg`\") st.write(\"*`Code italic efg`*\") st.write(\"**`Code bold efg`**\") st.write(\"***`Code bold-italic efg`***\")The example includes \"efg\" in each line to better show the typographical differences when you run your app. In Space Mono, the italic \"f\" descends below baseline, but the normal \"f\" doesn't. Space Mono also has different serifs on its normal and italic \"l.\" - Save yourstreamlit_app.pyfile, and view your running app.", "prev_chunk_id": "chunk_664", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_666", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/external-fonts", "title": "Still have questions?", "page_title": "Use externally hosted fonts and fallbacks to customize your font - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_665", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_667", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Use static font files to customize your font", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Use static font files to customize your font", "content": "Use static font files to customize your font Streamlit comes with Source Sans as the default font, but you can configure your app to use another font. This tutorial uses static font files and is a walkthrough of Example 2 from Customize fonts in your Streamlit app. For an example that uses variable font files, see Use variable font files to customize your font.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_668", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Prerequisites", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.45.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding ofstatic file serving. - You should have a basic understanding of working with font files in web development. Otherwise, start by readingCustomize fonts in your Streamlit appup to Example 2.", "prev_chunk_id": "chunk_667", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_669", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Summary", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary The following example uses Tuffy font. The font has four static font files which cover the four following weight-style pairs: - normal normal - normal bold - italic normal - italic bold Here's a look at what you'll build:", "prev_chunk_id": "chunk_668", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_670", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Download and save your font files", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Download and save your font files", "content": "Download and save your font files - Go toGoogle fonts. - Search for or follow the link toTuffy, and select \"Get font.\" - To download your font files, in the upper-right corner, select the shopping bag (shopping_bag), and then select \"downloadDownload all.\" - In your downloads directory, unzip the downloaded file. - From the unzipped files, copy and save the TTF font files into astatic/directory inyour_repository/.Copy the following files:Tuffy/ ├── Tuffy-Bold.ttf ├── Tuffy-BoldItalic.ttf ├── Tuffy-Italic.ttf └── Tuffy-Regular.ttfSave those files in your repository:your_repository/ └── static/ ├── Tuffy-Bold.ttf ├── Tuffy-BoldItalic.ttf ├── Tuffy-Italic.ttf └── Tuffy-Regular.ttf", "prev_chunk_id": "chunk_669", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_671", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Create your app configuration", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Create your app configuration", "content": "Create your app configuration - Inyour_repository/, create a.streamlit/config.tomlfile:your_repository/ ├── .streamlit/ │ └── config.toml └── static/ ├── Tuffy-Bold.ttf ├── Tuffy-BoldItalic.ttf ├── Tuffy-Italic.ttf └── Tuffy-Regular.ttf - To enable static file serving, in.streamlit/config.toml, add the following text:[server] enableStaticServing = trueThis makes the files in yourstatic/directory publicly available through your app's URL at the relative pathapp/static/{filename}. - To define your alternative fonts, in.streamlit/config.toml, add the following text:[[theme.fontFaces]] family=\"tuffy\" url=\"app/static/Tuffy-Regular.ttf\" style=\"normal\" weight=400 [[theme.fontFaces]] family=\"tuffy\" url=\"app/static/Tuffy-Bold.ttf\" style=\"normal\" weight=700 [[theme.fontFaces]] family=\"tuffy\" url=\"app/static/Tuffy-Italic.ttf\" style=\"italic\" weight=400 [[theme.fontFaces]] family=\"tuffy\" url=\"app/static/Tuffy-BoldItalic.ttf\" style=\"italic\" weight=700The[[theme.fontFaces]]table can be repeated to use multiple files to define a single font or to define multiple fonts. In this example, the definitions make\"tuffy\"available to other font configuration options.starTipFor convenience, avoid spaces in your font family names. When you declare the default font, you can also declare fallback fonts. If you avoid spaces in your font family names, you don't need inner quotes. - To set your alternative fonts as the default font for your app, in.streamlit/config.toml, add the following text:[theme] font=\"tuffy\"This sets Tuffy as the default for all text in your app except inline code and code blocks.", "prev_chunk_id": "chunk_670", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_672", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Build the example", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Build the example", "content": "Build the example To verify that your font is loaded correctly, create a simple app.", "prev_chunk_id": "chunk_671", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_673", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Initialize your app", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - In your_repository, create a file namedstreamlit_app.py. - In a terminal, change directories to your_repository, and start your app:streamlit run streamlit_app.pyYour app will be blank because you still need to add code. - Instreamlit_app.py, write the following:import streamlit as st - Save yourstreamlit_app.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes tostreamlit_app.py. - Return to your code.", "prev_chunk_id": "chunk_672", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_674", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Display some text in your app", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Display some text in your app", "content": "Display some text in your app - Create astreamlit_app.pyfile in your working directory. - Instreamlit_app.py, add the following text:import streamlit as st st.write(\"Normal ABCabc123\") st.write(\"*Italic ABCabc123*\") st.write(\"**Bold ABCabc123**\") st.write(\"***Bold-italic ABCabc123***\") st.write(\"`Code ABCabc123`\") - Save yourstreamlit_app.pyfile, and view your running app.", "prev_chunk_id": "chunk_673", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_675", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/static-fonts", "title": "Still have questions?", "page_title": "Use static font files to customize your font - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_674", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_676", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Use variable font files to customize your font", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Use variable font files to customize your font", "content": "Use variable font files to customize your font Streamlit comes with Source Sans as the default font, but you can configure your app to use another font. This tutorial uses variable font files and is a walkthrough of Example 1 from Customize fonts in your Streamlit app. For an example that uses static font files, see Use static font files to customize your font.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_677", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Prerequisites", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.45.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding ofstatic file serving. - You should have a basic understanding of working with font files in web development. Otherwise, start by readingCustomize fonts in your Streamlit appup to Example 1.", "prev_chunk_id": "chunk_676", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_678", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Summary", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary The following example uses static file serving to host Google's Noto Sans and Noto Sans Mono fonts and configures the app to use them. Both of these fonts are defined with variable font files that include a parameterized weight. However, because font style is not parameterized, Noto Sans requires two files to define the normal and italic styles separately. Noto Sans Mono does not include a separate file for its italic style. Per CSS rules, because no italic style is explicitly provided, it will be simulated by skewing the normal-style font. Here's a look at what you'll build:", "prev_chunk_id": "chunk_677", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_679", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Download and save your font files", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Download and save your font files", "content": "Download and save your font files - Go toGoogle fonts. - Search for or follow the link toNoto Sans, and select \"Get font.\" - Search for or follow the link toNoto Sans Mono, and select \"Get font.\" - To download your font files, in the upper-right corner, select the shopping bag (shopping_bag), and then select \"downloadDownload all.\" - In your downloads directory, unzip the downloaded file. - From the unzipped files, copy and save the TTF font files into astatic/directory inyour_repository/.Copy the following files:Noto_Sans,Noto_Sans_Mono/ ├── Noto_Sans_Mono/ │ └── NotoSansMono-VariableFont_wdth,wght.ttf └── Noto_Sans/ ├── NotoSans-Italic-VariableFont_wdth,wght.ttf └── NotoSans-VariableFont_wdth,wght.ttfSave those files in your repository:your_repository/ └── static/ ├── NotoSans-Italic-VariableFont_wdth,wght.ttf ├── NotoSans-VariableFont_wdth,wght.ttf └── NotoSansMono-VariableFont_wdth,wght.ttfIn this example, the font files areNotoSans-Italic-VariableFont_wdth,wght.ttfandNotoSansMono-VariableFont_wdth,wght.ttffor Noto Sans italic and normal font, respectively.NotoSansMono-VariableFont_wdth,wght.ttfis the file for Noto Sans Mono.", "prev_chunk_id": "chunk_678", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_680", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Create your app configuration", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Create your app configuration", "content": "Create your app configuration - Inyour_repository/, create a.streamlit/config.tomlfile:your_repository/ ├── .streamlit/ │ └── config.toml └── static/ ├── NotoSans-Italic-VariableFont_wdth,wght.ttf ├── NotoSans-VariableFont_wdth,wght.ttf └── NotoSansMono-VariableFont_wdth,wght.ttf - To enable static file serving, in.streamlit/config.toml, add the following text:[server] enableStaticServing = trueThis makes the files in yourstatic/directory publicly available through your app's URL at the relative pathapp/static/{filename}. - To define your alternative fonts, in.streamlit/config.toml, add the following text:[[theme.fontFaces]] family=\"noto-sans\" url=\"app/static/NotoSans-Italic-VariableFont_wdth,wght.ttf\" style=\"italic\" [[theme.fontFaces]] family=\"noto-sans\" url=\"app/static/NotoSans-VariableFont_wdth,wght.ttf\" style=\"normal\" [[theme.fontFaces]] family=\"noto-mono\" url=\"app/static/NotoSansMono-VariableFont_wdth,wght.ttf\"The[[theme.fontFaces]]table can be repeated to use multiple files to define a single font or to define multiple fonts. In this example, the definitions make\"noto-sans\"and\"noto-mono\"available to other font configuration options.starTipFor convenience, avoid spaces in your font family names. When you declare the default font, you can also declare fallback fonts. If you avoid spaces in your font family names, you don't need inner quotes. - To set your alternative fonts as the default font for your app, in.streamlit/config.toml, add the following text:[theme] font=\"noto-sans\" codeFont=\"noto-mono\"This sets Noto Sans as the default for all text in your app except inline code and code blocks, which will be Noto Sans Mono instead.", "prev_chunk_id": "chunk_679", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_681", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Build the example", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Build the example", "content": "Build the example To verify that your font is loaded correctly, create a simple app.", "prev_chunk_id": "chunk_680", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_682", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Initialize your app", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - In your_repository, create a file namedstreamlit_app.py. - In a terminal, change directories to your_repository, and start your app:streamlit run streamlit_app.pyYour app will be blank because you still need to add code. - Instreamlit_app.py, write the following:import streamlit as st - Save yourstreamlit_app.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes tostreamlit_app.py. - Return to your code.", "prev_chunk_id": "chunk_681", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_683", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Display some text in your app", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Display some text in your app", "content": "Display some text in your app - Create astreamlit_app.pyfile in your working directory. - Instreamlit_app.py, add the following text:import streamlit as st st.write(\"Normal efg\") st.write(\"*Italic efg*\") st.write(\"**Bold efg**\") st.write(\"***Bold-italic efg***\") st.write(\"`Code normal efg`\") st.write(\"*`Code italic efg`*\") st.write(\"**`Code bold efg`**\") st.write(\"***`Code bold-italic efg`***\")The example includes \"efg\" in each line to better show the typographical differences when you run your app. The italic \"f\" descends below baseline, but the normal \"f\" doesn't. The italic \"e\" has a rounded front, but the normal \"e\" has a sharp corner. - Save yourstreamlit_app.pyfile, and view your running app.", "prev_chunk_id": "chunk_682", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_684", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming/variable-fonts", "title": "Still have questions?", "page_title": "Use variable font files to customize your font - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_683", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_685", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.experimentalbaseconnection", "title": "Still have questions?", "page_title": "st.connections.ExperimentalBaseConnection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_686", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "User authentication and information", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "User authentication and information", "content": "User authentication and information Personalizing your app for your users is a great way to make your app more engaging. User authentication and personalization unlocks a plethora of use cases for developers, including controls for admins, a personalized stock ticker, or a chatbot app with a saved history between sessions. Before reading this guide, you should have a basic understanding of secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_687", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "OpenID Connect", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "OpenID Connect", "content": "OpenID Connect Streamlit supports user authentication with OpenID Connect (OIDC), which is an authentication protocol built on top of OAuth 2.0. OIDC supports authentication, but not authorization: that is, OIDC connections tell you who a user is (authentication), but don't give you the authority to impersonate them (authorization). If you need to connect with a generic OAuth 2.0 provider or have your app to act on behalf of a user, consider using or creating a custom component. Some popular OIDC providers are: - Google Identity - Microsoft Entra ID - Okta - Auth0", "prev_chunk_id": "chunk_686", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_688", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "st.login(), st.user, and st.logout()", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "st.login(), st.user, and st.logout()", "content": "st.login(), st.user, and st.logout() There are three commands involved with user authentication: - st.login()redirects the user to your identity provider. After they log in, Streamlit stores an identity cookie and then redirects them to the homepage of your app in a new session. - st.useris a dict-like object for accessing user information. It has a persistent attribute,.is_logged_in, which you can check for the user's login status. When they are logged in, other attributes are available per your identity provider's configuration. - st.logout()removes the identity cookie from the user's browser and redirects them to the homepage of your app in a new session.", "prev_chunk_id": "chunk_687", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_689", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "User cookies and logging out", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "User cookies and logging out", "content": "User cookies and logging out Streamlit checks for the identity cookie at the beginning of each new session. If a user logs in to your app in one tab and then opens a new tab, they will automatically be logged in to your app in the new tab. When you call st.logout() in a user session, Streamlit removes the identity cookie and starts a new session. This logs the user out from the current session. However, if they were logged in to other sessions already, they will remain logged in within those sessions. The information in st.user is updated at the beginning of a session (which is why st.login() and st.logout() both start new sessions after saving or deleting the identity cookie). If a user closes your app without logging out, the identity cookie will expire after 30 days. This expiration time is not configurable and is not tied to any expiration time that may be returned in your user's identity token. If you need to prevent persistent authentication in your app, check the expiration information returned by the identity provider in st.user and manually call st.logout() when needed. Streamlit does not modify or delete any cookies saved directly by your identity provider. For example, if you use Google as your identity provider and a user logs in to your app with Google, they will remain logged in to their Google account after they log out of your app with st.logout().", "prev_chunk_id": "chunk_688", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_690", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "Setting up an identity provider", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "Setting up an identity provider", "content": "Setting up an identity provider In order to use an identity provider, you must first configure your identity provider through an admin account. This typically involves setting up a client or application within the identity provider's system. Follow the documentation for your identity provider. As a general overview, an identity-provider client typically does the following: - Manages the list of your users. - Optional: Allows users to add themselves to your user list. - Declares the set of attributes passed from each user account to the client (which is then passed to your Streamlit app). - Only allows authentication requests to come from your Streamlit app. - Redirects users back to your Streamlit app after they authenticate. To configure your app, you'll need the following: - Your app's URL For example, usehttp://localhost:8501for most local development cases. - A redirect URL, which is your app's URL with the pathnameoauth2callbackFor example,http://localhost:8501/oauth2callbackfor most local development cases. - A cookie secret, which should be a strong, randomly generated string After you use this information to configure your identity-provider client, you'll receive the following information from your identity provider: - Client ID - Client secret - Server metadata URL Examples for popular OIDC provider configurations are listed in the API reference for st.login().", "prev_chunk_id": "chunk_689", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_691", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "Configure your OIDC connection in Streamlit", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "Configure your OIDC connection in Streamlit", "content": "Configure your OIDC connection in Streamlit After you've configured your identity-provider client, you'll need to configure your Streamlit app, too. st.login() uses your app's secrets.toml file to configure your connection, similar to how st.connection() works. Whether you have one OIDC provider or many, you'll need to have an [auth] dictionary in secrets.toml. You must declare redirect_uri and cookie_secret in the [auth] dictionary. These two values are shared between all OIDC providers in your app. If you are only using one OIDC provider, you can put the remaining three properties (client_id, client_secret, and server_metadata_url) in [auth]. However, if you are using multiple providers, they should each have a unique name so you can declare their unique values in their own dictionaries. For example, if you name your connections \"connection_1\" and \"connection_2\", put their remaining properties in dictionaries named [auth.connection_1] and [auth.connection_2], respectively.", "prev_chunk_id": "chunk_690", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_692", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "A simple example", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "A simple example", "content": "A simple example If you use Google Identity as your identity provider, a basic configuration for local development will look like the following TOML file: .streamlit/secrets.toml: Make sure the port in redirect_uri matches the port you are using. The cookie_secret should be a strong, randomly generated secret. Both the redirect_uri and cookie_secret should have been entered into your client configuration on Google Cloud. You must copy the client_id and client_secret from Google Cloud after you create your client. For some identity providers, server_metadata_url may be unique to your client. However, for Google Cloud, a single URL is shared for OIDC clients. In your app, create a simple login flow: When you use st.stop(), your script run ends as soon as the login button is displayed. This lets you avoid nesting your entire page within a conditional block. Additionally, you can use callbacks to simplify the code further:", "prev_chunk_id": "chunk_691", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_693", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "Using multiple OIDC providers", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "Using multiple OIDC providers", "content": "Using multiple OIDC providers If you use more than one OIDC provider, you'll need to declare a unique name for each. If you want to use Google Identity and Microsoft Entra ID as two providers for the same app, your configuration for local development will look like the following TOML file: .streamlit/secrets.toml: Microsoft's server metadata URL varies slightly depending on how your client is scoped. Replace {tenant} with the appropriate value described in Microsoft's documentation for OpenID configuration. Your app code: Using callbacks, this would look like:", "prev_chunk_id": "chunk_692", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_694", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "Passing keywords to your identity provider", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "Passing keywords to your identity provider", "content": "Passing keywords to your identity provider To customize the behavior of your identity provider, you may need to declare additional keywords. For a complete list of OIDC parameters, see OpenID Connect Core and your provider's documentation. By default, Streamlit sets scope=\"openid profile email\" and prompt=\"select_account\". You can change these and other OIDC parameters by passing a dictionary of settings to client_kwargs. state and nonce, which are used for security, are handled automatically and don't need to be specified. For example,if you are using Auth0 and need to force users to log in every time, use prompt=\"login\" as described in Auth0's Customize Signup and Login Prompts. Your configuration will look like this:", "prev_chunk_id": "chunk_693", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_695", "url": "https://docs.streamlit.io/develop/concepts/connections/authentication", "title": "Still have questions?", "page_title": "User authentication and information - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_694", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_696", "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management", "title": "Secrets management", "page_title": "Secrets management - Streamlit Docs", "breadcrumbs": "Secrets management", "content": "Secrets management Storing unencrypted secrets in a git repository is a bad practice. For applications that require access to sensitive credentials, the recommended solution is to store those credentials outside the repository - such as using a credentials file not committed to the repository or passing them as environment variables. Streamlit provides native file-based secrets management to easily store and securely access your secrets in your Streamlit app. Streamlit provides two ways to set up secrets locally using TOML format: - In aglobal secrets fileat~/.streamlit/secrets.tomlfor macOS/Linux or%userprofile%/.streamlit/secrets.tomlfor Windows:# Everything in this section will be available as an environment variable db_username = \"Jane\" db_password = \"mypassword\" # You can also add other sections if you like. # The contents of sections as shown below will not become environment variables, # but they'll be easily accessible from within Streamlit anyway as we show # later in this doc. [my_other_secrets] things_i_like = [\"Streamlit\", \"Python\"]If you use the global secrets file, you don't have to duplicate secrets across several project-level files if multiple Streamlit apps share the same secrets. - In aper-project secrets fileat$CWD/.streamlit/secrets.toml, where$CWDis the folder you're running Streamlit from. If both a global secrets file and a per-project secrets file exist,secrets in the per-project file overwrite those defined in the global file. Access your secrets by querying the st.secrets dict, or as environment variables. For example, if you enter the secrets from the section above, the code below shows you how to access them within your Streamlit app. You can even compactly use TOML sections to pass multiple secrets as a single attribute. Consider the following secrets: Rather than passing each secret as attributes in a function, you can more compactly pass the section to achieve the same result. See the notional code below, which uses the secrets above: Here are some", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_697", "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management", "title": "Secrets management", "page_title": "Secrets management - Streamlit Docs", "breadcrumbs": "Secrets management", "content": "common errors you might encounter when using secrets management. - If a.streamlit/secrets.tomlis createdwhilethe app is running, the server needs to be restarted for changes to be reflected in the app. - If you try accessing a secret, but nosecrets.tomlfile exists, Streamlit will raise aFileNotFoundErrorexception: - If you try accessing a secret that doesn't exist, Streamlit will raise aKeyErrorexception:import streamlit as st st.write(st.secrets[\"nonexistent_key\"]) When you deploy your app to Streamlit Community Cloud, you can use the same secrets management workflow as you would locally. However, you'll need to also set up your secrets in the Community Cloud Secrets Management console. Learn how to do so via the Cloud-specific Secrets management documentation.", "prev_chunk_id": "chunk_696", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_698", "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management", "title": "Develop locally and set up secrets", "page_title": "Secrets management - Streamlit Docs", "breadcrumbs": "Develop locally and set up secrets", "content": "Develop locally and set up secrets Streamlit provides two ways to set up secrets locally using TOML format: - In aglobal secrets fileat~/.streamlit/secrets.tomlfor macOS/Linux or%userprofile%/.streamlit/secrets.tomlfor Windows:# Everything in this section will be available as an environment variable db_username = \"Jane\" db_password = \"mypassword\" # You can also add other sections if you like. # The contents of sections as shown below will not become environment variables, # but they'll be easily accessible from within Streamlit anyway as we show # later in this doc. [my_other_secrets] things_i_like = [\"Streamlit\", \"Python\"]If you use the global secrets file, you don't have to duplicate secrets across several project-level files if multiple Streamlit apps share the same secrets. - In aper-project secrets fileat$CWD/.streamlit/secrets.toml, where$CWDis the folder you're running Streamlit from. If both a global secrets file and a per-project secrets file exist,secrets in the per-project file overwrite those defined in the global file.", "prev_chunk_id": "chunk_697", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_699", "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management", "title": "Use secrets in your app", "page_title": "Secrets management - Streamlit Docs", "breadcrumbs": "Use secrets in your app", "content": "Use secrets in your app Access your secrets by querying the st.secrets dict, or as environment variables. For example, if you enter the secrets from the section above, the code below shows you how to access them within your Streamlit app. You can even compactly use TOML sections to pass multiple secrets as a single attribute. Consider the following secrets: Rather than passing each secret as attributes in a function, you can more compactly pass the section to achieve the same result. See the notional code below, which uses the secrets above:", "prev_chunk_id": "chunk_698", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_700", "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management", "title": "Error handling", "page_title": "Secrets management - Streamlit Docs", "breadcrumbs": "Error handling", "content": "Error handling Here are some common errors you might encounter when using secrets management. - If a.streamlit/secrets.tomlis createdwhilethe app is running, the server needs to be restarted for changes to be reflected in the app. - If you try accessing a secret, but nosecrets.tomlfile exists, Streamlit will raise aFileNotFoundErrorexception: - If you try accessing a secret that doesn't exist, Streamlit will raise aKeyErrorexception:import streamlit as st st.write(st.secrets[\"nonexistent_key\"])", "prev_chunk_id": "chunk_699", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_701", "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management", "title": "Use secrets on Streamlit Community Cloud", "page_title": "Secrets management - Streamlit Docs", "breadcrumbs": "Use secrets on Streamlit Community Cloud", "content": "Use secrets on Streamlit Community Cloud When you deploy your app to Streamlit Community Cloud, you can use the same secrets management workflow as you would locally. However, you'll need to also set up your secrets in the Community Cloud Secrets Management console. Learn how to do so via the Cloud-specific Secrets management documentation.", "prev_chunk_id": "chunk_700", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_702", "url": "https://docs.streamlit.io/develop/concepts/connections/secrets-management", "title": "Still have questions?", "page_title": "Secrets management - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_701", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_703", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Using forms", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Using forms", "content": "Using forms When you don't want to rerun your script with each input made by a user, st.form is here to help! Forms make it easy to batch user input into a single rerun. This guide to using forms provides examples and explains how users interact with forms.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_704", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Example", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Example", "content": "Example In the following example, a user can set multiple parameters to update the map. As the user changes the parameters, the script will not rerun and the map will not update. When the user submits the form with the button labeled \"Update map\", the script reruns and the map updates. If at any time the user clicks \"Generate new points\" which is outside of the form, the script will rerun. If the user has any unsubmitted changes within the form, these will not be sent with the rerun. All changes made to a form will only be sent to the Python backend when the form itself is submitted.", "prev_chunk_id": "chunk_703", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_705", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "User interaction", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "User interaction", "content": "User interaction If a widget is not in a form, that widget will trigger a script rerun whenever a user changes its value. For widgets with keyed input (st.number_input, st.text_input, st.text_area), a new value triggers a rerun when the user clicks or tabs out of the widget. A user can also submit a change by pressing Enter while their cursor is active in the widget. On the other hand if a widget is inside of a form, the script will not rerun when a user clicks or tabs out of that widget. For widgets inside a form, the script will rerun when the form is submitted and all widgets within the form will send their updated values to the Python backend. A user can submit a form using Enter on their keyboard if their cursor active in a widget that accepts keyed input. Within st.number_input and st.text_input a user presses Enter to submit the form. Within st.text_area a user presses Ctrl+Enter/⌘+Enter to submit the form.", "prev_chunk_id": "chunk_704", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_706", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Widget values", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Widget values", "content": "Widget values Before a form is submitted, all widgets within that form will have default values, just like widgets outside of a form have default values.", "prev_chunk_id": "chunk_705", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_707", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Forms are containers", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Forms are containers", "content": "Forms are containers When st.form is called, a container is created on the frontend. You can write to that container like you do with other container elements. That is, you can use Python's with statement as shown in the example above, or you can assign the form container to a variable and call methods on it directly. Additionally, you can place st.form_submit_button anywhere in the form container.", "prev_chunk_id": "chunk_706", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_708", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Processing form submissions", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Processing form submissions", "content": "Processing form submissions The purpose of a form is to override the default behavior of Streamlit which reruns a script as soon as the user makes a change. For widgets outside of a form, the logical flow is: - The user changes a widget's value on the frontend. - The widget's value inst.session_stateand in the Python backend (server) is updated. - The script rerun begins. - If the widget has a callback, it is executed as a prefix to the page rerun. - When the updated widget's function is executed during the rerun, it outputs the new value. For widgets inside a form, any changes made by a user (step 1) do not get passed to the Python backend (step 2) until the form is submitted. Furthermore, the only widget inside a form that can have a callback function is the st.form_submit_button. If you need to execute a process using newly submitted values, you have three major patterns for doing so.", "prev_chunk_id": "chunk_707", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_709", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Execute the process after the form", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Execute the process after the form", "content": "Execute the process after the form If you need to execute a one-time process as a result of a form submission, you can condition that process on the st.form_submit_button and execute it after the form. If you need results from your process to display above the form, you can use containers to control where the form displays relative to your output.", "prev_chunk_id": "chunk_708", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_710", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Use a callback with session state", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Use a callback with session state", "content": "Use a callback with session state You can use a callback to execute a process as a prefix to the script rerunning.", "prev_chunk_id": "chunk_709", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_711", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Use st.rerun", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Use st.rerun", "content": "Use st.rerun If your process affects content above your form, another alternative is using an extra rerun. This can be less resource-efficient though, and may be less desirable that the above options.", "prev_chunk_id": "chunk_710", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_712", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Limitations", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Limitations", "content": "Limitations - Every form must contain ast.form_submit_button. - st.buttonandst.download_buttoncannot be added to a form. - st.formcannot be embedded inside anotherst.form. - Callback functions can only be assigned tost.form_submit_buttonwithin a form; no other widgets in a form can have a callback. - Interdependent widgets within a form are unlikely to be particularly useful. If you passwidget1's value intowidget2when they are both inside a form, thenwidget2will only update when the form is submitted.", "prev_chunk_id": "chunk_711", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_713", "url": "https://docs.streamlit.io/develop/concepts/architecture/forms", "title": "Still have questions?", "page_title": "Using forms - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_712", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_714", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "Deploy your app on Community Cloud", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Deploy your app on Community Cloud", "content": "Deploy your app on Community Cloud After you've organized your files and added your dependencies as described on the previous pages, you're ready to deploy your app to Community Cloud!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_715", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "Select your repository and entrypoint file", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Select your repository and entrypoint file", "content": "Select your repository and entrypoint file - From your workspace atshare.streamlit.io, in the upper-right corner, click \"Create app.\" - When asked \"Do you already have an app?\" click \"Yup, I have an app.\" - Fill in your repository, branch, and file path. Alternatively, to paste a link directly toyour_app.pyon GitHub, click \"Paste GitHub URL.\" - Optional: In the \"App URL\" field, choose a subdomain for your new app.Every Community Cloud app is deployed to a subdomain onstreamlit.app, but you can change your app's subdomain at any time. For more information, seeApp settings. In the following example, Community Cloud will deploy an app tohttps://red-balloon.streamlit.app/.Although Community Cloud attempts to suggest available repositories and files, these suggestions are not always complete. If the desired information is not listed for any field, enter it manually.", "prev_chunk_id": "chunk_714", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_716", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "Optional: Configure secrets and Python version", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Optional: Configure secrets and Python version", "content": "Optional: Configure secrets and Python version - Click \"Advanced settings.\" - Select your desired version of Python. - To define environment variables and secrets, in the \"Secrets\" field, paste the contents of yoursecrets.tomlfile.For more information, seeCommunity Cloud secrets management. - Click \"Save.\"", "prev_chunk_id": "chunk_715", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_717", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "Watch your app launch", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Watch your app launch", "content": "Watch your app launch Your app is now being deployed, and you can watch while it launches. Most apps are deployed within a few minutes, but if your app has a lot of dependencies, it may take longer. After the initial deployment, changes to your code should be reflected immediately in your app. Changes to your dependencies will be processed immediately, but may take a few minutes to install.", "prev_chunk_id": "chunk_716", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_718", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "View your app", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "View your app", "content": "View your app That's it—you're done! Your app now has a unique URL that you can share with others. Read more about how to Share your app with viewers.", "prev_chunk_id": "chunk_717", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_719", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "Unique subdomains", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Unique subdomains", "content": "Unique subdomains If the \"Custom subdomain (optional)\" field is blank when you deploy your app, a URL is assigned following a structure based on your GitHub repo. The subdomain of the URL is a dash-separated list of the following: - Repository owner (GitHub user or organization) - Repository name - Entrypoint file path - Branch name, if other thanmainormaster - A random hash For example, the following app is deployed from the streamlit organization. The repo is demo-self-driving and the app name is streamlit_app.py in the root directory. The branch name is master and therefore not included.", "prev_chunk_id": "chunk_718", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_720", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "Custom subdomains", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Custom subdomains", "content": "Custom subdomains Setting a custom subdomain makes it much easier to share your app because you can choose something memorable. To learn how to change the subdomain of a deployed app, see View or change your app's URL.", "prev_chunk_id": "chunk_719", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_721", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/deploy", "title": "Still have questions?", "page_title": "Deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_720", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_722", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app", "title": "How can I make Streamlit watch for changes in other modules I'm importing in my app?", "page_title": "How can I make Streamlit watch for changes in other modules I'm importing in my app? - Streamlit Docs", "breadcrumbs": "How can I make Streamlit watch for changes in other modules I'm importing in my app?", "content": "How can I make Streamlit watch for changes in other modules I'm importing in my app? By default, Streamlit only watches modules contained in the current directory of the main app module. You can track other modules by adding the parent directory of each module to the PYTHONPATH.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_723", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app", "title": "Still have questions?", "page_title": "How can I make Streamlit watch for changes in other modules I'm importing in my app? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_722", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_724", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/retrieve-filename-uploaded", "title": "How do you retrieve the filename of a file uploaded with st.file_uploader?", "page_title": "How do you retrieve the filename of a file uploaded with st.file_uploader? - Streamlit Docs", "breadcrumbs": "How do you retrieve the filename of a file uploaded with st.file_uploader?", "content": "How do you retrieve the filename of a file uploaded with st.file_uploader? If you upload a single file (i.e. accept_multiple_files=False), the filename can be retrieved by using the .name attribute on the returned UploadedFile object: If you upload multiple files (i.e. accept_multiple_files=True), the individual filenames can be retrieved by using the .name attribute on each UploadedFile object in the returned list: Related forum posts: - https://discuss.streamlit.io/t/is-it-possible-to-get-uploaded-file-file-name/7586", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_725", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/retrieve-filename-uploaded", "title": "Still have questions?", "page_title": "How do you retrieve the filename of a file uploaded with st.file_uploader? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_724", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_726", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/file-organization", "title": "File organization for your Community Cloud app", "page_title": "File organization for your Community Cloud app - Streamlit Docs", "breadcrumbs": "File organization for your Community Cloud app", "content": "File organization for your Community Cloud app Streamlit Community Cloud copies all the files in your repository and executes streamlit run from its root directory. Because Community Cloud is creating a new Python environment to run your app, you need to include a declaration of any App dependencies in addition to any Configuration options. You can have multiple apps in your repository, and their entrypoint files can be anywhere in your repository. However, you can only have one configuration file. This page explains how to correctly organize your app, configuration, and dependency files. The following examples assume you are using requirements.txt to declare your dependencies because it is the most common. As explained on the next page, Community Cloud supports other formats for configuring your Python environment.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_727", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/file-organization", "title": "Basic example", "page_title": "File organization for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Basic example", "content": "Basic example In the following example, the entrypoint file (your_app.py) is in the root of the project directory alongside a requirements.txt file to declare the app's dependencies. If you are including custom configuration, your config file must be located at .streamlit/config.toml within your repository. Additionally, any files that need to be locally available to your app should be included in your repository.", "prev_chunk_id": "chunk_726", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_728", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/file-organization", "title": "Use an entrypoint file in a subdirectory", "page_title": "File organization for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Use an entrypoint file in a subdirectory", "content": "Use an entrypoint file in a subdirectory When your entrypoint file is in a subdirectory, the configuration file must stay at the root. However, your dependency file may be either at the root or next to your entrypoint file. Your dependency file can be at the root of your repository while your entrypoint file is in a subdirectory. Alternatively, your dependency file can be in the same subdirectory as your entrypoint file. Although most Streamlit commands interpret paths relative to the entrypoint file, some commands interpret paths relative to the working directory. On Community Cloud, the working directory is always the root of your repository. Therefore, when developing and testing your app locally, execute streamlit run from the root of your repository. This ensures that paths are interpreted consistently between your local environment and Community Cloud. In the previous example, this would look something like this:", "prev_chunk_id": "chunk_727", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_729", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/file-organization", "title": "Multiple apps in one repository", "page_title": "File organization for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Multiple apps in one repository", "content": "Multiple apps in one repository When you have multiple apps in one repository, they share the same configuration file (.streamlit/config.toml) at the root of your repository. A dependency file may be shared or configured separately for these multiple apps. To define separate dependency files for your apps, place each entrypoint file in its own subdirectory along with its own dependency file. To learn more about how Community Cloud prioritizes and parses dependency files, see App dependencies.", "prev_chunk_id": "chunk_728", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_730", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/file-organization", "title": "Still have questions?", "page_title": "File organization for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_729", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_731", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "What is State?", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "What is State?", "content": "What is State? We define access to a Streamlit app in a browser tab as a session. For each browser tab that connects to the Streamlit server, a new session is created. Streamlit reruns your script from top to bottom every time you interact with your app. Each reruns takes place in a blank slate: no variables are shared between runs. Session State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks. Session state also persists across pages inside a multipage app. In this guide, we will illustrate the usage of Session State and Callbacks as we build a stateful Counter app. For details on the Session State and Callbacks API, please refer to our Session State API Reference Guide. Also, check out this Session State basics tutorial video by Streamlit Developer Advocate Dr. Marisa Smith to get started:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_732", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Build a Counter", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Build a Counter", "content": "Build a Counter Let's call our script counter.py. It initializes a count variable and has a button to increment the value stored in the count variable: No matter how many times we press the Increment button in the above app, the count remains at 1. Let's understand why: - Each time we press theIncrementbutton, Streamlit rerunscounter.pyfrom top to bottom, and with every run,countgets initialized to0. - PressingIncrementsubsequently adds 1 to 0, thuscount=1no matter how many times we pressIncrement. As we'll see later, we can avoid this issue by storing count as a Session State variable. By doing so, we're indicating to Streamlit that it should maintain the value stored inside a Session State variable across app reruns. Let's learn more about the API to use Session State.", "prev_chunk_id": "chunk_731", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_733", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Initialization", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Initialization", "content": "Initialization The Session State API follows a field-based API, which is very similar to Python dictionaries:", "prev_chunk_id": "chunk_732", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_734", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Reads and updates", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Reads and updates", "content": "Reads and updates Read the value of an item in Session State by passing the item to st.write : Update an item in Session State by assigning it a value: Streamlit throws an exception if an uninitialized variable is accessed: Let's now take a look at a few examples that illustrate how to add Session State to our Counter app.", "prev_chunk_id": "chunk_733", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_735", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Example 1: Add Session State", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Example 1: Add Session State", "content": "Example 1: Add Session State Now that we've got a hang of the Session State API, let's update our Counter app to use Session State: As you can see in the above example, pressing the Increment button updates the count each time.", "prev_chunk_id": "chunk_734", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_736", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Example 2: Session State and Callbacks", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Example 2: Session State and Callbacks", "content": "Example 2: Session State and Callbacks Now that we've built a basic Counter app using Session State, let's move on to something a little more complex. The next example uses Callbacks with Session State. Callbacks: A callback is a Python function which gets called when an input widget changes. Callbacks can be used with widgets using the parameters on_change (or on_click), args, and kwargs. The full Callbacks API can be found in our Session State API Reference Guide. Now, pressing the Increment button updates the count each time by calling the increment_counter() function.", "prev_chunk_id": "chunk_735", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_737", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Example 3: Use args and kwargs in Callbacks", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Example 3: Use args and kwargs in Callbacks", "content": "Example 3: Use args and kwargs in Callbacks Callbacks also support passing arguments using the args parameter in a widget: Additionally, we can also use the kwargs parameter in a widget to pass named arguments to the callback function as shown below:", "prev_chunk_id": "chunk_736", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_738", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Example 4: Forms and Callbacks", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Example 4: Forms and Callbacks", "content": "Example 4: Forms and Callbacks Say we now want to not only increment the count, but also store when it was last updated. We illustrate doing this using Callbacks and st.form:", "prev_chunk_id": "chunk_737", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_739", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Session State and Widget State association", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Session State and Widget State association", "content": "Session State and Widget State association Session State provides the functionality to store variables across reruns. Widget state (i.e. the value of a widget) is also stored in a session. For simplicity, we have unified this information in one place. i.e. the Session State. This convenience feature makes it super easy to read or write to the widget's state anywhere in the app's code. Session State variables mirror the widget value using the key argument. We illustrate this with the following example. Let's say we have an app with a slider to represent temperature in Celsius. We can set and get the value of the temperature widget by using the Session State API, as follows: There is a limitation to setting widget values using the Session State API. The following example will raise a StreamlitAPIException on trying to set the state of st.button via the Session State API:", "prev_chunk_id": "chunk_738", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_740", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Serializable Session State", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Serializable Session State", "content": "Serializable Session State Serialization refers to the process of converting an object or data structure into a format that can be persisted and shared, and allowing you to recover the data’s original structure. Python’s built-in pickle module serializes Python objects to a byte stream (\"pickling\") and deserializes the stream into an object (\"unpickling\"). By default, Streamlit’s Session State allows you to persist any Python object for the duration of the session, irrespective of the object’s pickle-serializability. This property lets you store Python primitives such as integers, floating-point numbers, complex numbers and booleans, dataframes, and even lambdas returned by functions. However, some execution environments may require serializing all data in Session State, so it may be useful to detect incompatibility during development, or when the execution environment will stop supporting it in the future. To that end, Streamlit provides a runner.enforceSerializableSessionState configuration option that, when set to true, only allows pickle-serializable objects in Session State. To enable the option, either create a global or project config file with the following or use it as a command-line flag: By \"pickle-serializable\", we mean calling pickle.dumps(obj) should not raise a PicklingError exception. When the config option is enabled, adding unserializable data to session state should result in an exception. E.g.,", "prev_chunk_id": "chunk_739", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_741", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Caveats and limitations", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Caveats and limitations", "content": "Caveats and limitations Here are some limitations to keep in mind when using Session State: - Session State exists for as long as the tab is open and connected to the Streamlit server. As soon as you close the tab, everything stored in Session State is lost. - Session State is not persisted. If the Streamlit server crashes, then everything stored in Session State gets wiped - For caveats and limitations with the Session State API, please see theAPI limitations.", "prev_chunk_id": "chunk_740", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_742", "url": "https://docs.streamlit.io/develop/concepts/architecture/session-state", "title": "Still have questions?", "page_title": "Add statefulness to apps - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_741", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_743", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "The app chrome", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "The app chrome", "content": "The app chrome Your Streamlit app has a few widgets in the top right to help you as you develop. These widgets also help your viewers as they use your app. We call this things “the app chrome”. The chrome includes a status area, toolbar, and app menu. Your app menu is configurable. By default, you can access developer options from the app menu when viewing an app locally or on Streamlit Community Cloud while logged into an account with administrative access. While viewing an app, click the icon in the upper-right corner to access the menu.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_744", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Menu options", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Menu options", "content": "Menu options The menu is split into two sections. The upper section contains options available to all viewers and the lower section contains options for developers. Read more about customizing this menu at the end of this page.", "prev_chunk_id": "chunk_743", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_745", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Rerun", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Rerun", "content": "Rerun You can manually trigger a rerun of your app by clicking \"Rerun\" from the app menu. This rerun will not reset your session. Your widget states and values stored in st.session_state will be preserved. As a shortcut, without opening the app menu, you can rerun your app by pressing \"R\" on your keyboard (if you aren't currently focused on an input element).", "prev_chunk_id": "chunk_744", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_746", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Settings", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Settings", "content": "Settings With the \"Settings\" option, you can control the appearance of your app while it is running. If viewing the app locally, you can set how your app responds to changes in your source code. See more about development flow in Basic concepts. You can also force your app to appear in wide mode, even if not set within the script using st.set_page_config.", "prev_chunk_id": "chunk_745", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_747", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Theme settings", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Theme settings", "content": "Theme settings After clicking \"Settings\" from the app menu, you can choose between \"Light\", \"Dark\", or \"Use system setting\" for the app's base theme. Click \"Edit active theme\" to modify the theme, color-by-color.", "prev_chunk_id": "chunk_746", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_748", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Print", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Print", "content": "Print Click \"Print\" or use keyboard shortcuts (⌘+P or Ctrl+P) to open a print dialog. This option uses your browser's built-in print-to-pdf function. To modify the appearance of your print, you can do the following: - Expand or collapse the sidebar before printing to respectively include or exclude it from the print. - Resize the sidebar in your app by clicking and dragging its right border to achieve your desired width. - You may need to enable \"Background graphics\" in your print dialog if you are printing in dark mode. - You may need to disable wide mode inSettingsor adjust the print scale to prevent elements from clipping off the page.", "prev_chunk_id": "chunk_747", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_749", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Record a screencast", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Record a screencast", "content": "Record a screencast You can easily make screen recordings right from your app! Screen recording is supported in the latest versions of Chrome, Edge, and Firefox. Ensure your browser is up-to-date for compatibility. Depending on your current settings, you may need to grant permission to your browser to record your screen or to use your microphone if recording a voiceover. - While viewing your app, open the app menu from the upper-right corner. - Click \"Record a screencast.\" - If you want to record audio through your microphone, check \"Also record audio.\" - Click \"Start recording.\" (You may be prompted by your OS to permit your browser to record your screen or use your microphone.) - Select which tab, window, or monitor you want to record from the listed options. The interface will vary depending on your browser. - Click \"Share.\" - While recording, you will see a red circle on your app's tab and on the app menu icon. If you want to cancel the recording, click \"Stop sharing\" at the bottom of your app. - When you are done recording, press \"Esc\" on your keyboard or click \"Stop recording\" from your app's menu. - Follow your browser's instructions to save your recording. Your saved recording will be available where your browser saves downloads. The whole process looks like this:", "prev_chunk_id": "chunk_748", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_750", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "About", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "About", "content": "About You can conveniently check what version of Streamlit is running from the \"About\" option. Developers also have the option to customize the message shown here using st.set_page_config.", "prev_chunk_id": "chunk_749", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_751", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Developer options", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Developer options", "content": "Developer options By default, developer options only show when viewing an app locally or when viewing a Community Cloud app while logged in with administrative permission. You can customize the menu if you want to make these options available for all users.", "prev_chunk_id": "chunk_750", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_752", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Clear cache", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Clear cache", "content": "Clear cache Reset your app's cache by clicking \"Clear cache\" from the app's menu or by pressing \"C\" on your keyboard while not focused on an input element. This will remove all cached entries for @st.cache_data and @st.cache_resource.", "prev_chunk_id": "chunk_751", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_753", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Deploy this app", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Deploy this app", "content": "Deploy this app If you are running an app locally from within a git repo, you can deploy your app to Streamlit Community Cloud in a few easy clicks! Make sure your work has been pushed to your online GitHub repository before beginning. For the greatest convenience, make sure you have already created your Community Cloud account and are signed in. - Click \"Deploy\" next to the app menu icon (more_vert). - Click \"Deploy now.\" - You will be taken to Community Cloud's \"Deploy an app\" page. Your app's repository, branch, and file name will be prefilled to match your current app! Learn more aboutdeploying an appon Streamlit Community Cloud. The whole process looks like this:", "prev_chunk_id": "chunk_752", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_754", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Customize the menu", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Customize the menu", "content": "Customize the menu Using client.toolbarMode in your app's configuration, you can make the app menu appear in the following ways: - \"developer\"— Show the developer options to all viewers. - \"viewer\"— Hide the developer options from all viewers. - \"minimal\"— Show only those options set externally. These options can be declared throughst.set_page_configor populated through Streamlit Community Cloud. - \"auto\"— This is the default and will show the developer options when accessed through localhost or through Streamlit Community Cloud when logged into an administrative account for the app. Otherwise, the developer options will not show.", "prev_chunk_id": "chunk_753", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_755", "url": "https://docs.streamlit.io/develop/concepts/architecture/app-chrome", "title": "Still have questions?", "page_title": "The app chrome - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_754", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_756", "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture", "title": "Understanding Streamlit's client-server architecture", "page_title": "Understanding Streamlit's client-server architecture - Streamlit Docs", "breadcrumbs": "Understanding Streamlit's client-server architecture", "content": "Understanding Streamlit's client-server architecture Streamlit apps have a client-server structure. The Python backend of your app is the server. The frontend you view through a browser is the client. When you develop an app locally, your computer runs both the server and the client. If someone views your app across a local or global network, the server and client run on different machines. If you intend to share or deploy your app, it's important to understand this client-server structure to avoid common pitfalls.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_757", "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture", "title": "Python backend (server)", "page_title": "Understanding Streamlit's client-server architecture - Streamlit Docs", "breadcrumbs": "Python backend (server)", "content": "Python backend (server) When you execute the command streamlit run your_app.py, your computer uses Python to start up a Streamlit server. This server is the brains of your app and performs the computations for all users who view your app. Whether users view your app across a local network or the internet, the Streamlit server runs on the one machine where the app was initialized with streamlit run. The machine running your Streamlit server is also called a host.", "prev_chunk_id": "chunk_756", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_758", "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture", "title": "Browser frontend (client)", "page_title": "Understanding Streamlit's client-server architecture - Streamlit Docs", "breadcrumbs": "Browser frontend (client)", "content": "Browser frontend (client) When someone views your app through a browser, their device is a Streamlit client. When you view your app from the same computer where you are running or developing your app, then server and client are coincidentally running on the same machine. However, when users view your app across a local network or the internet, the client runs on a different machine from the server.", "prev_chunk_id": "chunk_757", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_759", "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture", "title": "Server-client impact on app design", "page_title": "Understanding Streamlit's client-server architecture - Streamlit Docs", "breadcrumbs": "Server-client impact on app design", "content": "Server-client impact on app design Keep in mind the following considerations when building your Streamlit app: - The computer running or hosting your Streamlit app is responsible for providing the compute and storage necessary to run your app for all users and must be sized appropriately to handle concurrent users. - Your app will not have access to a user's files, directories, or OS. Your app can only work with specific files a user has uploaded to your app through a widget likest.file_uploader. - If your app communicates with any peripheral devices (like cameras), you must use Streamlit commands or custom components that will access those devicesthrough the user's browserand correctly communicate between the client (frontend) and server (backend). - If your app opens or uses any program or process outside of Python, they will run on the server. For example, you may want to usewebrowserto open a browser for the user, but this will not work as expected when viewing your app over a network; it will open a browser on the Streamlit server, unseen by the user. - If you use load balancing or replication in your deployment, some Streamlit features won't work without session affinity or stickiness. For more information, continue reading.", "prev_chunk_id": "chunk_758", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_760", "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture", "title": "WebSockets and session management", "page_title": "Understanding Streamlit's client-server architecture - Streamlit Docs", "breadcrumbs": "WebSockets and session management", "content": "WebSockets and session management While most Streamlit app developers don’t need to interact directly with WebSockets, understanding their role is important for advanced deployments, custom components, or managing connections at scale. Streamlit’s server is built on the Tornado web framework, which uses WebSockets to maintain a persistent, two-way communication channel between the client and server. This persistent connection allows the server to push real-time updates to the client and maintain session context for each user. Each browser tab or window creates its own WebSocket connection, resulting in a separate session within your app. In large-scale or production deployments, load balancing and server replication are common. However, the way Streamlit handles sessions and local (server) files requires special consideration in these environments. When a client requests media (such as an image or audio file) via HTTP, there is no session context attached to that request. In deployments with multiple server replicas or load balancers, the HTTP request for the media file might be routed to a different server than the one handling the user’s WebSocket connection and session information. If the media file isn’t available on all replicas, you may encounter errors like MediaFileStorageError: Bad filename. Any command that allows the user to upload files can also be impacted and may raise HTTP status code 400.", "prev_chunk_id": "chunk_759", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_761", "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture", "title": "Session affinity or stickiness", "page_title": "Understanding Streamlit's client-server architecture - Streamlit Docs", "breadcrumbs": "Session affinity or stickiness", "content": "Session affinity or stickiness In general, you can do one of the following to resolve or reduce this limitation: - Enable session affinity (also known as stickiness) in your proxy. This ensures that all requests from a user’s session are handled by the same server instance. - Convert media to a Base64 encoded data URI before passing it to a Streamlit command. This passes the media data through the WebSocket instead of using Streamlit's media storage which is accessed through HTTP requests. - Save dynamically generated files to a stable location outside of your server replicas (e.g. S3 storage), and pass the external URLs to Streamlit commands. This avoids Streamlit's media storage. Enabling session affinity is a general solution which resolves the limitation for both media files and uploaded files. For configuration details, consult your deployment platform’s documentation. Using Base64 encoded data URIs or external file storage can straightforwardly resolve the limitation for media files, but are not complete solutions to resolve the limitation for file uploads. For more information, see GitHub issue #4173.", "prev_chunk_id": "chunk_760", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_762", "url": "https://docs.streamlit.io/develop/concepts/architecture/architecture", "title": "Still have questions?", "page_title": "Understanding Streamlit's client-server architecture - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_761", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_763", "url": "https://docs.streamlit.io/develop/concepts/architecture/run-your-app", "title": "Run your Streamlit app", "page_title": "Run your Streamlit app - Streamlit Docs", "breadcrumbs": "Run your Streamlit app", "content": "Run your Streamlit app Working with Streamlit is simple. First you sprinkle a few Streamlit commands into a normal Python script, and then you run it. We list few ways to run your script, depending on your use case.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_764", "url": "https://docs.streamlit.io/develop/concepts/architecture/run-your-app", "title": "Use streamlit run", "page_title": "Run your Streamlit app - Streamlit Docs", "breadcrumbs": "Use streamlit run", "content": "Use streamlit run Once you've created your script, say your_script.py, the easiest way to run it is with streamlit run: As soon as you run the script as shown above, a local Streamlit server will spin up and your app will open in a new tab in your default web browser.", "prev_chunk_id": "chunk_763", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_765", "url": "https://docs.streamlit.io/develop/concepts/architecture/run-your-app", "title": "Pass arguments to your script", "page_title": "Run your Streamlit app - Streamlit Docs", "breadcrumbs": "Pass arguments to your script", "content": "Pass arguments to your script When passing your script some custom arguments, they must be passed after two dashes. Otherwise the arguments get interpreted as arguments to Streamlit itself:", "prev_chunk_id": "chunk_764", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_766", "url": "https://docs.streamlit.io/develop/concepts/architecture/run-your-app", "title": "Pass a URL to streamlit run", "page_title": "Run your Streamlit app - Streamlit Docs", "breadcrumbs": "Pass a URL to streamlit run", "content": "Pass a URL to streamlit run You can also pass a URL to streamlit run! This is great when your script is hosted remotely, such as a GitHub Gist. For example:", "prev_chunk_id": "chunk_765", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_767", "url": "https://docs.streamlit.io/develop/concepts/architecture/run-your-app", "title": "Run Streamlit as a Python module", "page_title": "Run your Streamlit app - Streamlit Docs", "breadcrumbs": "Run Streamlit as a Python module", "content": "Run Streamlit as a Python module Another way of running Streamlit is to run it as a Python module. This is useful when configuring an IDE like PyCharm to work with Streamlit:", "prev_chunk_id": "chunk_766", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_768", "url": "https://docs.streamlit.io/develop/concepts/architecture/run-your-app", "title": "Still have questions?", "page_title": "Run your Streamlit app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_767", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_769", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Start and stop a streaming fragment", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Start and stop a streaming fragment", "content": "Start and stop a streaming fragment Streamlit lets you turn functions into fragments, which can rerun independently from the full script. Additionally, you can tell Streamlit to rerun a fragment at a set time interval. This is great for streaming data or monitoring processes. You may want the user to start and stop this live streaming. To do this, programmatically set the run_every parameter for your fragment.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_770", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Applied concepts", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Use a fragment to stream live data. - Start and stop a fragment from automatically rerunning.", "prev_chunk_id": "chunk_769", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_771", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Prerequisites", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.37.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding of fragments.", "prev_chunk_id": "chunk_770", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_772", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Summary", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, you'll build an app that streams two data series in a line chart. Your app will gather recent data on the first load of a session and statically display the line chart. Two buttons in the sidebar will allow users to start and stop data streaming to update the chart in real time. You'll use a fragment to manage the frequency and scope of the live updates. Here's a look at what you'll build:", "prev_chunk_id": "chunk_771", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_773", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Initialize your app", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st import pandas as pd import numpy as np from datetime import datetime, timedeltaYou'll be using these libraries as follows:You'll work with two data series in apandas.DataFrame.You'll generate random data withnumpy.The data will havedatetime.datetimeindex values. - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_772", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_774", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Build a function to generate random, recent data", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Build a function to generate random, recent data", "content": "Build a function to generate random, recent data To begin with, you'll define a function to randomly generate some data for two time series, which you'll call \"A\" and \"B.\" It's okay to skip this section if you just want to copy the function. - Start your function definition.def get_recent_data(last_timestamp): \"\"\"Generate and return data from last timestamp to now, at most 60 seconds.\"\"\"You'll pass the timestamp of your most recent datapoint to your data-generating function. Your function will use this to only return new data. - Get the current time and adjust the last timestamp if it is over 60 seconds ago.now = datetime.now() if now - last_timestamp > timedelta(seconds=60): last_timestamp = now - timedelta(seconds=60)By updating the last timestamp, you'll ensure the function never returns more than 60 seconds of data. - Declare a new variable,sample_time, to define the time between datapoints. Calculate the timestamp of the first, new datapoint.sample_time = timedelta(seconds=0.5) # time between data points next_timestamp = last_timestamp + sample_time - Create adatetime.datetimeindex and generate two data series of the same length.timestamps = np.arange(next_timestamp, now, sample_time) sample_values = np.random.randn(len(timestamps), 2) - Combine the data series with the index into apandas.DataFrameand return the data.data = pd.DataFrame(sample_values, index=timestamps, columns=[\"A\", \"B\"]) return data - Optional: Test out your function by calling it and displaying the data.data = get_recent_data(datetime.now() - timedelta(seconds=60)) dataSave yourapp.pyfile to see the preview. Delete these two lines when finished.", "prev_chunk_id": "chunk_773", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_775", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Initialize Session State values for your app", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Initialize Session State values for your app", "content": "Initialize Session State values for your app Since you will dynamically change the run_every parameter of @st.fragment(), you'll need to initialize the associated variables and Session State values before defining your fragment function. Your fragment function will also read and update values in Session State, so you can define those now to make the fragment function easier to understand. - Initialize your data for the first app load in a session.if \"data\" not in st.session_state: st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))Your app will display this initial data in a static line chart before a user starts streaming data. - Initialize\"stream\"in Session State to turn streaming on and off. Set the default to off (False).if \"stream\" not in st.session_state: st.session_state.stream = False - Create a callback function to toggle\"stream\"betweenTrueandFalse.def toggle_streaming(): st.session_state.stream = not st.session_state.stream - Add a title to your app.st.title(\"Data feed\") - Add a slider to the sidebar to set how frequently to check for data while streaming.st.sidebar.slider( \"Check for updates every: (seconds)\", 0.5, 5.0, value=1.0, key=\"run_every\" ) - Add buttons to the sidebar to turn streaming on and off.st.sidebar.button( \"Start streaming\", disabled=st.session_state.stream, on_click=toggle_streaming ) st.sidebar.button( \"Stop streaming\", disabled=not st.session_state.stream, on_click=toggle_streaming )Both functions use the same callback to toggle\"stream\"in Session State. Use the current value\"stream\"to disable one of the buttons. This ensures the buttons are always consistent with the current state; \"Start streaming\" is only clickable when streaming is off, and \"Stop streaming\" is only clickable when streaming is on. The buttons also provide status to the user by highlighting which action is available to them. - Create and set a new variable,run_every, that will determine whether or not the fragment function will rerun automatically (and how fast).if st.session_state.stream is True: run_every = st.session_state.run_every else: run_every = None", "prev_chunk_id": "chunk_774", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_776", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Build a fragment function to stream data", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Build a fragment function to stream data", "content": "Build a fragment function to stream data To allow the user to turn data streaming on and off, you must set the run_every parameter in the @st.fragment() decorator. - Use an@st.fragmentdecorator and start your function definition.@st.fragment(run_every=run_every) def show_latest_data():Use therun_everyvariable declared above to set the parameter of the same name. - Retrieve the timestamp of the last datapoint in Session State.last_timestamp = st.session_state.data.index[-1] - Update the data in Session State and trim to keep only the last 100 timestamps.st.session_state.data = pd.concat( [st.session_state.data, get_recent_data(last_timestamp)] ) st.session_state.data = st.session_state.data[-100:] - Show the data in a line chart.st.line_chart(st.session_state.data)Your fragment-function definition is complete.", "prev_chunk_id": "chunk_775", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_777", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Call and test out your fragment function", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Call and test out your fragment function", "content": "Call and test out your fragment function - Call your function at the bottom of your code.show_latest_data() - Test out your app by clicking \"Start streaming.\" Try adjusting the frequency of updates.", "prev_chunk_id": "chunk_776", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_778", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Next steps", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Next steps", "content": "Next steps Try adjusting the frequency of data generation or how much data is kept in Session State. Within get_recent_data try setting sample_time with a widget. Try using st.plotly_chart or st.altair_chart to add labels to your chart.", "prev_chunk_id": "chunk_777", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_779", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns", "title": "Still have questions?", "page_title": "Start and stop a streaming fragment - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_778", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_780", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Trigger a full-script rerun from inside a fragment", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Trigger a full-script rerun from inside a fragment", "content": "Trigger a full-script rerun from inside a fragment Streamlit lets you turn functions into fragments, which can rerun independently from the full script. When a user interacts with a widget inside a fragment, only the fragment reruns. Sometimes, you may want to trigger a full-script rerun from inside a fragment. To do this, call st.rerun inside the fragment.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_781", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Applied concepts", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Use a fragment to rerun part or all of your app, depending on user input.", "prev_chunk_id": "chunk_780", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_782", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Prerequisites", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.37.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding of fragments andst.rerun.", "prev_chunk_id": "chunk_781", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_783", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Summary", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, you'll build an app to display sales data. The app has two sets of elements that depend on a date selection. One set of elements displays information for the selected day. The other set of elements displays information for the associated month. If the user changes days within a month, Streamlit only needs to update the first set of elements. If the user selects a day in a different month, Streamlit needs to update all the elements. You'll collect the day-specific elements into a fragment to avoid rerunning the full app when a user changes days within the same month. If you want to jump ahead to the fragment function definition, see Build a function to show daily sales data. Here's a look at what you'll build: Click here to see the example live on Community Cloud.", "prev_chunk_id": "chunk_782", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_784", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Initialize your app", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st import pandas as pd import numpy as np from datetime import date, timedelta import string import timeYou'll be using these libraries as follows:You'll work with sales data in apandas.DataFrame.You'll generate random sales numbers withnumpy.The data will havedatetime.dateindex values.The products sold will be \"Widget A\" through \"Widget Z,\" so you'll usestringfor easy access to an alphabetical string.Optional: To help add emphasis at the end, you'll usetime.sleep()to slow things down and see the fragment working. - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_783", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_785", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Build a function to create random sales data", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Build a function to create random sales data", "content": "Build a function to create random sales data To begin with, you'll define a function to randomly generate some sales data. It's okay to skip this section if you just want to copy the function. - Use an@st.cache_datadecorator and start your function definition.@st.cache_data def get_data(): \"\"\"Generate random sales data for Widget A through Widget Z\"\"\"You don't need to keep re-randomizing the data, so the caching decorator will randomly generate the data once and save it in Streamlit's cache. As your app reruns, it will use the cached value instead of recomputing new data. - Define the list of product names and assign an average daily sales value to each.product_names = [\"Widget \" + letter for letter in string.ascii_uppercase] average_daily_sales = np.random.normal(1_000, 300, len(product_names)) products = dict(zip(product_names, average_daily_sales)) - For each product, use its average daily sales to randomly generate daily sales values for an entire year.data = pd.DataFrame({}) sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1)) for product, sales in products.items(): data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2) data.index = sales_dates data.index = data.index.dateIn the last line,data.index.datestrips away the timestamp, so the index will show clean dates. - Return the random sales data.return data - Optional: Test out your function by calling it and displaying the data.data = get_data() dataSave yourapp.pyfile to see the preview. Delete these two lines or keep them at the end of your app to be updated as you continue.", "prev_chunk_id": "chunk_784", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_786", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Build a function to show daily sales data", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Build a function to show daily sales data", "content": "Build a function to show daily sales data Since the daily sales data updates with every new date selection, you'll turn this function into a fragment. As a fragment, it can rerun independently from the rest of your app. You'll include an st.date_input widget inside this fragment and watch for a date selection that changes the month. When the fragment detects a change in the selected month, it will trigger a full app rerun so everything can update. - Use an@st.fragmentdecorator and start your function definition.@st.fragment def show_daily_sales(data):Since your data will not change during a fragment rerun, you can pass the data into the fragment as an argument. - Optional: Addtime.sleep(1)to slow down the function and show off how the fragment works.time.sleep(1) - Add anst.date_inputwidget.selected_date = st.date_input( \"Pick a day \", value=date(2023, 1, 1), min_value=date(2023, 1, 1), max_value=date(2023, 12, 31), key=\"selected_date\", )Your random data is for 2023, so set the minimun and maximum dates to match. Use a key for the widget because elements outside the fragment will need this date value. When working with a fragment, it's best to use Session State to pass information in and out of the fragment. - Initialize\"previous_date\"in Session State to compare each date selection.if \"previous_date\" not in st.session_state: st.session_state.previous_date = selected_date - Save the previous date selection into a new variable and update\"previous_date\"in Session State.previous_date = st.session_state.previous_date st.session_state.previous_date = selected_date - Callst.rerun()if the month changed.is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1) if is_new_month: st.rerun() - Show the best sellers from the selected date.st.header(f\"Best sellers, {selected_date:%m/%d/%y}\") top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10] cols = st.columns([1, 4]) cols[0].dataframe(top_ten) cols[1].bar_chart(top_ten) - Show the worst sellers from the selected date.st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\") bottom_ten = data.loc[selected_date].sort_values()[0:10] cols = st.columns([1, 4]) cols[0].dataframe(bottom_ten) cols[1].bar_chart(bottom_ten) - Optional: Test out your function by calling it and displaying the data.data = get_data() show_daily_sales(data)Save yourapp.pyfile to see the preview.", "prev_chunk_id": "chunk_785", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_787", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Build a function to show daily sales data", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Build a function to show daily sales data", "content": "Delete these two lines or keep them at the end of your app to be updated as you continue.", "prev_chunk_id": "chunk_786", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_788", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Build a function to show monthly sales data", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Build a function to show monthly sales data", "content": "Build a function to show monthly sales data Finally, let's build a function to display monthly sales data. It will be similar to your show_daily_sales function but doesn't need to be fragment. You only need to rerun this function when the whole app is rerunning. - Start your function definition.def show_monthly_sales(data): - Optional: Addtime.sleep(1)to slow down the function and show off how the fragment works.time.sleep(1) - Get the selected date from Session State and compute the first days of this and next month.selected_date = st.session_state.selected_date this_month = selected_date.replace(day=1) next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1) - Show the daily sales values for all products within the selected month.st.header(f\"Daily sales for all products, {this_month:%B %Y}\") monthly_sales = data[(data.index < next_month) & (data.index >= this_month)] st.write(monthly_sales) - Show the total sales of each product within the selected month.st.header(f\"Total sales for all products, {this_month:%B %Y}\") st.bar_chart(monthly_sales.sum()) - Optional: Test out your function by calling it and displaying the data.data = get_data() show_daily_sales(data) show_monthly_sales(data)Save yourapp.pyfile to see the preview. Delete these three lines when finished.", "prev_chunk_id": "chunk_787", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_789", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Put the functions together together to create an app", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Put the functions together together to create an app", "content": "Put the functions together together to create an app Let's show these elements side-by-side. You'll display the daily data on the left and the monthly data on the right. - If you added optional lines at the end of your code to test your functions, clear them out now. - Give your app a wide layout.st.set_page_config(layout=\"wide\") - Get your data.data = get_data() - Add a title and description for your app.st.title(\"Daily vs monthly sales, by product\") st.markdown(\"This app shows the 2023 daily sales for Widget A through Widget Z.\") - Create columns and call the functions to display data.daily, monthly = st.columns(2) with daily: show_daily_sales(data) with monthly: show_monthly_sales(data)", "prev_chunk_id": "chunk_788", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_790", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Make it pretty", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Make it pretty", "content": "Make it pretty Now, you have a functioning app that uses a fragment to prevent unnecessarily redrawing the monthly data. However, things aren't aligned on the page, so you can insert a few containers to make it pretty. Add three containers into each of the display functions. - Add three containers to fix the height of elements in theshow_daily_salesfunction.@st.fragment def show_daily_sales(data): time.sleep(1) with st.container(height=100): ### ADD CONTAINER ### selected_date = st.date_input( \"Pick a day \", value=date(2023, 1, 1), min_value=date(2023, 1, 1), max_value=date(2023, 12, 31), key=\"selected_date\", ) if \"previous_date\" not in st.session_state: st.session_state.previous_date = selected_date previous_date = st.session_state.previous_date st.session_state.previous_date = selected_date is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1) if is_new_month: st.rerun() with st.container(height=510): ### ADD CONTAINER ### st.header(f\"Best sellers, {selected_date:%m/%d/%y}\") top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10] cols = st.columns([1, 4]) cols[0].dataframe(top_ten) cols[1].bar_chart(top_ten) with st.container(height=510): ### ADD CONTAINER ### st.header(f\"Worst sellers, {selected_date:%m/%d/%y}\") bottom_ten = data.loc[selected_date].sort_values()[0:10] cols = st.columns([1, 4]) cols[0].dataframe(bottom_ten) cols[1].bar_chart(bottom_ten) - Add three containers to fix the height of elements in theshow_monthly_salesfunction.def show_monthly_sales(data): time.sleep(1) selected_date = st.session_state.selected_date this_month = selected_date.replace(day=1) next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1) st.container(height=100, border=False) ### ADD CONTAINER ### with st.container(height=510): ### ADD CONTAINER ### st.header(f\"Daily sales for all products, {this_month:%B %Y}\") monthly_sales = data[(data.index < next_month) & (data.index >= this_month)] st.write(monthly_sales) with st.container(height=510): ### ADD CONTAINER ### st.header(f\"Total sales for all products, {this_month:%B %Y}\") st.bar_chart(monthly_sales.sum())The first container creates space to coordinate with the input widget in theshow_daily_salesfunction.", "prev_chunk_id": "chunk_789", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_791", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Next steps", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Next steps", "content": "Next steps Continue beautifying the example. Try using st.plotly_chart or st.altair_chart to add labels to your charts and adjust their height.", "prev_chunk_id": "chunk_790", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_792", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment", "title": "Still have questions?", "page_title": "Trigger a full-script rerun from inside a fragment - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_791", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_793", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Create a fragment across multiple containers", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Create a fragment across multiple containers", "content": "Create a fragment across multiple containers Streamlit lets you turn functions into fragments, which can rerun independently from the full script. If your fragment doesn't write to outside containers, Streamlit will clear and redraw all the fragment elements with each fragment rerun. However, if your fragment does write elements to outside containers, Streamlit will not clear those elements during a fragment rerun. Instead, those elements accumulate with each fragment rerun until the next full-script rerun. If you want a fragment to update multiple containers in your app, use st.empty() containers to prevent accumulating elements.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_794", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Applied concepts", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Use fragments to run two independent processes separately. - Distribute a fragment across multiple containers.", "prev_chunk_id": "chunk_793", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_795", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Prerequisites", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.37.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding of fragments andst.empty().", "prev_chunk_id": "chunk_794", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_796", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Summary", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this toy example, you'll build an app with six containers. Three containers will have orange cats. The other three containers will have black cats. You'll have three buttons in the sidebar: \"Herd the black cats,\" \"Herd the orange cats,\" and \"Herd all the cats.\" Since herding cats is slow, you'll use fragments to help Streamlit run the associated processes efficiently. You'll create two fragments, one for the black cats and one for the orange cats. Since the buttons will be in the sidebar and the fragments will update containers in the main body, you'll use a trick with st.empty() to ensure you don't end up with too many cats in your app (if it's even possible to have too many cats). 😻 Here's a look at what you'll build:", "prev_chunk_id": "chunk_795", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_797", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Initialize your app", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st import timeYou'll usetime.sleep()to slow things down and see the fragments working. - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_796", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_798", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Frame out your app's containers", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Frame out your app's containers", "content": "Frame out your app's containers - Add a title to your app and two rows of three containers.st.title(\"Cats!\") row1 = st.columns(3) row2 = st.columns(3) grid = [col.container(height=200) for col in row1 + row2]Save your file to see your updated preview. - Define a helper function to draw two black cats.def black_cats(): time.sleep(1) st.title(\"🐈‍⬛ 🐈‍⬛\") st.markdown(\"🐾 🐾 🐾 🐾\")This function represents \"herding two cats\" and usestime.sleep()to simulate a slower process. You will use this to draw two cats in one of your grid cards later on. - Define another helper function to draw two orange cats.def orange_cats(): time.sleep(1) st.title(\"🐈 🐈\") st.markdown(\"🐾 🐾 🐾 🐾\") - Optional: Test out your functions by calling each one within a grid card.with grid[0]: black_cats() with grid[1]: orange_cats()Save yourapp.pyfile to see the preview. Delete these four lines when finished.", "prev_chunk_id": "chunk_797", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_799", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Define your fragments", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Define your fragments", "content": "Define your fragments Since each fragment will span across the sidebar and three additional containers, you'll use the sidebar to hold the main body of the fragment and pass the three containers as function arguments. - Use an@st.fragmentdecorator and start your black-cat fragment definition.@st.fragment def herd_black_cats(card_a, card_b, card_c): - Add a button for rerunning this fragment.st.button(\"Herd the black cats\") - Write to each container using your helper function.with card_a: black_cats() with card_b: black_cats() with card_c: black_cats()This code above will not behave as desired, but you'll explore and correct this in the following steps. - Test out your code. Call your fragment function in the sidebar.with st.sidebar: herd_black_cats(grid[0], grid[2], grid[4])Save your file and try using the button in the sidebar. More and more cats are appear in the cards with each fragment rerun! This is the expected behavior when fragments write to outside containers. To fix this, you will passst.empty()containers to your fragment function. - Delete the lines of code from the previous two steps. - To prepare for usingst.empty()containers, correct your cat-herding function as follows. After the button, define containers to place in thest.empty()cards you'll pass to your fragment.container_a = card_a.container() container_b = card_b.container() container_c = card_c.container() with container_a: black_cats() with container_b: black_cats() with container_c: black_cats()In this new version,card_a,card_b, andcard_cwill best.empty()containers. You createcontainer_a,container_b, andcontainer_cto allow Streamlit to draw multiple elements on each grid card. - Similarly define your orange-cat fragment function.@st.fragment def herd_orange_cats(card_a, card_b, card_c): st.button(\"Herd the orange cats\") container_a = card_a.container() container_b = card_b.container() container_c = card_c.container() with container_a: orange_cats() with container_b: orange_cats() with container_c: orange_cats()", "prev_chunk_id": "chunk_798", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_800", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Put the functions together together to create an app", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Put the functions together together to create an app", "content": "Put the functions together together to create an app - Call both of your fragments in the sidebar.with st.sidebar: herd_black_cats(grid[0].empty(), grid[2].empty(), grid[4].empty()) herd_orange_cats(grid[1].empty(), grid[3].empty(), grid[5].empty())By creatingst.empty()containers in each card and passing them to your fragments, you prevent elements from accumulating in the cards with each fragment rerun. If you create thest.empty()containers earlier in your app, full-script reruns will clear the orange-cat cards while (first) rendering the black-cat cards. - Include a button outside of your fragments. When clicked, the button will trigger a full-script rerun since you're calling its widget function outside of any fragment.st.button(\"Herd all the cats\") - Save your file and try out the app! When you click \"Herd the black cats\" or \"Herd the orange cats,\" Streamlit will only redraw the three related cards. When you click \"Herd all the cats,\" Streamlit redraws all six cards.", "prev_chunk_id": "chunk_799", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_801", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment", "title": "Still have questions?", "page_title": "Create a fragment across multiple containers - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_800", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_802", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "SEO and search indexability", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "SEO and search indexability", "content": "SEO and search indexability When you deploy a public app to Streamlit Community Cloud, it is automatically indexed by search engines like Google and Bing on a weekly basis. 🎈 This means that anyone can find your app by searching for its custom subdomain (e.g. \"traingenerator.streamlit.app\") or by searching for the app's title.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_803", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "Get the most out of app indexability", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "Get the most out of app indexability", "content": "Get the most out of app indexability Here are some tips to help you get the most out of app indexability: - Make sure your app is public - Choose a custom subdomain early - Choose a descriptive app title - Customize your app's meta description", "prev_chunk_id": "chunk_802", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_804", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "Make sure your app is public", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "Make sure your app is public", "content": "Make sure your app is public All public apps hosted on Community Cloud are indexed by search engines. If your app is private, it will not be indexed by search engines. To make your private app public, read Share your app.", "prev_chunk_id": "chunk_803", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_805", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "Choose a custom subdomain early", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "Choose a custom subdomain early", "content": "Choose a custom subdomain early Community Cloud automatically generates a subdomain for your app if you do not choose one. However, you can change your subdomain at any time! Custom subdomains modify your app URLs to reflect your app content, personal branding, or whatever you’d like. To learn how to change your app's subdomain, see View or change your app's URL. By choosing a custom subdomain, you can use it to help people find your app. For example, if you're deploying an app that generates training data, you might choose a subdomain like traingenerator.streamlit.app. This makes it easy for people to find your app by searching for \"training generator\" or \"train generator streamlit app.\" We recommend choosing a custom subdomain when you deploy your app. This ensures that your app is indexed by search engines using your custom subdomain, rather than the automatically generated one. If you choose a custom subdomain later, your app may be indexed multiple times—once using the default subdomain and once using your custom subdomain. In this case, your old URL will result in a 404 error which can confuse users who are searching for your app.", "prev_chunk_id": "chunk_804", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_806", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "Choose a descriptive app title", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "Choose a descriptive app title", "content": "Choose a descriptive app title The meta title of your app is the text that appears in search engine results. It is also the text that appears in the browser tab when your app is open. By default, the meta title of your app is the same as the title of your app. However, you can customize the meta title of your app by setting the st.set_page_config parameter page_title to a custom string. For example: This will change the meta title of your app to \"Traingenerator.\" This makes it easier for people to find your app by searching for \"Traingenerator\" or \"train generator streamlit app\":", "prev_chunk_id": "chunk_805", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_807", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "Customize your app's meta description", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "Customize your app's meta description", "content": "Customize your app's meta description Meta descriptions are the short descriptions that appear in search engine results. Search engines use the meta description to help users understand what your app is about. From our observations, search engines seem to favor the content in both st.header and st.text over st.title. If you put a description at the top of your app under st.header or st.text, there’s a good chance search engines will use this for the meta description.", "prev_chunk_id": "chunk_806", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_808", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "What does my indexed app look like?", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "What does my indexed app look like?", "content": "What does my indexed app look like? If you're curious about what your app looks like in search engine results, you can type the following into Google Search: Example: site:traingenerator.streamlit.app", "prev_chunk_id": "chunk_807", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_809", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "What if I don't want my app to be indexed?", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "What if I don't want my app to be indexed?", "content": "What if I don't want my app to be indexed? If you don't want your app to be indexed by search engines, you can make it private. Read Share your app to learn more about making your app private. Note: each workspace can only have one private app. If you want to make your app private, you must first delete any other private app in your workspace or make it public. That said, Community Cloud is an open and free platform for the community to deploy, discover, and share Streamlit apps and code with each other. As such, we encourage you to make your app public so that it can be indexed by search engines and discovered by other Streamlit users and community members.", "prev_chunk_id": "chunk_808", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_810", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/indexability", "title": "Still have questions?", "page_title": "SEO and search indexability - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_809", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_811", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowparkconnection", "title": "Still have questions?", "page_title": "st.connections.SnowparkConnection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_812", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Embed your app", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Embed your app", "content": "Embed your app Embedding Streamlit Community Cloud apps enriches your content by integrating interactive, data-driven applications directly within your pages. Whether you're writing a blog post, a technical document, or sharing resources on platforms like Medium, Notion, or even StackOverflow, embedding Streamlit apps adds a dynamic component to your content. This allows your audience to interact with your ideas, rather than merely reading about them or looking at screenshots. Streamlit Community Cloud supports both iframe and oEmbed methods for embedding public apps. This flexibility enables you to share your apps across a wide array of platforms, broadening your app's visibility and impact. In this guide, we'll cover how to use both methods effectively to share your Streamlit apps with the world.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_813", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Embedding with iframes", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Embedding with iframes", "content": "Embedding with iframes Streamlit Community Cloud supports embedding public apps using the subdomain scheme. To embed a public app, add the query parameter /?embed=true to the end of the *.streamlit.app URL. For example, say you want to embed the 30DaysOfStreamlit app. The URL to include in your iframe is: https://30days.streamlit.app/?embed=true: In addition to allowing you to embed apps via iframes, the ?embed=true query parameter also does the following: - Removes the toolbar with the app menu icon (more_vert). - Removes the padding at the top and bottom of the app. - Removes the footer. - Removes the colored line from the top of the app. For granular control over the embedding behavior, Streamlit allows you to specify one or more instances of the ?embed_options query parameter (e.g. to show the toolbar, open the app in dark theme, etc). Click here for a full list of Embed options.", "prev_chunk_id": "chunk_812", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_814", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Embedding with oEmbed", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Embedding with oEmbed", "content": "Embedding with oEmbed Streamlit's oEmbed support allows for a simpler embedding experience. You can directly drop a Streamlit app's URL into a Medium, Ghost, or Notion page (or any of more than 700 content providers that supports oEmbed or embed.ly). The embedded app will automatically appear! This helps Streamlit Community Cloud apps seamlessly integrate into these platforms, improving the visibility and accessibility of your apps.", "prev_chunk_id": "chunk_813", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_815", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Example", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Example", "content": "Example When creating content in a Notion page, Medium article, or Ghost blog, you only need to paste the app's URL and hit \"Enter.\" The app will then render automatically at that spot in your content. You can use your undecorated app URL without the ?embed=true query parameter. Here's an example of @chrieke's Prettymapp app embedded in a Medium article:", "prev_chunk_id": "chunk_814", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_816", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Key Sites for oEmbed", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Key Sites for oEmbed", "content": "Key Sites for oEmbed oEmbed should work out of the box for several platforms including but not limited to: - Medium - Notion - Looker - Tableau - Ghost - Discourse - StackOverflow - W3 - Reddit Please check the specific platform's documentation to verify support for oEmbed.", "prev_chunk_id": "chunk_815", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_817", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "iframe versus oEmbed", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "iframe versus oEmbed", "content": "iframe versus oEmbed The only noteworthy differences between the methods is that iframing allows you to customize the app's embedding behavior (e.g. showing the toolbar, opening the app in dark theme, etc) using the various ?embed_options described in the next section.", "prev_chunk_id": "chunk_816", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_818", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Embed options", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Embed options", "content": "Embed options When Embedding with iframes, Streamlit allows you to specify one or more instances of the ?embed_options query parameter for granular control over the embedding behavior. Both ?embed and ?embed_options are invisible to st.query_params and its precursors, st.experimental_get_query_params and st.experimental_set_query_params. You can't get or set their values. The supported values for ?embed_options are listed below: - Show the toolbar at the top right of the app which includes the app menu (more_vert), running man, and link to GitHub./?embed=true&embed_options=show_toolbar - Show padding at the top and bottom of the app./?embed=true&embed_options=show_padding - Show the footer reading \"Made with Streamlit.\" (This doesn't apply to Streamlit versions 1.29.0 and later since the footer was removed from the library.)/?embed=true&embed_options=show_footer - Show the colored line at the top of the app./?embed=true&embed_options=show_colored_line - Hide the \"skeleton\" that appears while an app is loading./?embed=true&embed_options=hide_loading_screen - Disable scrolling for the main body of the app. (The sidebar will still be scrollable.)/?embed=true&embed_options=disable_scrolling - Open the app with light theme./?embed=true&embed_options=light_theme - Open the app with dark theme./?embed=true&embed_options=dark_theme You can also combine the params:", "prev_chunk_id": "chunk_817", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_819", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Build an embed link", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Build an embed link", "content": "Build an embed link You can conveniently build an embed link for your app — right from your app! - From your app at<your-custom-subdomain>.streamlit.app, click \"Share\" in the upper-right corner. - Click \"Embed\" to access a list of selectable embed options. - Select your embed options and click \"Get embed link\" to copy the embed link to your clipboard.", "prev_chunk_id": "chunk_818", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_820", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/share-your-app/embed-your-app", "title": "Still have questions?", "page_title": "Embed your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_819", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_821", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/update-your-email", "title": "Update your email", "page_title": "Update your email - Streamlit Docs", "breadcrumbs": "Update your email", "content": "Update your email To update your email on Streamlit Community Cloud, you have two options: You can create a new account and merge your existing account into it, or you can use your GitHub account to update your email.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_822", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/update-your-email", "title": "Option 1: Create a new account and merge it", "page_title": "Update your email - Streamlit Docs", "breadcrumbs": "Option 1: Create a new account and merge it", "content": "Option 1: Create a new account and merge it Two Community Cloud accounts can't have the same GitHub account for source control. When you connect a GitHub account to a new Community Cloud account for source control, Community Cloud will automatically merge any existing account with the same source control. Therefore, you can create a new account with the desired email and connect the same GitHub account to merge them together. - Create a new account with your new email. - Connect your GitHub account. Your old and new accounts are now merged, and you have effectively changed your email address.", "prev_chunk_id": "chunk_821", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_823", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/update-your-email", "title": "Option 2: Use your GitHub account", "page_title": "Update your email - Streamlit Docs", "breadcrumbs": "Option 2: Use your GitHub account", "content": "Option 2: Use your GitHub account Alternatively, you can change the email on your GitHub account and then sign in to Community Cloud with GitHub. - Go to GitHub, and set your primary email address to your new email. - If you are currently signed in to Community Cloud, sign out. - Sign in to Community Cloudusing GitHub.If you are redirected to your workspace and you see your existing apps, you're done! Your email has been changed. To confirm your current email and GitHub account, click on your workspace name in the upper-left corner, and look at the bottom of the drop-down menu.If you are redirected to an empty workspace and you see \"Workspaceswarning\" in the upper-left corner, proceed toConnect your GitHub account. This can happen if you previously created an account with your new email but didn't connect a GitHub account to it.", "prev_chunk_id": "chunk_822", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_824", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/update-your-email", "title": "Still have questions?", "page_title": "Update your email - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_823", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_825", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection", "title": "Manage your GitHub connection", "page_title": "Manage your GitHub connection - Streamlit Docs", "breadcrumbs": "Manage your GitHub connection", "content": "Manage your GitHub connection If you have created an account but not yet connected GitHub, see Connect your GitHub account. If you have already connected your GitHub account but still need to allow Streamlit Community Cloud to access private repositories, see Optional: Add access to private repositories.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_826", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection", "title": "Add access to an organization", "page_title": "Manage your GitHub connection - Streamlit Docs", "breadcrumbs": "Add access to an organization", "content": "Add access to an organization If you are in an organization, you can grant or request access to that organization when you connect your GitHub account. For more information, see Organization access. If your GitHub account is already connected, you can remove permissions in your GitHub settings and force Streamlit to reprompt for GitHub authorization the next time you sign in to Community Cloud.", "prev_chunk_id": "chunk_825", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_827", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection", "title": "Revoke and reauthorize", "page_title": "Manage your GitHub connection - Streamlit Docs", "breadcrumbs": "Revoke and reauthorize", "content": "Revoke and reauthorize - From your workspace, click on your workspace name in the upper-right corner. To sign out of Community Cloud, click \"Sign out.\" - Go to your GitHub application settings atgithub.com/settings/applications. - Find the \"Streamlit\" application, and click on the three dots (more_horiz) to open the overflow menu.If you have ever signed in to Community Cloud using GitHub, you will also see the \"Streamlit Community Cloud\" application in your GitHub account. The \"Streamlit\" application manages repository access. The \"Streamlit Community Cloud\" application is only for managing your identity (email) on Community Cloud. You only need to revoke access to the \"Streamlit\" application. - Click \"Revoke.\" - Click \"I understand, revoke access.\" - Return toshare.streamlit.ioand sign in. You will be prompted to authorize GitHub as explained inConnect GitHub.", "prev_chunk_id": "chunk_826", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_828", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection", "title": "Granting previously denied access", "page_title": "Manage your GitHub connection - Streamlit Docs", "breadcrumbs": "Granting previously denied access", "content": "Granting previously denied access If an organization owner has restricted Streamlit's access or restricted all OAuth applications, they may need to directly modify their permissions in GitHub. If an organization has restricted Streamlit's access, a red X (close) will appear next to the organization when you are prompted to authorize with your GitHub account. See GitHub's documentation on OAuth apps and organizations.", "prev_chunk_id": "chunk_827", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_829", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection", "title": "Rename your GitHub account or repositories", "page_title": "Manage your GitHub connection - Streamlit Docs", "breadcrumbs": "Rename your GitHub account or repositories", "content": "Rename your GitHub account or repositories Community Cloud identifies apps by their GitHub coordinates (owner, repository, branch, entrypoint file path). If you rename your account or repository from which you've deployed an app, you will lose access to administer the app. To learn more, see Rename your app in GitHub.", "prev_chunk_id": "chunk_828", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_830", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/manage-your-github-connection", "title": "Still have questions?", "page_title": "Manage your GitHub connection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_829", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_831", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/workspace-settings", "title": "Workspace settings", "page_title": "Workspace settings - Streamlit Docs", "breadcrumbs": "Workspace settings", "content": "Workspace settings From your workspace settings you can Manage your account, see your App resources and limits and access support resources.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_832", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/workspace-settings", "title": "Access your workspace settings", "page_title": "Workspace settings - Streamlit Docs", "breadcrumbs": "Access your workspace settings", "content": "Access your workspace settings - Sign in toshare.streamlit.io. - In the upper-left corner, click on your workspace name. - In the drop-down menu, click \"Settings.\"", "prev_chunk_id": "chunk_831", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_833", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/workspace-settings", "title": "Linked accounts", "page_title": "Workspace settings - Streamlit Docs", "breadcrumbs": "Linked accounts", "content": "Linked accounts The \"Linked accounts\" section shows your current email identity and source control account. To learn more, see Manage your account.", "prev_chunk_id": "chunk_832", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_834", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/workspace-settings", "title": "Limits", "page_title": "Workspace settings - Streamlit Docs", "breadcrumbs": "Limits", "content": "Limits The \"Limits\" section shows your current resources and limits. To learn more, see App resources and limits.", "prev_chunk_id": "chunk_833", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_835", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/workspace-settings", "title": "Support", "page_title": "Workspace settings - Streamlit Docs", "breadcrumbs": "Support", "content": "Support The \"Support\" section provides a convenient list of useful resources so you know where to go for help.", "prev_chunk_id": "chunk_834", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_836", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/workspace-settings", "title": "Still have questions?", "page_title": "Workspace settings - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_835", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_837", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/supported-browsers", "title": "What browsers does Streamlit support?", "page_title": "What browsers does Streamlit support? - Streamlit Docs", "breadcrumbs": "What browsers does Streamlit support?", "content": "What browsers does Streamlit support? The latest version of Streamlit is compatible with the two most recent versions of the following browsers: - Google Chrome - Firefox - Microsoft Edge - Safari", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_838", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/supported-browsers", "title": "Still have questions?", "page_title": "What browsers does Streamlit support? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_837", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_839", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/remove-streamlit-app-title", "title": "How to remove \"· Streamlit\" from the app title?", "page_title": "How to remove \"· Streamlit\" from the app title? - Streamlit Docs", "breadcrumbs": "How to remove \"· Streamlit\" from the app title?", "content": "How to remove \"· Streamlit\" from the app title? Using st.set_page_config to assign the page title will not append \"· Streamlit\" to that title. E.g.:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_840", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/remove-streamlit-app-title", "title": "Still have questions?", "page_title": "How to remove \"· Streamlit\" from the app title? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_839", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_841", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out", "title": "Sign in & sign out", "page_title": "Sign in & sign out - Streamlit Docs", "breadcrumbs": "Sign in & sign out", "content": "Sign in & sign out After you've created your account, you can sign in to share.streamlit.io as described by the following options.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_842", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out", "title": "Sign in with Google", "page_title": "Sign in & sign out - Streamlit Docs", "breadcrumbs": "Sign in with Google", "content": "Sign in with Google - Click \"Continue to sign-in.\" - Click \"Continue with Google.\" - Enter your Google account credentials and follow the prompts. If your account is already linked to GitHub, you may be immediately prompted to sign in with GitHub.", "prev_chunk_id": "chunk_841", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_843", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out", "title": "Sign in with GitHub", "page_title": "Sign in & sign out - Streamlit Docs", "breadcrumbs": "Sign in with GitHub", "content": "Sign in with GitHub - Click \"Continue to sign-in.\" - Click \"Continue with GitHub.\" - Enter your GitHub credentials and follow the prompts.", "prev_chunk_id": "chunk_842", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_844", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out", "title": "Sign in with Email", "page_title": "Sign in & sign out - Streamlit Docs", "breadcrumbs": "Sign in with Email", "content": "Sign in with Email - Click \"Continue to sign-in.\" - In the \"Email\" field, enter your email address. - Click \"Continue.\" (If prompted, verify you are human.) - Go to your email inbox, and copy your one-time, six-digit code. The code is valid for ten minutes. - Return to the authentication page, and enter your code. (If prompted, verify you are human.) If your account is already linked to GitHub, you may be immediately prompted to sign in with GitHub.", "prev_chunk_id": "chunk_843", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_845", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out", "title": "Sign out of your account", "page_title": "Sign in & sign out - Streamlit Docs", "breadcrumbs": "Sign out of your account", "content": "Sign out of your account From your workspace, click on your workspace name in the upper-left corner. Click \"Sign out.\"", "prev_chunk_id": "chunk_844", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_846", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-account/sign-in-sign-out", "title": "Still have questions?", "page_title": "Sign in & sign out - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_845", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_847", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/rename-your-app", "title": "Rename or change your app's GitHub coordinates", "page_title": "Rename or change your app's GitHub coordinates - Streamlit Docs", "breadcrumbs": "Rename or change your app's GitHub coordinates", "content": "Rename or change your app's GitHub coordinates Streamlit Community Cloud identifies apps by their GitHub coordinates (owner, repository, branch, entrypoint file path). If you move or rename one of these coordinates without preparation, you will lose access to administer any associated app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_848", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/rename-your-app", "title": "Delete, rename, redeploy", "page_title": "Rename or change your app's GitHub coordinates - Streamlit Docs", "breadcrumbs": "Delete, rename, redeploy", "content": "Delete, rename, redeploy If you need to rename your repository, move your entrypoint file, or otherwise change a deployed app's GitHub coordinates, do the following: - Delete your app. - Make your desired changes in GitHub. - Redeploy your app.", "prev_chunk_id": "chunk_847", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_849", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/rename-your-app", "title": "Regain access when you've already made changes to your app's GitHub coordinates", "page_title": "Rename or change your app's GitHub coordinates - Streamlit Docs", "breadcrumbs": "Regain access when you've already made changes to your app's GitHub coordinates", "content": "Regain access when you've already made changes to your app's GitHub coordinates If you have changed a repository so that Community Cloud can no longer find your app on GitHub, your app will be missing or shown as view-only. View-only means that you can't edit, reboot, delete, or view settings for your app. You can only access analytics. You may be able to regain control as follows: - Revert the change you made to your app so that Community Cloud can see the owner, repository, branch, and entrypoint file it expects. - Sign out of Community Cloud and GitHub. - Sign back in to Community Cloud and GitHub. - If you have regained access, delete your app. Proceed with your original change, and redeploy your app.If this does not restore access to your app, pleasecontact Snowflake supportfor assistance. They can delete your disconnected apps so you can redeploy them. For the quickest help, please provide a complete list of your affected apps by URL.", "prev_chunk_id": "chunk_848", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_850", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/rename-your-app", "title": "Still have questions?", "page_title": "Rename or change your app's GitHub coordinates - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_849", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_851", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app", "title": "Reboot your app", "page_title": "Reboot your app - Streamlit Docs", "breadcrumbs": "Reboot your app", "content": "Reboot your app If you need to clear your app's memory or force a fresh build after modifying a file that Streamlit Community Cloud doesn't monitor, you may need to reboot your app. This will interrupt any user who may currently be using your app and may take a few minutes for your app to redeploy. Anyone visiting your app will see \"Your app is in the oven\" during a reboot. Rebooting your app on Community Cloud is easy! You can reboot your app: - From your workspace. - From your Cloud logs.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_852", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app", "title": "Reboot your app from your workspace", "page_title": "Reboot your app - Streamlit Docs", "breadcrumbs": "Reboot your app from your workspace", "content": "Reboot your app from your workspace - From your workspace atshare.streamlit.io, click the overflow icon (more_vert) next to your app. Click \"Reboot.\" - A confirmation will display. Click \"Reboot.\"", "prev_chunk_id": "chunk_851", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_853", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app", "title": "Reboot your app from your Cloud logs", "page_title": "Reboot your app - Streamlit Docs", "breadcrumbs": "Reboot your app from your Cloud logs", "content": "Reboot your app from your Cloud logs - From your app at<your-custom-subdomain>.streamlit.app, click \"Manage app\" in the lower-right corner. - Click the overflow menu icon (more_vert) and click \"Reboot app.\" - A confirmation will display. Click \"Reboot.\"", "prev_chunk_id": "chunk_852", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_854", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/reboot-your-app", "title": "Still have questions?", "page_title": "Reboot your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_853", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_855", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/favorite-your-app", "title": "Favorite your app", "page_title": "Favorite your app - Streamlit Docs", "breadcrumbs": "Favorite your app", "content": "Favorite your app Streamlit Community Cloud supports a \"favorite\" feature that lets you quickly access your apps from your workspace. Favorited apps appear at the top of their workspace with a yellow star (star) beside them. You can favorite and unfavorite apps in any workspace to which you have access as a developer or invited viewer. You can favorite your app: - From your workspace. - From your app! - From your workspace atshare.streamlit.io, hover over your app.If your app is not yet favorited, a star outline (star_border) will appear on hover. - Click on the star (star_border/star) next to your app name to toggle its favorited status. From your app at <your-custom-subdomain>.streamlit.app, click the star (star_border/star) in the upper-right corner to toggle your app's favorited status.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_856", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/favorite-your-app", "title": "Favoriting and unfavoriting your app", "page_title": "Favorite your app - Streamlit Docs", "breadcrumbs": "Favoriting and unfavoriting your app", "content": "Favoriting and unfavoriting your app You can favorite your app: - From your workspace. - From your app!", "prev_chunk_id": "chunk_855", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_857", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/favorite-your-app", "title": "Favorite your app from your workspace", "page_title": "Favorite your app - Streamlit Docs", "breadcrumbs": "Favorite your app from your workspace", "content": "Favorite your app from your workspace - From your workspace atshare.streamlit.io, hover over your app.If your app is not yet favorited, a star outline (star_border) will appear on hover. - Click on the star (star_border/star) next to your app name to toggle its favorited status.", "prev_chunk_id": "chunk_856", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_858", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/favorite-your-app", "title": "Favorite your app from your app toolbar", "page_title": "Favorite your app - Streamlit Docs", "breadcrumbs": "Favorite your app from your app toolbar", "content": "Favorite your app from your app toolbar From your app at <your-custom-subdomain>.streamlit.app, click the star (star_border/star) in the upper-right corner to toggle your app's favorited status.", "prev_chunk_id": "chunk_857", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_859", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/favorite-your-app", "title": "Still have questions?", "page_title": "Favorite your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_858", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_860", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/delete-your-app", "title": "Delete your app", "page_title": "Delete your app - Streamlit Docs", "breadcrumbs": "Delete your app", "content": "Delete your app If you need to delete your app, it's simple and easy. There are several cases where you may need to delete your app: - You have finished playing around with an example app. - You want to deploy from a private repository but already have a private app. - You want tochange the Python versionfor your app. - You want torename your repositoryor move your entrypoint file. If you delete your app and intend to immediately redploy it, your custom subdomain should be immediately available for reuse. Read more about data deletion in Streamlit trust and security. You can delete your app: - From your workspace. - From your Cloud logs.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_861", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/delete-your-app", "title": "Delete your app from your workspace", "page_title": "Delete your app - Streamlit Docs", "breadcrumbs": "Delete your app from your workspace", "content": "Delete your app from your workspace - From your workspace atshare.streamlit.io, click the overflow icon (more_vert) next to your app. Click \"Delete.\" - A confirmation will display. Enter the required confirmation string and click \"Delete.\"", "prev_chunk_id": "chunk_860", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_862", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/delete-your-app", "title": "Delete your app from your Cloud logs", "page_title": "Delete your app - Streamlit Docs", "breadcrumbs": "Delete your app from your Cloud logs", "content": "Delete your app from your Cloud logs - From your app at<your-custom-subdomain>.streamlit.app, click \"Manage app\" in the lower-right corner. - Click the overflow menu icon (more_vert) and click \"Delete app.\" - A confirmation will display. Enter the required confirmation string and click \"Delete.\"", "prev_chunk_id": "chunk_861", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_863", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/delete-your-app", "title": "Still have questions?", "page_title": "Delete your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_862", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_864", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "App settings", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "App settings", "content": "App settings This page is about your app settings on Streamlit Community Cloud. From your app settings you can view or change your app's URL, manage public or private access to your app, and update your saved secrets for your apps. If you access \"Settings\" from your app chrome in the upper-right corner of your running app, you can access features to control the appearance of your app while it's running.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_865", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "Access your app settings", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "Access your app settings", "content": "Access your app settings You can get to your app's settings: - From your workspace. - From your Cloud logs.", "prev_chunk_id": "chunk_864", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_866", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "Access app settings from your workspace", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "Access app settings from your workspace", "content": "Access app settings from your workspace From your workspace at share.streamlit.io, click the overflow icon (more_vert) next to your app. Click \"Settings.\"", "prev_chunk_id": "chunk_865", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_867", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "Access app settings from your Cloud logs", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "Access app settings from your Cloud logs", "content": "Access app settings from your Cloud logs From your app at <your-custom-subdomain>.streamlit.app, click \"Manage app\" in the lower-right corner. Click the overflow menu icon (more_vert) and click \"Settings.\"", "prev_chunk_id": "chunk_866", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_868", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "View or change your app's URL", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "View or change your app's URL", "content": "View or change your app's URL To view or customize your app subdomain from the dashboard: - Access your app's settings as described above. - On the \"General\" tab in the \"App settings\" dialog, see your app's unique subdomain in the \"App URL\" field. - Optional: Enter a new, custom subdomain between 6 and 63 characters in length, and then click \"Save.\"If a custom subdomain is not available (e.g. because it's already taken or contains restricted words), you'll see an error message. Change your subdomain as indicated.", "prev_chunk_id": "chunk_867", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_869", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "Update your app's share settings", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "Update your app's share settings", "content": "Update your app's share settings Learn how to Share your app.", "prev_chunk_id": "chunk_868", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_870", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "View or update your secrets", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "View or update your secrets", "content": "View or update your secrets - Access your app's settings as described above. - On the \"Secrets\" tab in the \"App settings\" dialog, see your app's secrets in the \"Secrets\" field. - Optional: Add, edit, or delete your secrets, and then click \"Save.\" Learn more about Secrets management for your Community Cloud app.", "prev_chunk_id": "chunk_869", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_871", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings", "title": "Still have questions?", "page_title": "App settings - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_870", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_872", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-analytics", "title": "App analytics", "page_title": "App analytics - Streamlit Docs", "breadcrumbs": "App analytics", "content": "App analytics Streamlit Community Cloud allows you to see the viewership of each of your apps. Specifically, you can see: - The total viewers count of your app (counted from April 2022). - The most recent unique viewers (capped at the last 20 viewers). - A relative timestamp of each unique viewer's last visit.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_873", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-analytics", "title": "Access your app analytics", "page_title": "App analytics - Streamlit Docs", "breadcrumbs": "Access your app analytics", "content": "Access your app analytics You can get to your app's analytics: - From your workspace. - From your Cloud logs.", "prev_chunk_id": "chunk_872", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_874", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-analytics", "title": "Access app analytics from your workspace", "page_title": "App analytics - Streamlit Docs", "breadcrumbs": "Access app analytics from your workspace", "content": "Access app analytics from your workspace From your workspace at share.streamlit.io, click the overflow icon (more_vert) next to your app. Click \"Analytics.\"", "prev_chunk_id": "chunk_873", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_875", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-analytics", "title": "Access app analytics from your Cloud logs", "page_title": "App analytics - Streamlit Docs", "breadcrumbs": "Access app analytics from your Cloud logs", "content": "Access app analytics from your Cloud logs From your app at <your-custom-subdomain>.streamlit.app, click \"Manage app\" in the lower-right corner. Click the overflow menu icon (more_vert) and click \"Analytics.\"", "prev_chunk_id": "chunk_874", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_876", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-analytics", "title": "App viewers", "page_title": "App analytics - Streamlit Docs", "breadcrumbs": "App viewers", "content": "App viewers For public apps, we anonymize all viewers outside your workspace to protect their privacy and display anonymous viewers as random pseudonyms. You'll still be able to see the identities of fellow members in your workspace, including any viewers you've invited (once they've accepted). Meanwhile, for private apps where you control who has access, you will be able to see the specific users who recently viewed your apps. Additionally, you may occasionally see anonymous users in a private app. Rest assured, these anonymous users do have authorized view access granted by you or your workspace members. Common reasons why users show up anonymously are: - The app was previously public. - The given viewer viewed the app in April 2022, when the Streamlit team was honing user identification for this feature. See Streamlit's general Privacy Notice.", "prev_chunk_id": "chunk_875", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_877", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-analytics", "title": "Still have questions?", "page_title": "App analytics - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_876", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_878", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "Explore your workspace", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "Explore your workspace", "content": "Explore your workspace If you just created your account and connected your GitHub account, congrats! You are now signed in and ready to go. If you are joining someone else's workspace you may already see some apps.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_879", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "Workspaces", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "Workspaces", "content": "Workspaces Each GitHub account and organization is associated with a workspace in Community Cloud. When you sign in to Community Cloud for the first time, you will land in your personal workspace associated with your GitHub user account. The upper-left corner of Community Cloud shows your current workspace.", "prev_chunk_id": "chunk_878", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_880", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "Switching workspaces", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "Switching workspaces", "content": "Switching workspaces To switch between workspaces, click the workspace name in the upper-left corner and select a new workspace. Other workspaces are available to you as follows: - When you have write permissions to a repository and the repository owner has joined Community Cloud, you can select the associated workspace. An owner can be a GitHub user or organization. - If someone has shared an app with you through Community Cloud, you will see the app's associated workspace. This is view-only access.", "prev_chunk_id": "chunk_879", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_881", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "Invite other developers to your workspace", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "Invite other developers to your workspace", "content": "Invite other developers to your workspace Inviting other developers is simple: Just give them write access to your GitHub repository so that you can code together. When they sign in to share.streamlit.io, they'll have access to your workspace. Streamlit Community Cloud inherits developer permissions from GitHub. When others sign in to Community Cloud, they will automatically see the workspaces they share with you. From there you can all deploy, manage, and share apps together. And remember, whenever anyone on the team updates the code on GitHub, the app will automatically update for you!", "prev_chunk_id": "chunk_880", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_882", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "My apps", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "My apps", "content": "My apps The \"My apps\" section of your workspace is your base of operations to deploy and manage your apps. When you deploy an app, it is added to this section of your workspace.", "prev_chunk_id": "chunk_881", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_883", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "Deploying apps", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "Deploying apps", "content": "Deploying apps If you already have an app saved to a GitHub repo, you can deploy it directly. Otherwise, Community Cloud provides templates you can use. When you deploy from a template, Community Cloud will fork a project into your GitHub account and deploy from the new fork. This is a convenient way to get started if you haven't already created a Streamlit app. To get started, just click \"Create app\" in the upper-right corner. To learn more, see Deploy your app and Deploy from a template.", "prev_chunk_id": "chunk_882", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_884", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "My profile", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "My profile", "content": "My profile The \"My profile\" section of your workspace lets you customize a personal portfolio of Streamlit apps to share with the world. Curate and feature your Streamlit apps to show off your work.", "prev_chunk_id": "chunk_883", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_885", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "Explore", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "Explore", "content": "Explore For inspiration, check out the \"Explore\" section. This is a gallery of Streamlit apps created by the Streamlit community. Check out popular and trending apps, or search for apps in an area that interests you.", "prev_chunk_id": "chunk_884", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_886", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/explore-your-workspace", "title": "Still have questions?", "page_title": "Explore your workspace - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_885", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_887", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Connect your GitHub account", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Connect your GitHub account", "content": "Connect your GitHub account Connecting GitHub to your Streamlit Community Cloud account allows you to deploy apps directly from the files you store in your repositories. It also lets the system check for updates to those files and automatically update your apps. When you first connect your GitHub account to your Community Cloud account, you'll be able to deploy apps from your public repositories to Community Cloud. If you want to deploy from private repositories, you can give Community Cloud additional permissions to do so. For more information about these permissions, see GitHub OAuth scope. If you are a member of a GitHub organization, that organization is displayed at the bottom of each GitHub OAuth prompt. In this case, we recommend reading about Organization access at the end of this page before performing the steps to connect your GitHub account. You must be an organization's owner in GitHub to grant access to that organization. - You must have a Community Cloud account. SeeCreate your account. - You must have a GitHub account. - In the upper-left corner, click \"Workspaceswarning.\" - From the drop down, click \"Connect GitHub account.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Click \"Authorize streamlit.\"This adds the \"Streamlit\" OAuth application to your GitHub account. This allows Community Cloud to work with your public repositories and create codespaces for you. In the next section, you can allow Community Cloud to access your private repositories, too. For more information about using and reviewing the OAuth applications on your account, seeUsing OAuth appsin GitHub's docs. After your Community Cloud account has access to deploy from your public repositories, you can follow these additional steps to grant access to your private repositories. - In the upper-left corner, click on your GitHub username. - From the drop down,", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_888", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Connect your GitHub account", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Connect your GitHub account", "content": "click \"Settings.\" - On the left side of the dialog, select \"Linked accounts.\" - Under \"Source control,\" click \"Connect herearrow_forward.\" - Click \"Authorize streamlit.\" To deploy apps from repositories owned by a GitHub organization, Community Cloud must have permission to access the organization's repositories. If you are a member of a GitHub organization when you connect your GitHub account, your OAuth prompts will include a section labeled \"Organization access.\" If you have already connected your GitHub account and need to add access to an organization, follow the steps in Manage your GitHub connection to disconnect your GitHub account and start over. Alternatively, if you are not the owner of an organization, you can ask the owner to create a Community Cloud account for themselves and add permission directly. For any organization you own, if authorization has not been previously granted or denied, you can click \"Grant\" before you click \"Authorize streamlit.\" For an organization you don't own, if authorization has not been previously granted or denied, you can click \"Request\" before you click \"Authorize streamlit.\" If someone has already started the process of authorizing Streamlit for your organization, the OAuth prompt will show the current status. If an organization has already granted Streamlit access, the OAuth prompt shows a green check (check). If a request has been previously sent but not yet approved, the OAuth prompt show \"Access request pending.\" Follow up with the organization's owner to accept the request in GitHub. If a request has been previously sent and denied, the OAuth prompt shows a red X (close). In this case, the organization owner will need to authorize Streamlit from GitHub. See GitHub's documentation on OAuth apps and organizations. Now that you have your account you can Explore your workspace. Or if you're ready to go, jump right in", "prev_chunk_id": "chunk_887", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_889", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Connect your GitHub account", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Connect your GitHub account", "content": "and Deploy your app.", "prev_chunk_id": "chunk_888", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_890", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Prerequisites", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - You must have a Community Cloud account. SeeCreate your account. - You must have a GitHub account.", "prev_chunk_id": "chunk_889", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_891", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Add access to public repositories", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Add access to public repositories", "content": "Add access to public repositories - In the upper-left corner, click \"Workspaceswarning.\" - From the drop down, click \"Connect GitHub account.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Click \"Authorize streamlit.\"This adds the \"Streamlit\" OAuth application to your GitHub account. This allows Community Cloud to work with your public repositories and create codespaces for you. In the next section, you can allow Community Cloud to access your private repositories, too. For more information about using and reviewing the OAuth applications on your account, seeUsing OAuth appsin GitHub's docs.", "prev_chunk_id": "chunk_890", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_892", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Optional: Add access to private repositories", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Optional: Add access to private repositories", "content": "Optional: Add access to private repositories After your Community Cloud account has access to deploy from your public repositories, you can follow these additional steps to grant access to your private repositories. - In the upper-left corner, click on your GitHub username. - From the drop down, click \"Settings.\" - On the left side of the dialog, select \"Linked accounts.\" - Under \"Source control,\" click \"Connect herearrow_forward.\" - Click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_891", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_893", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Organization access", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Organization access", "content": "Organization access To deploy apps from repositories owned by a GitHub organization, Community Cloud must have permission to access the organization's repositories. If you are a member of a GitHub organization when you connect your GitHub account, your OAuth prompts will include a section labeled \"Organization access.\" If you have already connected your GitHub account and need to add access to an organization, follow the steps in Manage your GitHub connection to disconnect your GitHub account and start over. Alternatively, if you are not the owner of an organization, you can ask the owner to create a Community Cloud account for themselves and add permission directly.", "prev_chunk_id": "chunk_892", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_894", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Organizations you own", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Organizations you own", "content": "Organizations you own For any organization you own, if authorization has not been previously granted or denied, you can click \"Grant\" before you click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_893", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_895", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Organizations owned by others", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Organizations owned by others", "content": "Organizations owned by others For an organization you don't own, if authorization has not been previously granted or denied, you can click \"Request\" before you click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_894", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_896", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Previous or pending authorization", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Previous or pending authorization", "content": "Previous or pending authorization If someone has already started the process of authorizing Streamlit for your organization, the OAuth prompt will show the current status.", "prev_chunk_id": "chunk_895", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_897", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Approved access", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Approved access", "content": "Approved access If an organization has already granted Streamlit access, the OAuth prompt shows a green check (check).", "prev_chunk_id": "chunk_896", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_898", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Pending access", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Pending access", "content": "Pending access If a request has been previously sent but not yet approved, the OAuth prompt show \"Access request pending.\" Follow up with the organization's owner to accept the request in GitHub.", "prev_chunk_id": "chunk_897", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_899", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Denied access", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Denied access", "content": "Denied access If a request has been previously sent and denied, the OAuth prompt shows a red X (close). In this case, the organization owner will need to authorize Streamlit from GitHub. See GitHub's documentation on OAuth apps and organizations.", "prev_chunk_id": "chunk_898", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_900", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "What's next?", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "What's next?", "content": "What's next? Now that you have your account you can Explore your workspace. Or if you're ready to go, jump right in and Deploy your app.", "prev_chunk_id": "chunk_899", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_901", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/connect-your-github-account", "title": "Still have questions?", "page_title": "Connect your GitHub account - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_900", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_902", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account", "title": "Create your account", "page_title": "Create your account - Streamlit Docs", "breadcrumbs": "Create your account", "content": "Create your account Before you can start deploying apps for the world to see, you need to sign up for your Streamlit Community Cloud account. Each Community Cloud account is associated with an email. Two accounts can't have the same email. When sharing a private app, you will assign viewing privileges by email. Additionally, two accounts can't have the same source control (GitHub account). If you try to create a second Community Cloud account with the same source control, Community Cloud will merge the accounts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_903", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account", "title": "Sign up", "page_title": "Create your account - Streamlit Docs", "breadcrumbs": "Sign up", "content": "Sign up Community Cloud allows you to sign in using one of the three following methods: - Emailed, one-use codes - Google - GitHub - Go toshare.streamlit.io. - Click \"Continue to sign-in.\" - Continue with one of the three options listed below.Option 1: Sign in using emailed codesIn the \"Email\" field, enter your email address.Click \"Continue.\" (If prompted, verify you are human.)Go to your email inbox, and copy your one-time, six-digit code. The code is valid for ten minutes.Return to the authentication page, and enter your code. (If prompted, verify you are human.)Option 2: Sign in using GoogleClick \"Continue with Google.\"Enter your Google credentials, and follow Google's authentication prompts.Option 3: Sign in using GitHubClick \"Continue with GitHub.\"Enter your GitHub credentials, and follow GitHub's authentication prompts.This adds the \"Streamlit Community Cloud\" OAuth application to your GitHub account. This application is only used to pass your email when you sign in to Community Cloud. On the next page, you'll perform additional steps to allow Community Cloud to access your repositories. For more information about using and reviewing the OAuth applications on your account, seeUsing OAuth appsin GitHub's docs. - Fill in your information, and click \"Continue\" at the bottom.The \"Primary email\" field is prefilled with the email you used to sign in. If you change this email in the account setup form, it will only impact marketing emails; it will not reflect on your new account. To change the email associated with your account after it's created, seeUpdate your email address.", "prev_chunk_id": "chunk_902", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_904", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account", "title": "Option 1: Sign in using emailed codes", "page_title": "Create your account - Streamlit Docs", "breadcrumbs": "Option 1: Sign in using emailed codes", "content": "Option 1: Sign in using emailed codes - In the \"Email\" field, enter your email address. - Click \"Continue.\" (If prompted, verify you are human.) - Go to your email inbox, and copy your one-time, six-digit code. The code is valid for ten minutes. - Return to the authentication page, and enter your code. (If prompted, verify you are human.)", "prev_chunk_id": "chunk_903", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_905", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account", "title": "Option 2: Sign in using Google", "page_title": "Create your account - Streamlit Docs", "breadcrumbs": "Option 2: Sign in using Google", "content": "Option 2: Sign in using Google - Click \"Continue with Google.\" - Enter your Google credentials, and follow Google's authentication prompts.", "prev_chunk_id": "chunk_904", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_906", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account", "title": "Option 3: Sign in using GitHub", "page_title": "Create your account - Streamlit Docs", "breadcrumbs": "Option 3: Sign in using GitHub", "content": "Option 3: Sign in using GitHub - Click \"Continue with GitHub.\" - Enter your GitHub credentials, and follow GitHub's authentication prompts.This adds the \"Streamlit Community Cloud\" OAuth application to your GitHub account. This application is only used to pass your email when you sign in to Community Cloud. On the next page, you'll perform additional steps to allow Community Cloud to access your repositories. For more information about using and reviewing the OAuth applications on your account, seeUsing OAuth appsin GitHub's docs.", "prev_chunk_id": "chunk_905", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_907", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account", "title": "Finish up", "page_title": "Create your account - Streamlit Docs", "breadcrumbs": "Finish up", "content": "Finish up Congratulations on creating your Streamlit Community Cloud account! A warning icon (warning) next to \"Workspaces\" in the upper-left corner is expected; this indicates that your account is not yet connected to GitHub. Even if you created your account by signing in through GitHub, your account does not yet have permission to access your repositories. Continue to the next page to connect your GitHub account.", "prev_chunk_id": "chunk_906", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_908", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/create-your-account", "title": "Still have questions?", "page_title": "Create your account - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_907", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_909", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.experimental_connection", "title": "Still have questions?", "page_title": "st.experimental_connection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_910", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/secrets-management", "title": "Introduction", "page_title": "Secrets management for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction If you are connecting to data sources, you will likely need to handle credentials or secrets. Storing unencrypted secrets in a git repository is a bad practice. If your application needs access to sensitive credentials, the recommended solution is to store those credentials in a file that is not committed to the repository and to pass them as environment variables.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_911", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/secrets-management", "title": "How to use secrets management", "page_title": "Secrets management for your Community Cloud app - Streamlit Docs", "breadcrumbs": "How to use secrets management", "content": "How to use secrets management Community Cloud lets you save your secrets within your app's settings. When developing locally, you can use st.secrets in your code to read secrets from a .streamlit/secrets.toml file. However, this secrets.toml file should never be committed to your repository. Instead, when you deploy your app, you can paste the contents of your secrets.toml file into the \"Advanced settings\" dialog. You can update your secrets at any time through your app's settings in your workspace.", "prev_chunk_id": "chunk_910", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_912", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/secrets-management", "title": "Prerequisites", "page_title": "Secrets management for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - You should understand how to usest.secretsandsecrets.toml. SeeSecrets management.", "prev_chunk_id": "chunk_911", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_913", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/secrets-management", "title": "Advanced settings", "page_title": "Secrets management for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Advanced settings", "content": "Advanced settings While deploying your app, you can access \"Advanced settings\" to set your secrets. After your app is deployed, you can view or update your secrets through the app's settings. The deployment workflow is fully described on the next page, but the \"Advanced settings\" dialog looks like this: Simply copy and paste the contents of your local secrets.toml file into the \"Secrets\" field within the dialog. After you click \"Save\" to commit the changes, that's it!", "prev_chunk_id": "chunk_912", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_914", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/secrets-management", "title": "Edit your app's secrets", "page_title": "Secrets management for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Edit your app's secrets", "content": "Edit your app's secrets If you need to add or edit your secrets for an app that is already deployed, you can access secrets through your App settings. See View or update your secrets.", "prev_chunk_id": "chunk_913", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_915", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app/secrets-management", "title": "Still have questions?", "page_title": "Secrets management for your Community Cloud app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_914", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_916", "url": "https://docs.streamlit.io/develop/concepts/connections/security-reminders", "title": "Protect your secrets", "page_title": "Security reminders - Streamlit Docs", "breadcrumbs": "Protect your secrets", "content": "Protect your secrets Never save usernames, passwords, or security keys directly in your code or commit them to your repository.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_917", "url": "https://docs.streamlit.io/develop/concepts/connections/security-reminders", "title": "Use environment variables", "page_title": "Security reminders - Streamlit Docs", "breadcrumbs": "Use environment variables", "content": "Use environment variables Avoid putting sensitve information in your code by using environment variables. Be sure to check out st.secrets. Research any platform you use to follow their security best practices. If you use Streamlit Community Cloud, Secrets management allows you save environment variables and store secrets outside of your code.", "prev_chunk_id": "chunk_916", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_918", "url": "https://docs.streamlit.io/develop/concepts/connections/security-reminders", "title": "Keep .gitignore updated", "page_title": "Security reminders - Streamlit Docs", "breadcrumbs": "Keep .gitignore updated", "content": "Keep .gitignore updated If you use any sensitive or private information during development, make sure that information is saved in separate files from your code. Ensure .gitignore is properly configured to prevent saving private information to your repository.", "prev_chunk_id": "chunk_917", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_919", "url": "https://docs.streamlit.io/develop/concepts/connections/security-reminders", "title": "Pickle warning", "page_title": "Security reminders - Streamlit Docs", "breadcrumbs": "Pickle warning", "content": "Pickle warning Streamlit's st.cache_data and st.session_state implicitly use the pickle module, which is known to be insecure. It is possible to construct malicious pickle data that will execute arbitrary code during unpickling. Never load data that could have come from an untrusted source in an unsafe mode or that could have been tampered with. Only load data you trust. - When usingst.cache_data, anything your function returns is pickled and stored, then unpickled on retrieval. Ensure your cached functions return trusted values. This warning also applies tost.cache(deprecated). - When therunner.enforceSerializableSessionStateconfiguration optionis set totrue, ensure all data saved and retrieved from Session State is trusted.", "prev_chunk_id": "chunk_918", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_920", "url": "https://docs.streamlit.io/develop/concepts/connections/security-reminders", "title": "Still have questions?", "page_title": "Security reminders - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_919", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_921", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "2020 release notes", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "2020 release notes", "content": "2020 release notes This page contains release notes for Streamlit versions released in 2020. For the latest version of Streamlit, see Release notes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_922", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.73.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.73.0", "content": "Version 0.73.0 Release date: December 17, 2020 Notable Changes - 🐍 Streamlit can now be installed on Python 3.9. Streamlit components are not yet compatible with Python 3.9 and must use version 3.8 or earlier. - 🧱 Streamlit Components now allows same origin, enabling features provided by the browser such as a webcam component. - 🐙 Fix Streamlit sharing deploy experience for users running on Git versions 2.7.0 or earlier. - 🧰 Handle unexpected closing of uploaded files forst.file_uploader.", "prev_chunk_id": "chunk_921", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_923", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.72.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.72.0", "content": "Version 0.72.0 Release date: December 2, 2020 Notable Changes - 🌈 Establish a framework for theming and migrate existing components. - 📱 Improve the sidebar experience for mobile devices. - 🧰 Updatest.file_uploaderto reduce reruns.", "prev_chunk_id": "chunk_922", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_924", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.71.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.71.0", "content": "Version 0.71.0 Release date: November 11, 2020 Notable Changes - 📁 Updatedst.file_uploaderto automatically reset buffer on app reruns. - 📊 Optimize the default rendering of charts and reduce issues with the initial render.", "prev_chunk_id": "chunk_923", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_925", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.70.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.70.0", "content": "Version 0.70.0 Release date: October 28, 2020 Notable Changes - 🧪st.set_page_configandst.color_pickerhave now been moved into the Streamlit namespace. These will be removed from beta January 28th, 2021. Learn more about our beta processhere. - 📊 Improve display of bar charts for discrete values.", "prev_chunk_id": "chunk_924", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_926", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.69.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.69.0", "content": "Version 0.69.0 Release date: October 15, 2020 Highlights: - 🎁 Introducing Streamlit sharing, the best way to deploy, manage, and share your public Streamlit apps—for free. Read more about it on ourblog postor sign uphere! - Addedst.experimental_rerunto programatically re-run your app. ThanksSimonBiggs! Notable Changes - 📹 Better support across browsers for start and stop times for st.video. - 🖼 Bug fix for intermittently failing media files - 📦 Bug fix for custom components compatibility with Safari. Make sure to upgrade to the lateststreamlit-component-lib.", "prev_chunk_id": "chunk_925", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_927", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.68.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.68.0", "content": "Version 0.68.0 Release date: October 8, 2020 Highlights: - ⌗ Introducing new layout options for Streamlit! Move aside, vertical layout. Make a little space for... horizontal layout! Check out ourblog post. - 💾 File uploader redesigned with new functionality for multiple files uploads and better support for working with uploaded files. This may cause breaking changes. Please see the new api in ourdocumentation Notable Changes - 🎈st.balloonhas gotten a facelift with nicer balloons and smoother animations. - 🚨 Breaking Change: Following the deprecation ofst.deck_gl_chartin January 2020, we have now removed the API completely. Please usest.pydeck_chartinstead. - 🚨 Breaking Change: Following the deprecation ofwidthandheightforst.altair_chart,st.graphviz_chart,st.plotly_chart, andst.vega_lite_chartin January 2020, we have now removed the args completely. Please set the width and height in the respective charting library.", "prev_chunk_id": "chunk_926", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_928", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.67.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.67.0", "content": "Version 0.67.0 Release date: September 16, 2020 Highlights: - 🦷 Streamlit Components can now return bytes to your Streamlit App. To create a component that returns bytes, make sure to upgrade to the lateststreamlit-component-lib. Notable Changes - 📈 Deprecation warning: Beginning December 1st, 2020st.pyplot()will require a figure to be provided. To disable the deprecation warning, please setdeprecation.showPyplotGlobalUsetoFalse - 🎚st.multiselectandst.selectare now lightning fast when working with large datasets. Thanksmasa3141!", "prev_chunk_id": "chunk_927", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_929", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.66.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.66.0", "content": "Version 0.66.0 Release date: September 1, 2020 Highlights: - ✏️st.writeis now available for use in the sidebar! - 🎚 A slider for distinct or non-numerical values is now available withst.select_slider. - ⌗ Streamlit Components can now return dataframes to your Streamlit App. Check out ourSelectableDataTable example. - 📦 The Streamlit Components library used in our Streamlit Component template is now available as a npm package (streamlit-component-lib) to simplify future upgrades to the latest version. Existing components do not need to migrate. Notable Changes - 🐼 Support StringDtype from pandas version 1.0.0 - 🧦 Support for running Streamlit on Unix sockets", "prev_chunk_id": "chunk_928", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_930", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.65.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.65.0", "content": "Version 0.65.0 Release date: August 12, 2020 Highlights: - ⚙️ Ability to set page title, favicon, sidebar state, and wide mode via st.beta_set_page_config(). See ourdocumentationfor details. - 📝 Add stateful behaviors through the use of query parameters with st.experimental_set_query_params and st.experimental_get_query_params. Thanks@zhaoooyue! - 🐼 Improved pandas dataframe support for st.radio, st.selectbox, and st.multiselect. - 🛑 Break out of your Streamlit app with st.stop. - 🖼 Inline SVG support for st.image. Callouts: - 🚨Deprecation Warning: The st.image parameter format has been renamed to output_format.", "prev_chunk_id": "chunk_929", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_931", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.64.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.64.0", "content": "Version 0.64.0 Release date: July 23, 2020 Highlights: - 📊 Default matplotlib to display charts with a tight layout. To disable this, setbbox_inchestoNone, inches as a string, or aBbox - 🗃 Deprecation warning for automatic encoding onst.file_uploader - 🙈 IfgatherUserStatsisFalse, do not even load the Segment library. Thanks@tanmaylaud!", "prev_chunk_id": "chunk_930", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_932", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.63.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.63.0", "content": "Version 0.63.0 Release date: July 13, 2020 Highlights: - 🧩Support for Streamlit Components!!!Seedocumentationfor more info. - 🕗 Support for datetimes inst.slider. And, of course, just like any other value you use inst.slider, you can also pass in two-element lists to get a datetime range slider.", "prev_chunk_id": "chunk_931", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_933", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.62.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.62.0", "content": "Version 0.62.0 Release date: June 21, 2020 Highlights: - 📨 Ability to turn websocket compression on/off via the config optionserver.enableWebsocketCompression. This is useful if your server strips HTTP headers and you do not have access to change that behavior. - 🗝️ Out-of-the-box support for CSRF protection using theCookie-to-header tokentechnique. This means that if you're serving your Streamlit app from multiple replicas you'll need to configure them to to use the same cookie secret with theserver.cookieSecretconfig option. To turn XSRF protection off, setserver.enableXsrfProtection=false. Notable bug fixes: - 🖼️ Added a grace period to the image cache expiration logic in order to fix multiple related bugs where images sent withst.imageorst.pyplotwere sometimes missing.", "prev_chunk_id": "chunk_932", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_934", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.61.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.61.0", "content": "Version 0.61.0 Release date: June 2, 2020 Highlights: - 📅 Support for date ranges inst.date_picker. Seedocsfor more info, but the TLDR is: just pass a list/tuple as the default date and it will be interpreted as a range. - 🗣️ You can now choose whetherst.echoprints the code above or below the output of the echoed block. To learn more, refer to thecode_locationargument in thedocs. - 📦 Improved@st.cachesupport for Keras models and Tensorflowsaved_models.", "prev_chunk_id": "chunk_933", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_935", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.60.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.60.0", "content": "Version 0.60.0 Release date: May 18, 2020 Highlights: - ↕️ Ability to set the height of anst.text_areawith theheightargument (expressed in pixels). Seedocsfor more. - 🔡 Ability to set the maximimum number of characters allowed inst.text_areaorst.text_input. Check out themax_charsargument in thedocs. - 🗺️ Better DeckGL support for theH3geospatial indexing system. So now you can use things likeH3HexagonLayerinst.pydeck_chart. - 📦 Improved@st.cachesupport for PyTorch TensorBase and Model.", "prev_chunk_id": "chunk_934", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_936", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.59.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.59.0", "content": "Version 0.59.0 Release date: May 05, 2020 Highlights: - 🎨 New color-picker widget! Use it withst.beta_color_picker() - 🧪 Introducingst.beta_*andst.experimental_*function prefixes, for faster Streamlit feature releases. Seedocsfor more info. - 📦 Improved@st.cachesupport for SQL Alchemy objects, CompiledFFI, PyTorch Tensors, andbuiltins.mappingproxy.", "prev_chunk_id": "chunk_935", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_937", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.58.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.58.0", "content": "Version 0.58.0 Release date: April 22, 2020 Highlights: - 💼 Madest.selectboxfiltering case-insensitive. - ㈬ Better support for Tensorflow sessions in@st.cache. - 📊 Changed behavior ofst.pyplotto auto-clear the figure only when using the global Matplotlib figure (i.e. only when callingst.pyplot()rather thanst.pyplot(fig)).", "prev_chunk_id": "chunk_936", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_938", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.57.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.57.0", "content": "Version 0.57.0 Release date: March 26, 2020 Highlights: - ⏲️ Ability to set expiration options for@st.cache'ed functions by setting themax_entriesandttlarguments. Seedocs. - 🆙 Improved the machinery behindst.file_uploader, so it's much more performant now! Also increased the default upload limit to 200MB (configurable viaserver.max_upload_size). - 🔒 Theserver.addressconfig option nowbindsthe server to that address for added security. - 📄 Even more details added to error messages for@st.cachefor easier debugging.", "prev_chunk_id": "chunk_937", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_939", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.56.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.56.0", "content": "Version 0.56.0 Release date: February 15, 2020 Highlights: - 📄 Improved error messages for st.cache. The errors now also point to the new caching docs we just released. Read morehere! Breaking changes: - 🐍 Asannounced last month,Streamlit no longer supports Python 2.To use Streamlit you'll need Python 3.5 or above.", "prev_chunk_id": "chunk_938", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_940", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.55.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.55.0", "content": "Version 0.55.0 Release date: February 4, 2020 Highlights: - 📺Ability to record screencasts directly from Streamlit!This allows you to easily record and share explanations about your models, analyses, data, etc. Just click ☰ then \"Record a screencast\". Give it a try!", "prev_chunk_id": "chunk_939", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_941", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.54.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.54.0", "content": "Version 0.54.0 Release date: January 29, 2020 Highlights: - ⌨️ Support for password fields! Just passtype=\"password\"tost.text_input(). Notable fixes: - ✳️ Numerous st.cache improvements, including better support for complex objects. - 🗣️ Fixed cross-talk in sidebar between multiple users. Breaking changes: - If you're using the SessionStatehackGist, you should re-download it! Depending on which hack you're using, here are some links to save you some time:SessionState.pyst_state_patch.py", "prev_chunk_id": "chunk_940", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_942", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Version 0.53.0", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Version 0.53.0", "content": "Version 0.53.0 Release date: January 14, 2020 Highlights: - 🗺️ Support for all DeckGL features! Just usePydeckinstead ofst.deck_gl_chart. To do that, simply pass a PyDeck object tost.pydeck_chart,st.write, ormagic.Note that as apreview releasethings may change in the near future. Looking forward to hearing input from the community before we stabilize the API!The goals is for this to replacest.deck_gl_chart,since it is does everything the old API didand much more! - 🆕 Better handling of Streamlit upgrades while developing. We now auto-reload the browser tab if the app it is displaying uses a newer version of Streamlit than the one the tab is running. - 👑 New favicon, with our new logo! Notable fixes: - Magic now works correctly in Python 3.8. It no longer causes docstrings to render in your app. Breaking changes: - Updated how we calculate the default width and height of all chart types. We now leave chart sizing up to your charting library itself, so please refer to the library's documentation.As a result, thewidthandheightarguments have been deprecated from most chart commands, anduse_container_widthhas been introduced everywhere to allow you to make charts fill as much horizontal space as possible (this used to be the default).", "prev_chunk_id": "chunk_941", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_943", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2020", "title": "Still have questions?", "page_title": "2020 release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_942", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_944", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "2021 release notes", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "2021 release notes", "content": "2021 release notes This page contains release notes for Streamlit versions released in 2021. For the latest version of Streamlit, see Release notes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_945", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 1.3.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 1.3.0", "content": "Version 1.3.0 Release date: Dec 16, 2021 Notable Changes - 💯 Support for NumPy values inst.metric. - 🌐 Support for Mesh Layers in PyDeck. - 📊 Updated Plotly chart version to support the latest features. - 🏀st.spinnerelement has visual animated spinner. - 🍰st.captionsupports HTML in text withunsafe_allow_htmlparameter. Other Changes - 🪲 Bug fix: Allowst.session_stateto be used to set number_input values with no warning (#4047). - 🪲 Bug fix: Fix footer alignment in wide mode (#4035). - 🐞 Bug fix: Better support for Graphviz and Bokeh charts in containers (columns, expanders, etc.) (#4039). - 🐞 Bug fix: Support inline data values in Vega-Lite (#4070). - ✍️ Types: Updated type annotations for experimental memo and singleton decorators. - ✍️ Types: Improved type annotations forst.selectbox,st.select_slider,st.radio,st.number_input, andst.multiselect.", "prev_chunk_id": "chunk_944", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_946", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 1.2.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 1.2.0", "content": "Version 1.2.0 Release date: Nov 11, 2021 Notable Changes - ✏️st.text_inputandst.text_areanow have aplaceholderparameter to display text when the field is empty. - 📏 Viewers can now resize the input box inst.text_area. - 📁 Streamlit can auto-reload when files in sub-directories change. - 🌈 We've upgraded Bokeh support to 2.4.1! We recommend updating your Bokeh library to 2.4.1 to maintain functionality. Going forward, we'll let you know if there's a mismatch in your Bokeh version via an error prompt. - 🔒 Developers can access secrets via attribute notation (e.g.st.secrets.keyvsst.secrets[\"key\"]) just like session state. - ✍️ Publish type annotations according toPEP 561. Users now get type annotations for Streamlit when running mypy (#4025). Other Changes - 👀 Visual fixes (#3863,#3995,#3926,#3975). - 🍔 Fixes to the hamburger menu (#3968). - 🖨️ Ability to print session state (#3970).", "prev_chunk_id": "chunk_945", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_947", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 1.1.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 1.1.0", "content": "Version 1.1.0 Release date: Oct 21, 2021 Highlights - 🧠 Memory improvements: Streamlit apps allocate way less memory over time now. Notable Changes - ♻️ Apps automatically rerun now when the content ofsecrets.tomlchanges (before this you had to refresh the page manually). Other Changes - 🔗 Redirected some links to ourbrand-new docs site, e.g. in exceptions. - 🪲 Bug fix: Allow initialization of range slider with session state (#3586). - 🐞 Bug fix: Refresh chart when usingadd_rowswithdatetimeindex (#3653). - ✍️ Added some more type annotation in our codebase (#3908).", "prev_chunk_id": "chunk_946", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_948", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 1.0.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 1.0.0", "content": "Version 1.0.0 Release date: Oct 5, 2021 Highlights - 🎈Announcing Streamlit 1.0! To read more about check out our1.0 blog post. Other Changes - 🐞 Fixed an issue where usingdf.dtypesto show datatypes for a DF fails while using Arrow (#3709), Image captions stay within image width and are readable (#3530).", "prev_chunk_id": "chunk_947", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_949", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.89.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.89.0", "content": "Version 0.89.0 Release date: Sep 22, 2021 Highlights - 💰 Introducingst.experimental_memoandexperimental_singleton, a new primitive for caching! Seeour blog post. - 🍔 Streamlit allows developers to configure their hamburger menu to be more user-centric. Notable Changes - 💅 We updated our UI to a more polished look with a new font. - 🎨 We now supporttheme.basein the theme object when it's sent to custom components. - 🧠 We've modified session state to reset widgets if any of their arguments changed even if they provide a key.Some widget behavior may have changed, but we believe this change makes the most sense. We have added a section toour documentationdescribing how they behave. Other Changes - 🐞 Bug fixes: Support svgs from a URL (#3809) and that do not start with<svg>tag (#3789).", "prev_chunk_id": "chunk_948", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_950", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.88.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.88.0", "content": "Version 0.88.0 Release date: Sep 2, 2021 Highlights - ⬇️ Introducingst.download_button, a new button widget for easily downloading files. Notable Changes - 🛑 We made changes to improve the redacted exception experience on Streamlit Community Cloud. Whenclient.showErrorDetails=trueexceptions display the Error Type and the Traceback, but redact the actual error text to prevent data leaks.", "prev_chunk_id": "chunk_949", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_951", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.87.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.87.0", "content": "Version 0.87.0 Release date: Aug 19, 2021 Highlights - 🔢 Introducingst.metric, an API for displaying KPIs. Check out thedemo appshowcasing the functionality. Other Changes - 🐞Bug Fixes: File uploader retains state upon expander closing (#3557), setIn Error withst.empty(#3659), Missing IFrame embeds in docs (#3706), Fix error writing certain PNG files (#3597).", "prev_chunk_id": "chunk_950", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_952", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.86.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.86.0", "content": "Version 0.86.0 Release date: Aug 5, 2021 Highlights - 🎓 Our layout primitives are graduating from beta! You can now usest.columns,st.containerandst.expanderwithout thebeta_prefix. Notable Changes - 📱 When usingst.columns, columns will stack vertically when viewport size <640px so that column layout on smaller viewports is consistent and cleaner. (#3594). Other Changes - 🐞Bug fixes: Fixedst.date_inputcrashes if its empty (#3194), Opening files with utf-8(#3022),st.select_sliderresets its state upon interaction (#3600).", "prev_chunk_id": "chunk_951", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_953", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.85.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.85.0", "content": "Version 0.85.0 Release date: Jul 22, 2021 Highlights - 🏹 Streamlit now usesApache Arrowfor serializing data frames when they are sent from Streamlit server to the front end. See ourblog post.(Users who wish to continue using the legacy data frame serialization can do so by setting thedataFrameSerializationconfig option to\"legacy\"in theirconfig.toml). Other Changes - 🐞 Bug fixes: Unresponsive pydeck example (#3395), JSON parse error message (#2324), Tooltips rendering (#3300), Colorpicker not working on Streamlit Sharing (#2689).", "prev_chunk_id": "chunk_952", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_954", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.84.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.84.0", "content": "Version 0.84.0 Release date: Jul 1, 2021 Highlights - 🧠 Introducingst.session_stateand widget callbacks to allow you to add statefulness to your apps. Check out theblog post Notable Changes - 🪄st.text_inputnow has anautocompleteparameter to allow password managers to be used Other Changes - Using st.set_page_config to assign the page title no longer appends \"Streamlit\" to that title (#3467) - NumberInput: disable plus/minus buttons when the widget is already at its max (or min) value (#3493)", "prev_chunk_id": "chunk_953", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_955", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.83.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.83.0", "content": "Version 0.83.0 Release date: Jun 17, 2021 Highlights - 🛣️ Updates to Streamlit docs to include step-by-step guides which demonstrate how to connect Streamlit apps to various databases & APIs Notable Changes - 📄st.formnow has aclear_on_submitparameter which \"resets\" all the form's widgets when the form is submitted. Other Changes - Fixed bugs regarding file encodings (#3320,#3108,#2731)", "prev_chunk_id": "chunk_954", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_956", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.82.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.82.0", "content": "Version 0.82.0 Release date: May 13, 2021 Notable Changes - ♻️ Improvements to memory management by forcing garbage collection between script runs.", "prev_chunk_id": "chunk_955", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_957", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.81.1", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.81.1", "content": "Version 0.81.1 Release date: Apr 29, 2021 Highlights - 📝 Introducingst.formandst.form_submit_buttonto allow you to batch input widgets. Check out ourblog post - 🔤 Introducingst.captionso you can add explainer text anywhere in you apps. - 🎨 Updates to Theming, including ability to build a theme that inherits from any of our default themes. - 🚀 Improvements to deployment experience to Streamlit sharing from the app menu. Other changes - Support for binary files in Custom Components (#3144)", "prev_chunk_id": "chunk_956", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_958", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.80.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.80.0", "content": "Version 0.80.0 Release date: Apr 8, 2021 Highlights - 🔐 Streamlit now support Secrets management for apps deployed to Streamlit Sharing! - ⚓️ Titles and headers now come with automatically generated anchor links. Just hover over any title and click the 🔗 to get the link! Other changes - Addedallow-downloadscapability to custom components (#3040) - Fixed markdown tables in dark theme (#3020) - Improved color picker widget in the Custom Theme dialog (#2970)", "prev_chunk_id": "chunk_957", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_959", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.79.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.79.0", "content": "Version 0.79.0 Release date: Mar 18, 2021 Highlights - 🌈 Introducing support for custom themes. Check out ourblog post - 🌚 This release also introduces dark mode! - 🛠️ Support for tooltips on all input widgets Other changes - Fixed bugs regarding file encodings (#1936,#2606) and caching functions (#2728)", "prev_chunk_id": "chunk_958", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_960", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.78.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.78.0", "content": "Version 0.78.0 Release date: Mar 4, 2021 Features - If you're in the Streamlit for Teams beta, we made a few updates to how secrets work. Check the beta docs for more info! - Dataframes now displays timezones for all DateTime and Time columns, and shows the time with the timezone applied, rather than in UTC Notable Bug Fixes - Various improvement to column alignment inst.beta_columns - Removed the long-deprecatedformatparam fromst.image, and replaced withoutput_format.", "prev_chunk_id": "chunk_959", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_961", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.77.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.77.0", "content": "Version 0.77.0 Release date: Feb 23, 2021 Features - Added a new config optionclient.showErrorDetailsallowing the developer to control the granularity of error messages. This is useful for when you deploy an app, and want to conceal from your users potentially-sensitive information contained in tracebacks. Notable bug fixes - Fixedbugwherest.imagewasn't rendering certain kinds of SVGs correctly. - Fixedregressionwhere the current value of anst.sliderwas only shown on hover.", "prev_chunk_id": "chunk_960", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_962", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.76.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.76.0", "content": "Version 0.76.0 Release date: February 4, 2021 Notable Changes - 🎨st.color_pickeris now out of beta. This means the old beta_color_picker function, which was marked as deprecated for the past 3 months, has now been replaced with color_picker. - 🐍 Display a warning when a Streamlit script is run directly aspython script.py. - st.image'suse_column_widthnow defaults to anautooption which will resize the image to the column width if the image exceeds the column width. - ✂️ Fixed bugs (2437and2247) with content getting cut off within ast.beta_expander - 📜 Fixed abuginst.dataframewhere the scrollbar overlapped with the contents in the last column. - 💾 Fixed abugforst.file_uploaderwhere file data returned was not the most recently uploaded file. - ➕ Fixed bugs (2086and2556) where some LaTeX commands were not rendering correctly.", "prev_chunk_id": "chunk_961", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_963", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.75.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.75.0", "content": "Version 0.75.0 Release date: January 21, 2021 Notable Changes - 🕳st.emptypreviously would clear the component at the end of the script. It has now been updated to clear the component instantly. - 🛹 Previously in wide mode, we had thin margins around the webpage. This has now been increased to provide a better visual experience.", "prev_chunk_id": "chunk_962", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_964", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Version 0.74.0", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Version 0.74.0", "content": "Version 0.74.0 Release date: January 6, 2021 Notable Changes - 💾st.file_uploader. has been stabilized and the deprecation warning and associated configuration option (deprecation.showfileUploaderEncoding) has been removed. - 📊st.bokeh_chartis no longer duplicated when the page loads. - 🎈 Fixed page icon to support emojis with variants (i.e. 🤦‍♀️ vs 🤦🏼‍♀️) or dashes (i.e 🌙 - crescent-moon).", "prev_chunk_id": "chunk_963", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_965", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2021", "title": "Still have questions?", "page_title": "2021 release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_964", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_966", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/where-file-uploader-store-when-deleted", "title": "Where does st.file_uploader store uploaded files and when do they get deleted?", "page_title": "Where does st.file_uploader store uploaded files and when do they get deleted? - Streamlit Docs", "breadcrumbs": "Where does st.file_uploader store uploaded files and when do they get deleted?", "content": "Where does st.file_uploader store uploaded files and when do they get deleted? When you upload a file using st.file_uploader, the data are copied to the Streamlit backend via the browser, and contained in a BytesIO buffer in Python memory (i.e. RAM, not disk). The data will persist in RAM until the Streamlit app re-runs from top-to-bottom, which is on each widget interaction. If you need to save the data that was uploaded between runs, then you can cache it so that Streamlit persists it across re-runs. As files are stored in memory, they get deleted immediately as soon as they’re not needed anymore. This means Streamlit removes a file from memory when: - The user uploads another file, replacing the original one - The user clears the file uploader - The user closes the browser tab where they uploaded the file Related forum posts: - https://discuss.streamlit.io/t/streamlit-sharing-fileupload-where-does-it-go/9267 - https://discuss.streamlit.io/t/how-to-update-the-uploaded-file-using-file-uploader/13512/", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_967", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/where-file-uploader-store-when-deleted", "title": "Still have questions?", "page_title": "Where does st.file_uploader store uploaded files and when do they get deleted? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_966", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_968", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/pydeck-chart-custom-mapbox-styles", "title": "How can I make st.pydeck_chart use custom Mapbox styles?", "page_title": "How can I make st.pydeck_chart use custom Mapbox styles? - Streamlit Docs", "breadcrumbs": "How can I make st.pydeck_chart use custom Mapbox styles?", "content": "How can I make st.pydeck_chart use custom Mapbox styles? If you are supplying a Mapbox token, but the resulting pydeck_chart doesn't show your custom Mapbox styles, please check that you are adding the Mapbox token to the Streamlit config.toml configuration file. Streamlit DOES NOT read Mapbox tokens from inside of a PyDeck specification (i.e. from inside of the Streamlit app). Please see this forum thread for more information.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_969", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/pydeck-chart-custom-mapbox-styles", "title": "Still have questions?", "page_title": "How can I make st.pydeck_chart use custom Mapbox styles? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_968", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_970", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "2022 release notes", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "2022 release notes", "content": "2022 release notes This page contains release notes for Streamlit versions released in 2022. For the latest version of Streamlit, see Release notes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_971", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.16.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.16.0", "content": "Version 1.16.0 Release date: December 14, 2022 Highlights - 👩‍🎨 Introducing a new Streamlit theme for Altair, Plotly, and Vega-Lite charts! Check out ourblog postfor more information. - 🎨 Streamlit now supports colored text in all commands that accept Markdown, includingst.markdown,st.header, and more. Learn more in ourdocumentation. Notable Changes - 🔁 Functions cached withst.experimental_memoorst.experimental_singletoncan contain Streamlit media elements and forms. - ⛄ All Streamlit commands that accept pandas DataFrames as input also support Snowpark and PySpark DataFrames. - 🏷st.checkboxandst.metriccan customize how to hide their labels with thelabel_visibilityparameter. Other Changes - 🗺️st.mapimprovements: support for upper case columns and better exception messages (#5679,#5792). - 🐞 Bug fix:st.plotly_chartrespects the figure's height attribute and theuse_container_widthparameter (#5779). - 🪲 Bug fix: all commands with theiconparameter such asst.error,st.warning, etc, can contain emojis with variant selectors (#5583). - 🐝 Bug fix: preventst.camera_inputfrom jittering when resizing the browser window (#5661). - 🐜 Bug fix: update exception layout to avoid overflow of stack traces (#5700).", "prev_chunk_id": "chunk_970", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_972", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.15.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.15.0", "content": "Version 1.15.0 Release date: November 17, 2022 Notable Changes - 💅 Widget labels can contain inline Markdown. See ourdocsand demoappfor more info. - 🎵st.audionow supports playing audio data passed in as NumPy arrays with the keyword-onlysample_rateparameter. - 🔁 Functions cached withst.experimental_memoorst.experimental_singletoncan contain Streamlit widgets using theexperimental_allow_widgetsparameter. This allows caching checkboxes, sliders, radio buttons, and more! Other Changes - 👩‍🎨 Design tweak to prevent jittering in sliders (#5612). - 🐛 Bug fix: links in headers are red, not blue (#5609). - 🐞 Bug fix: properly resize Plotly charts when exiting fullscreen (#5645). - 🐝: Bug fix: don't accidentally triggerst.balloonsandst.snow(#5401).", "prev_chunk_id": "chunk_971", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_973", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.14.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.14.0", "content": "Version 1.14.0 Release date: October 27, 2022 Highlights - 🎨st.buttonandst.form_submit_buttonsupport designating buttons as \"primary\" (for additional emphasis) or \"secondary\" (for normal buttons) with thetypekeyword-only parameter. Notable Changes - 🤏st.multiselecthas a keyword-onlymax_selectionsparameter to limit the number of options that can be selected at a time. - 📄st.form_submit_buttonnow has thedisabledparameter that removes interactivity. Other Changes - 🏓st.dataframeandst.tableaccept categorical intervals as input (#5395). - ⚡ Performance improvements to Plotly charts (#5542). - 🪲 Bug fix:st.download_buttonsupports non-latin1 characters in filenames (#5465). - 🐞 Bug fix: Allowst.imageto render a local GIF as a GIF, not as a static PNG (#5438). - 📱 Design tweaks to the sidebar in multipage apps (#5538,#5445,#5559). - 📊 Improvements to the axis configuration for built-in charts (#5412). - 🔧 Memo and singleton improvements: support text values forshow_spinner, usedatetime.timedeltaobjects asttlparameter value, properly hash PIL images andEnumclasses, show better error messages when returning unevaluated dataframes (#5447,#5413,#5504,#5426,#5515). - 🔍 Zoom buttons in maps created withst.mapandst.pydeck_chartuse light or dark style based on the app's theme (#5479). - 🗜 Websocket headers from the current session's incoming WebSocket request can be obtained from a new \"internal\" (i.e.: subject to change without deprecation) API (#5457). - 📝 Improve the text that gets printed when you first install and use Streamlit (#5473).", "prev_chunk_id": "chunk_972", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_974", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.13.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.13.0", "content": "Version 1.13.0 Release date: September 22, 2022 Notable Changes - 🏷 Widgets can customize how to hide their labels with thelabel_visibilityparameter. - 🔍st.mapadds zoom buttons to the map by default. - ↔️st.dataframesupports theuse_container_widthparameter to stretch across the full container width. - 🪄 Improvements tost.dataframesizing: Column width calculation respects column headers, supports double click between column headers to autosize, better fullscreen support, and fixes the issue with thewidthparameter. Other Changes - ⌨️st.time_inputallows for keyboard-only input (#5194). - 💿st.memowill warn the user when usingttlandpersistkeyword argument together (#5032). - 🔢st.number_inputreturns consistent type after rerun (#5359). - 🚒st.sidebarUI fixes including a fix for scrollbars in Firefox browsers (#5157,#5324). - 👩‍💻 Improvements to usage metrics to guide API development. - ✍️ More type hints! (#5191,#5192,#5242,#5243,#5244,#5245,#5246) Thanksharahu!", "prev_chunk_id": "chunk_973", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_975", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.12.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.12.0", "content": "Version 1.12.0 Release date: August 11, 2022 Highlights - 📊 Built-in charts (e.g.st.line_chart) get a brand-new look and parametersxandy! Check out ourblog postfor more information. Notable Changes - ⏯ Functions cached withst.experimental_memoorst.experimental_singletoncan now contain staticstcommands. This allows caching text, charts, dataframes, and more! - ↔️ The sidebar is now resizable via drag and drop. - ☎️st.info,st.success,st.error, andst.warninggot a redesign and have a new keyword-only parameter:icon. Other Changes - 🎚️st.select_slidercorrectly handles all floats now (#4973,#4978). - 🔢st.multi_selectcan take values from enums (#4987). - 🍊st.sliderrange values can now be set throughst.session_state(#5007). - 🎨st.progressgot a redesign (#5011,#5086). - 🔘st.radiobetter deals with list-like dataframes (#5021). - 🧞‍♂️st.cacheproperly handles JSON files now (#5023). - ⚓️ Headers render markdown now when theanchorparameter is set (#5038). - 🗻st.imagecan now load SVGs from Inkscape (#5040). - 🗺️st.mapandst.pydeck_chartuse light or dark style based on the app's theme (#5074,#5108). - 🎈 Clicks on elements belowst.balloonsandst.snowdon't get blocked anymore (#5098). - 🔝 Embedded apps have lower top padding (#5111). - 💅 Adjusted padding and alignment for widgets, charts, and dataframes (#4995,#5061,#5081). - ✍️ More type hints! (#4926,#4932,#4933)", "prev_chunk_id": "chunk_974", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_976", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.11.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.11.0", "content": "Version 1.11.0 Release date: July 14, 2022 Highlights - 🗂 Introducingst.tabsto have tab containers in your app. See ourdocumentationon how to use this feature. Notable Changes - ℹ️st.metricsupports tooltips with thehelpkeyword parameter. - 🚇st.columnssupports setting the gap size between columns with thegapkeyword parameter. Other Changes - 💅 Design tweaks tost.selectbox,st.expander,st.spinner(#4801). - 📱 The sidebar will close when users select a page from the navigation menu on mobile devices (#4851). - 🧠st.memosupports dataclasses! (#4850) - 🏎 Bug fix for a race condition that destroyed widget state with rapid interaction (#4882). - 🏓st.tablepresents overflowing content to be scrollable when placed inside columns and expanders (#4934). - 🐍 Types: More updated type annotations across Streamlit! (#4808,#4809,#4856)", "prev_chunk_id": "chunk_975", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_977", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.10.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.10.0", "content": "Version 1.10.0 Release date: June 2, 2022 Highlights - 📖 Introducing native support for multipage apps! Check out ourblog postand try out our newstreamlit hello. Notable Changes - ✨st.dataframehas been redesigned. - 🔘st.radiohas ahorizontalkeyword-only parameter to display options horizontally. - ⚠️ Streamlit Community Cloud will support richer exception formatting. - 🏂 Get user information on private apps usingst.experimental_user. Other Changes - 📊 Upgraded Vega-Lite library to support even more interactive charting improvements. See theirrelease notesto find out more. (#4751). - 📈st.vega_lite_chartwill respond to updates, particularly in response to input widgets (#4736). - 💬st.markdownwith long text will always wrap (#4696). - 📦 Support forPDM(#4724). - ✍️ Types: Updated type annotations across Streamlit! (#4679,#4680,#4681,#4682,#4683,#4684,#4685,#4686,#4687,#4688,#4690,#4703,#4704,#4705,#4706,#4707,#4708,#4710,#4723,#4733).", "prev_chunk_id": "chunk_976", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_978", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.9.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.9.0", "content": "Version 1.9.0 Release date: May 4, 2022 Notable Changes - 🪗st.jsonnow supports a keyword-only argument,expandedon whether the JSON should be expanded by default (defaults toTrue). - 🏃‍♀️ More performance improvements from reducing redundant work each script run. Other Changes - 🏇 Widgets whendisabledis set/unset will maintain its value (#4527). - 🧪 Experimental feature to increase the speed of reruns using configurationrunner.fastReruns. See#4628for the known issues in enabling this feature. - 🗺️ DataFrame timestamps support UTC offset (in addition to time zone notation) (#4669).", "prev_chunk_id": "chunk_977", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_979", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.8.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.8.0", "content": "Version 1.8.0 Release date: March 24, 2022 Notable Changes - 🏃‍♀️ Dataframes should see performance improvements (#4463). Other Changes - 🕰st.sliderhandles timezones better by removing timezone conversions on the backend (#4348). - 👩‍🎨 Design improvements to our header (#4496).", "prev_chunk_id": "chunk_978", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_980", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.7.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.7.0", "content": "Version 1.7.0 Release date: March 3, 2022 Highlights - Introducingst.snow, celebrating our acquisition by Snowflake! See more information inour blog post.", "prev_chunk_id": "chunk_979", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_981", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.6.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.6.0", "content": "Version 1.6.0 Release date: Feb 24, 2022 Other Changes - 🗜 WebSocket compression is now disabled by default, which will improve CPU and latency performance for large dataframes. You can use theserver.enableWebsocketCompressionconfiguration option to re-enable it if you find the increased network traffic more impactful. - ☑️ 🔘 Radio and checkboxes improve focus on Keyboard navigation (#4308).", "prev_chunk_id": "chunk_980", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_982", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.5.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.5.0", "content": "Version 1.5.0 Release date: Jan 27, 2022 Notable Changes - 🌟 Favicon defaults to a PNG to allow for transparency (#4272). - 🚦 Select Slider Widget now has thedisabledparameter that removes interactivity (completing all of our widgets) (#4314). Other Changes - 🔤 Improvements to our markdown library to provide better support for HTML (specifically nested HTML) (#4221). - 📖 Expanders maintain their expanded state better when multiple expanders are present (#4290). - 🗳 Improved file uploader and camera input to call itson_changehandler only when necessary (#4270).", "prev_chunk_id": "chunk_981", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_983", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Version 1.4.0", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Version 1.4.0", "content": "Version 1.4.0 Release date: Jan 13, 2022 Highlights - 📸 Introducingst.camera_inputfor uploading images straight from your camera. Notable Changes - 🚦 Widgets now have thedisabledparameter that removes interactivity. - 🚮 Clearst.experimental_memoandst.experimental_singletonprogrammatically by using theclear()method on a cached function. - 📨 Developers can now configure the maximum size of a message to accommodate larger messages within the Streamlit application. Seeserver.maxMessageSize. - 🐍 We formally added support for Python 3.10. Other Changes - 😵‍💫 Callingstrorrepronthreading.current_thread()does not cause a RecursionError (#4172). - 📹 Gracefully stop screencast recording when user removes permission to record (#4180). - 🌇 Better scale images by using a higher-quality image bilinear resampling algorithm (#4159).", "prev_chunk_id": "chunk_982", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_984", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2022", "title": "Still have questions?", "page_title": "2022 release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_983", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_985", "url": "https://docs.streamlit.io/knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud", "title": "How to submit a support case for Streamlit Community Cloud", "page_title": "How to submit a support case for Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "How to submit a support case for Streamlit Community Cloud", "content": "How to submit a support case for Streamlit Community Cloud This article describes the steps to submit a support request to Snowflake for Streamlit Community Cloud. - Navigate tohttps://community.snowflake.com/s/in your browser. - If you already have a Snowflake Community account, sign in. Otherwise, click \"CREATE ACCOUNT,\" and follow the prompts. - At the top of the page, click \"SUPPORT.\" - From the drop-down menu, select \"Submit A Case.\" - Select the option \"I am a Streamlit Community Cloud user.\" - Click \"Next\" to open the case description page. - Fill out your request and submit the support case. You should receive a confirmation email with the case number. A Snowflake Support engineer will follow up directly with the next steps to resolve your case. All communication will be through email.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_986", "url": "https://docs.streamlit.io/knowledge-base/deploy/how-to-submit-a-support-case-for-streamlit-community-cloud", "title": "Still have questions?", "page_title": "How to submit a support case for Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_985", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_987", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "2023 release notes", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "2023 release notes", "content": "2023 release notes This page contains release notes for Streamlit versions released in 2023. For the latest version of Streamlit, see Release notes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_988", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.29.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.29.0", "content": "Version 1.29.0 Release date: November 30, 2023 Highlights - 🔲st.containerandst.formnow have aborderparameter to show or hide a border. - 🐍 Streamlit supports Python 3.12! Notable Changes - ⌛st.dataframe,st.data_editor, andst.tablesupportdatetime.timedeltavalues (#7689,#4489). - 💀 Streamlit apps preload skeleton elements for a smoother appearance when initializing (#7598). - 🏃 Reduced the overhead of runningAppTest-simulated apps, especially for fast-running apps (#7691). - 🛁 String representations ofAppTestdata are improved for a better testing and debugging experience (#7658). - 🔢 Apps can be configured to identifyEnumclasses as the same if they have matching member names (#7408,#4909). Thanks,Asaurus1! - ❌ The \"Made with Streamlit\" footer no longer appears at the bottom of apps (#7583). - 🧹 Unused config options have been deprecated (#7584). - 🕳️ Query parameters can be empty (#7601,#7416). - 💅 Visual tweaks (#7592,#7630). Other Changes - 🦗 Bug fix: Convert floats to bytes instead of hashing to avoid hashing instability (#7754). Thanks,BlackHC! - 🦎 Bug fix: Corrected broken URLs and typos in error messages (#7746,#7764,#7770). Thanks,ObservedObserver! - 🐌 Bug fix:st.connectioncorrectly caches results when using two connections of the same type (#7730,#7709). - 🕸️ Bug fix: Using context managers with multithreading now displays content in the expected order (#7715,#7668). Thanks,eric-skydio! - 🦂 Bug fix: Added https fallback when obtaining the host machine's address (#7712,#7703). Thanks,LarsHill! - 🛡️ Bug fix: Added security patch forpyarrowvulnerability. Custom components usingpyarrowtable deserialization should requirepyarrow>=14.0.1(#7695,#7700). - 🦟 Bug fix: Improved typing forst.connection(#7671). Thanks,thezanke! - 🪰 Bug fix: Retries ofSnowflakeConnectionmethods are narrowed to only occur with transient errors to avoid unnecessary repeated errors (#7645,#7637). - 🏗️ Removed the v0 testing framework which was undocumented (#7657). - 🪳 Bug fix: The navigation expander arrow no longer disappears (#7634,#7547). - ❄️ Improved the error message forSnowflakeConnectionwhen a configuration is not found (#7652). - 🕷️ Bug fix:st.rerunno longer causes aRecursionErrorwhen used withst.chat_input(#7643,#7629). - 🐞 Bug", "prev_chunk_id": "chunk_987", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_989", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.29.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.29.0", "content": "fix:st.file_uploaderno longer causes an extra rerun and therefore doesn't conflict withst.chat_input(#7641,#7556). - 🐝 Bug fix:AppTestno longer raises an error when encounteringst.container(#7644,#7636). - 🪲 Bug fix: Graphviz charts scale correctly when exiting fullscreen view (#7398,#7527). - 🎥 Bug fix: \"Record a screencast\" is hidden when known to be unsupported in a browser (#7604). - 🐛 Bug fix: Increased the top padding of embedded apps to better display the dataframe toolbar (#7681,#7609,#7607). - 🐜 Bug fix:st.rerunusesNoReturnfor improved type checking (#7422) Thanks,kongzii.", "prev_chunk_id": "chunk_988", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_990", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.28.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.28.0", "content": "Version 1.28.0 Release date: October 26, 2023 Release videos - IntroducingAppTest Highlights - 🧪 Introducing a new testing framework for Streamlit apps! Check out ourdocumentationto learn how to build automated tests for your apps. - 💻 Announcing the general availability ofst.connection, a command to conveniently manage connections in Streamlit apps. Check out thedocsto learn more. - ❄️SnowparkConnectionhas been upgraded to the new and improvedSnowflakeConnection— the same, great functionalityplus more! Check out ourbuilt-in connections. - 🛠️st.dataframeandst.data_editorhave a new toolbar! Users can search and download data in addition to enjoying improved UI for row additions and deletions. See our updated guide onDataframes. Notable Changes - 🌀 When using a spinner with cached functions, the spinner will be overlaid instead of pushing content down (#7488). - 📅st.data_editornow supports datetime index editing (#7483). - 🔢 Improved support fordecimal.Decimalinst.dataframeandst.data_editor(#7475). - 🥸 Global kwargs were added forhashlib(#7527,#7526). Thanks,DueViktor! - 📋st.components.v1.iframenow permits writing to clipboard (#7487). Thanks,dilipthakkar! - 📝SafeSessionStatedisconnect was replaced with script runner yield points for improved efficiency and clarity (#7373). - 🤖 The Langchain callback handler will show the full input string inside the body of ast.statuswhen the input string is too long to show as a label (#7478). Thanks,pokidyshev! - 📈st.graphviz_chartnow supports using different Graphviz layout engines (#7505,#4089). - 🦋 Assorted visual tweaks (#7486,#7592). - 📊plotly.jswas upgraded to version 2.26.1 (#7449,#7476,#7045). - 💽 Legacy serialization for DataFrames was removed. All DataFrames will be serialized by Apache Arrow (#7429). - 🖼️ Compatibility for Pillow 10.x was added (#7442). - 📬 Migrated_stcore/allowed-message-originsendpoint to_stcore/host-config(#7342). - 💬 Addedpost_parent_messageplatform command to send custom messages from a Streamlit app to its parent window (#7522). Other Changes - ⌨️ Improved string dtype handling for DataFrames (#7479). - ✒️st.writewill avoid usingunsafe_allow_html=Trueif possible (#7432). - 🐛 Bug fix: Implementation ofst.expanderwas simplified for improved behavior and consistency (#7247,#2839,#4111,#4651,#5604). - 🪲 Bug fix: Multipage links", "prev_chunk_id": "chunk_989", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_991", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.28.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.28.0", "content": "in the sidebar are now aligned with other sidebar elements (#7531). - 🐜 Bug fix:st.chat_inputwon't incorrectly prompt forlabelparameter in IDEs (#7560). - 🐝 Bug fix: Scroll bars correctly overlayst.dataframeandst.data_editorwithout adding empty space (#7090,#6888). - 🐞 Bug fix:st.chat_messagebehaves correctly with the removal of AutoSizer (#7504,#7473). - 🕷️ Bug fix: Anchor links are reliably produced for non-English headers (#7454,#5291). - ☃️ Bug fix:st.connections.SnowparkConnectionmore accurately detects when it's running within Streamlit in Snowflake (#7502). - 🪳 Bug fix: A user-friendly warning is shown when exceeding the size limitations of a pandasStylerobject (#7497,#5953). - 🪰 Bug fix:st.data_editorautomatically converts non-string column names to strings (#7485,#6950). - 🦠 Bug fix:st.data_editorcorrectly identifies non-range indices as a required column (#7481,#6995). - 🦟 Bug fix:st.file_uploaderdisplays compound file extensions likecsv.gzcorrectly (#7362). Thanks,mo42! - 🦂 Bug fix: Column Configuration no longer uses deprecated type checks (#7496,#7477,#7550). Thanks,c-bik! - 🦗 Bug fix: Additional toolbar items no longer stack vertically (#7470,#7471). - 🕸️ Bug fix: Column Configuration no longer causes a type warning in Mypy (#7457). Thanks,kopp! - 🐌 Bug fix: Bokeh Sliders no longer cause JavaScript errors (#7441,#7171). - 🦎 Bug fix: Caching now recognizes DataFrames with the same values but different column names as different (#7331,#7086).", "prev_chunk_id": "chunk_990", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_992", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.27.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.27.0", "content": "Version 1.27.0 Release date: September 21, 2023 Highlights - ✨ Introducingst.scatter_chart— a new, simple chart element to build scatter charts Streamlit-y fast and easy! See ourdocumentation. - 🔗 Introducingst.link_button! Want to open an external link in a new tab with a bit more pizazz than a plain-text link? Check out ourdocumentationto see how. - 🏃 Announcing the general availability ofst.rerun, a command to interrupt your script and trigger an immediate rerun. Notable Changes - 👻 You can initialize widgets with an empty state by settingNoneas an initial value forst.number_input,st.selectbox,st.date_input,st.time_input,st.radio,st.text_input, andst.text_area! - 📤st.download_buttonnow usestarget=\"_self\"instead of opening a new tab (#7151,#7132). - 🧟 Removed unmaintainedpymplerdependency (#7193,#7131). Thanks,rudyardrichter! Other Changes - 🐛 Bug fix:st.multiselectnow shows a correct message when no result matches a user's search (#7205,#7116). - 🪲 Bug fix:st.experimental_usernow defaults totest@example.com(#7219,#7215). - 🐜 Bug fix:st.sliderlabels don't overlap when small ranges are selected (#7221,#3385). - 🐝 Bug fix: Type-checking correctly identifies all string types to avoid hashing errors (#7255,#6455). - 🐞 Bug fix: JSON is parsed with JSON5 to avoid errors from null values when usingst.pydeck_chart(#7256,#5799). - 🕷️ Bug fix: Identical widgets on different pages are correctly interpreted by Streamlit as distinct (#7264,#6146). - 🦋 Bug fix: Visual tweaks to widgets for responsive behavior (#7145). - 🪳 Bug fix: SVGs are accurately displayed (#7183,#3882). - 🪰 Bug fix:st.videocorrectly updates with changes tostart_time(#7257,#7126). - 🦠 Bug fix: Additional error handling was added tost.session_state(#7280,#7206). - 🦟 Bug fix:st.mapcorrectly refreshes with new data (#7307,#7294). - 🦂 Bug fix: The decorative app header line is no longer covered by the sidebar (#7297,#6264). - 🦗 Bug fix:st.codeno longer triggers aCachedStFunctionWarning(#7306,#7055). - 🕸️ Bug fix:st.download_buttonno longer resets with differentdata(#7316,#7308). - 🐌 Bug fix: Widgets consistently recognize user interaction while a page is still running, with or withoutfastRerunenabled (#7283,#6643). - 🦎 Bug fix:st.tabswas improved to better handle and render conditionally", "prev_chunk_id": "chunk_991", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_993", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.27.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.27.0", "content": "appearing tabs (#7287,#7310,#5454,#7040).", "prev_chunk_id": "chunk_992", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_994", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.26.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.26.0", "content": "Version 1.26.0 Release date: August 24, 2023 Highlights - 🤖 Introducingst.statusto display output from long-running processes and external API calls (#7140). Works great withst.chat_message! See ourdocumentationfor how to use this feature. - 🚥 Introducingst.toggle— an alternative tost.checkboxwhen you need an on/off switch. Notable Changes - 🎨 Simplechart elementshave acolorparameter to set the color of your data points or series (#7022). - 🌈Markdownsupports rainbow and gray colors (#7106,#7179). - 📏st.headerandst.subheaderhave optional, colored dividers (#7133). - 🚀 Deploying to Community Cloud is even easier—locally running apps have adeploy buttonin their toolbars (#7085,#6935). - 🖌️st.download_buttonhas a new parametertypefor theming (#7056,#7038). - 🤖st.chat_messagehas ai and human presets for messages (#7094). - 💅st.radiooptions support markdown and have captions (#7018,#7105,#6085). - 🧼 Assorted visual tweaks (#7050,#894). - 🛏️ Replaced deprecatedimghdrdependency withpillow(#7081,#7027). - 🔢st.number_input's step buttons (+/-) are ignored during tabbing navigation (#7154). Thanks@denck007! Other Changes - 🍞 Bug fix: Toast messages are no longer blocked byst.chat_input(#7204,#7115). - 🕸️ Bug fix: Widget IDs are now stable to prevent inconsistent statefulness (#7003). - 🦟 Bug fix: Browser autofill is correctly recognized within forms now (#7150,#7101,#7084). - 🪱 Bug fix:st.file_uploaderno longer causes session state to reset when a websocket connection is dropped and reconnected (#7149,#7025). - 🏎️ Bug fix: Pydeck JSON data is cached for improved performance (#7113,#5532). - 🦋 Bug fix:st.chat_inputno longer submits prematurely while typing with an input method editor (#6993). - 🐞 Bug fix: Label backgrounds forst.tabsare now transparent (#7070,#5707). - 🐝 Bug fix: Page width is no longer ignored when using thehelpparameter inst.button(#7033,#6161). - 🐜 Bug fix: Tweaked Altair color specification for improved visibility in dark mode (#7061,#3343). - 🪲 Bug fix:st.chat_messagecan correctly use local images as avatars (#7130). - 🐛 Bug fix: Specified that MD5 is not used for security (#7122,#7120). - 🪄 Bug fix: Async function docstrings are ignored byStreamlit magic(#7143,#7137).", "prev_chunk_id": "chunk_993", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_995", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.25.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.25.0", "content": "Version 1.25.0 Release date: July 20, 2023 Highlights - 🍞 Introducingst.toast— a command to briefly show toast messages to users in the bottom-right corner of apps. Seeour documentationon how to use this feature. Notable Changes - 🗺️st.mapnow has parameters forlatitude,longitude,color, andsizeto customize data points (#6896). - 🚩st.multiselectsupports setting placeholders and specifying the maximum number of selections via theplaceholderandmax_selectionskeyword-only arguments, respectively (#6901,#4750). Thanks,@fhiroki! - 📅 Customize the date format forst.date_inputwith theformatparameter (#6974,#5234). - ↩️Formscan now be submitted with Enter/Return while insidest.text_input,st.number_input, orst.text_area(#6911,#3790). - 🍢 The app menu icon in the upper-right corner of apps has been changed from \"☰\" to \"⋮\" (#6947). Other Changes - ⛓️ Minimum required versions increased for multiple Python dependencies, includingnumpy>=1.19.3andpandas>=1.3.0(#6802). - 🛡️protobufjswas bumped from 7.2.1 to 7.2.4 (#6959). - ✨ Visual design tweaks to Streamlit's input widgets (#6944). - 🦋 Bug Fix:st.slidernow accepts general number types likenumpy.int64instead of justintandfloat(#6816,#6815). Thanks,@milliams! - 🐜 Bug Fix: Data labels forst.sliderandst.select_sliderno longer overflow when insidest.expander(#6828,#6297). - 🐛 Bug Fix: Elements no longer re-render from scratch with each rerun (#6923,#6920). - 🐞 Bug Fix:st.data_editorhashes styler objects correctly for stability across reruns (#6815,#6898). - 🐝 Bug Fix: Fixed the padding for embedded apps usingst.chat_inputto prevent messages being cutoff (#6979).", "prev_chunk_id": "chunk_994", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_996", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.24.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.24.0", "content": "Version 1.24.0 Release date: June 27, 2023 Highlights - 💬 Introducingst.chat_messageandst.chat_input— two newchat elementsthat let you build conversational apps. Learn how to use these features in your LLM-powered chat apps in ourtutorial. - 💾 Streamlit's caching decorators now allow you to customize Streamlit's hashing of input parameters with the keyword-only argumenthash_funcs. Notable Changes - 🐍 We've deprecated support for Python 3.7 in the core library and Streamlit Community Cloud (#6868). - 📅st.cache_dataandst.cache_resourcecan hash timezone-awaredatetimeobjects (#6812,#6690,#5110). Other Changes - ✨ Visual design tweaks to Streamlit's input widgets (#6817). - 🐛 Bug fix:st.writepretty-prints dataclasses usingst.help(#6750). - 🪲 Bug fix:st.button's height is consistent with that of other widgets (#6738). - 🐜 Bug fix: Upgraded thereact-rangefrontend dependency to fix the memory usage of sliders (#6764,#5436). Thanks@wolfd! - 🐝 Bug fix: Pydantic validators no longer result in exceptions on app reruns (#6664,#3218). - 🐞 Bug fix:streamlit config showhonors newlines (#6758,#2868). - 🪰 Bug fix: Fixed a race condition to ensure Streamlit reruns the latest code when the file changes (#6884). - 🦋 Bug fix: Apps no longer rerun when users click anchor links (#6834,#6500). - 🕸️ Bug fix: Added robust out-of-bounds checks formin_valueandmax_valueinst.number_input(#6847,#6797).", "prev_chunk_id": "chunk_995", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_997", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.23.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.23.0", "content": "Version 1.23.0 Release date: June 1, 2023 Highlights - ✂️ Announcing the general availability ofst.data_editor, a widget that allows you to edit DataFrames and many other data structures in a table-like UI.Breaking change:the data editor's representation used inst.session_statewas altered. Find out more about the new format inAccess edited data. - ⚙️ Introducing theColumn configuration APIwith a suite of methods to configure the display and editing behavior ofst.dataframeandst.data_editorcolumns (e.g. their title, visibility, type, or format). Keep an eye out for a detailedblog postand in-depthdocumentationupcoming in the next two weeks. - 🔌 Learn to usest.experimental_connectionto create and manage data connections in your apps with the newConnecting to datadocs andvideo tutorial. Notable Changes - 📊 Streamlit now supports Protobuf 4 and Altair 5 (#6215,#6618,#5626,#6622). - ☎️ st.dataframe and st.data_editor can hide index columns withhide_index, specify the display order of columns withcolumn_order, and disable editing for individual columns with thedisabledparameter. - ⏱️ Thettlparameter inst.cache_dataandst.cache_resourceaccepts formatted strings, so you can simply sayttl=\"30d\",ttl=\"1h30m\"and any other combination ofw,d,h,m,ssupported byPandas's Timedelta constructor(#6560). - 📂st.file_uploadernow interprets thetypeparameter more accurately. For example, \"jpg\" or \".jpg\" now accept both \"jpg\" and \"jpeg\" extensions. This functionality has also been extended to \"mpeg/mpg\", \"tiff/tif\", \"html/htm\", and \"mpeg4/mp4\". - 🤫 The newglobal.disableWidgetStateDuplicationWarningconfiguration option allows the silencing of warnings triggered by setting widget default values and keyed session state values concurrently (#3605,#6640). Thanks,@antonAce! Other Changes - 🏃‍♀️Improved startup time by lazy loading some dependencies (#6531). - 👋 Removedst.beta_*andst.experimental_showdue to deprecation and low-use (#6558) - 🚀 Further improvements to st.dataframe and st.data_editor:Improved editing on mobile devices for the data editor (#6548).All editable columns have an icon in their column header and support tooltips (#6550,#6561).Enable editing for columns containing datetime, date, or time values (#6025).New input validation options for columns in the data editor, such asmax_charsandvalidatefor text columns, andmin_value,max_valueandstepfor number columns (#6563).Improved type parsing capabilities in the", "prev_chunk_id": "chunk_996", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_998", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.23.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.23.0", "content": "data editor (#6551).Unified missing values toNonein returned data structures (#6544).A warning is shown in cells when integers exceed the maximum safe value of(2^53) -1(#6311,#6549).Prevented editing the sessions state by showing a warning (#6634).Fixed issues with list columns sometimes breaking the frontend (#6644).Fixed a display issue with index columns using category dtype (#6680,#6598).Fixed an issue that prevented a rerun when adding empty rows (#6598).Unified the behavior betweenst.data_editorandst.dataframerelated to auto-hiding the index column(s) based on the input data (#6659,#6598) - 🛡️ Streamlit'sSecurity Policycan be found in its GitHub repository (#6666). - 🤏 Documented the integer size limit forst.number_inputandst.slider(#6724). - 🐍 The majority of Streamlit's Python dependencies have set a maximum allowable version, with the standard upper limit set to the next major version, but not inclusive of it (#6691). - 💅 UI design improvements to in-app modals (#6688). - 🐞 Bug fix:st.date_input's date selector is equally visible in dark mode (#6072,#6630). - 🐜 Bug fix: the sidebar navigation expansion indicator in multipage apps is restored (#6731). - 🐛 Bug fix: The docstring and exception message forst.set_page_confighave been updated to clarify that this command can be invoked once for each page within a multipage app, rather than once per entire app (#6594). - 🐝 Bug fix:st.jsonno longer collapses multiple spaces in both keys and values with single space when rendered (#6657,#6663).", "prev_chunk_id": "chunk_997", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_999", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.22.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.22.0", "content": "Version 1.22.0 Release date: April 27, 2023 Highlights - 🔌 Introducingst.experimental_connection: Easily connect your app to data sources and APIs using our new connection feature. Find more details in theAPI reference, and stay tuned for an upcoming blog post and in-depth documentation! In the meantime, explore our updatedMySQLandSnowflakeconnection tutorials for examples of this feature. Notable Changes - 🐼 Streamlit now supports Pandas 2.0 (#6413,#6378,#6507). Thanks,connortann! - 🍔 Customize the visibility of items in the toolbar, options menu, and the settings dialog using theclient.toolbarModeconfig option(#6174). - 🪵 Streamlit logs now reside in the \"streamlit\" namespace instead of the root logger, enabling app developers to better manage log handling (#3978,#6377). Other Changes - 🔏 CLI parameters can no longer be used to set sensitive configuration values (#6376). - 🤖 Improved the debugging experience by reducing log noise (#6391). - 🐞 Bug fix:@st.cache_datadecorated functions support UUID objects as parameters (#6440,#6459). - 🐛 Bug fix: Tabbing through buttons and other elements now displays a red border only when focused, not when clicked (#6373). - 🪲 Bug fix:st.multiselect's clear icon is larger and includes a hover effect (#6471). - 🐜 Bug fix: Custom theme font settings no longer apply to code blocks (#6484,#6535). - ©️ Bug fix:st.code's copy-to-clipboard button appears when you hover on code blocks (#6490,#6498).", "prev_chunk_id": "chunk_998", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1000", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.21.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.21.0", "content": "Version 1.21.0 Release date: April 6, 2023 Highlights - 📏 Introducingst.divider— a command that displays a horizontal line in your app. Learn how to use this command in itsAPI reference. - 🔏 Streamlit now supports the use of a globalsecrets.tomlfile, in addition to a project-level file, to easily store and securely access your secrets. Learn more inSecrets management. - 🚀st.helphas been revamped to show more information about object methods, attributes, classes, and more, which is great for debugging (#5857,#6382)! Notable Changes - 🪜st.time_inputsupports adding a stepping interval with the keyword-onlystepparameter (#6071). - ❓ Mosttext elementscan include tooltips with thehelpparameter (#6043). - ↔️st.pyplothas ause_container_widthparameter to set the chart to the container width (now allchart elementssupport this parameter) (#6067). - 👩‍💻st.codesupports optionally displaying line numbers to the code block's left with the booleanline_numbersparameter (#5756,#6042). - ⚓ Anchors in header elements can be turned off by settinganchor=False(#6158). Other Changes - 🐼st.tableandst.dataframesupportpandas.Period, and number and boolean types in categorical columns (#2547,#5429,#5329,#6248). - 🕸️ Added.webpto the list of allowed static file extensions (#6331) - 🐞 Bug fix: stop script execution on websocket close to immediately clear session information (#6166,#6204). - 🐜 Bug fixes: updated allowed/disallowed label markdown behavior such that unsupported elements are unwrapped and only their children (text contents) render (#5872,#6036,#6054,#6163). - 🪲 Bug fixes: don't push browser history states on rerun, use HTTPS to load external resources instreamlit hello, and make the browser back button work for multipage apps (#5292,#6266,#6232). Thanks,whitphx! - 🐝 Bug fix: avoid showing emoji on non-UTF-8 terminals. (#2284,#6088). Thanks,kcarnold! - 📁 Bug fix: override default use ofFile System Access APIforreact-dropzoneso thatst.file_uploader's File Selection Dialog only shows file types corresponding to those included in thetypeparameter (#6176,#6315). - 💾 Bug fix: make the.clear()method on cache-decorated functions work (#6310,#6321). - 🏃 Bug fix:st.experimental_get_query_paramsdoesn't need reruns to work (#6347,#6348). Thanks,PaleNeutron! - 🐛 Bug", "prev_chunk_id": "chunk_999", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1001", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.21.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.21.0", "content": "fix:CachedStFunctionWarningmentionsexperimental_allow_widgetsinstead of the deprecatedsuppress_st_warning(#6216,#6217).", "prev_chunk_id": "chunk_1000", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1002", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.20.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.20.0", "content": "Version 1.20.0 Release date: March 09, 2023 Notable Changes - 🔐 Added support for configuring SSL toserve apps directly over HTTPS(#5969). - 🖼️ Granular control over app embedding behavior with the/?embedand/?embed_optionsquery parameters. Learn how to use this feature in ourdocs(#6011,#6019). - ⚡ Enabled therunner.fastRerunsconfiguration optionby default to make apps much more responsive to user interaction (#6200). Other Changes - 🍔 Cleaned up the hamburger menu by removing the least used options (#6080). - 🖨️ Design changes to ensure apps being printed or saved as a PDF look good (#6180). - 🐞 Bug fix: improveddtypeschecking inst.experimental_data_editor(#6185,#6188). - 🐛 Bug fix: properly positionst.metric'shelptooltip when not inside columns (#6168). - 🪲 Bug fix: regression in retrieving messages from the server'sForwardMsgCache(#6210). - 🌀 Bug fix:st.cache_datadocstring for theshow_spinnerparam now listsstras a supported type (#6207,#6213). - ⏱️ Made ping and websocket timeouts far more forgiving (#6212). - 🗺️st.mapandst.pydeck_chartdocs state that Streamlit's Mapbox token will not work indefinitely (#6143).", "prev_chunk_id": "chunk_1001", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1003", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.19.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.19.0", "content": "Version 1.19.0 Release date: February 23, 2023 Highlights - ✂️ Introducingst.experimental_data_editor, a widget that allows you to edit DataFrames and many other data structures in a table-like UI. Read more in ourdocumentationandblog post. Other Changes - ✨ Streamlit's GitHub README got a new look (#6016). - 🌚 Improved readability of styled dataframe cells in dark mode (#6060,#6098). - 🐛 Bug fix: make apps work again in the latest versions of Safari, and in Chrome with third-party cookies blocked (#6092,#6094,#6087,#6100). - 🐞 Bug fix: refer to new cache primitives in the \"Clear cache\" dialog and error messages (#6082,#6128). - 🐝 Bug fix: properly cache class member functions and instance methods (#6109,#6114). - 🐜 Bug fix: regression inst.metrictooltip position (#6093,#6129). - 🪲 Bug fix: allow fullscreen button to show for dataframes, charts, etc, in expander (#6083,#6148).", "prev_chunk_id": "chunk_1002", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1004", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.18.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.18.0", "content": "Version 1.18.0 Release date: February 09, 2023 Highlights - 🎊 Introducing@st.cache_dataand@st.cache_resource— two new caching commands to replacest.cache! Check out ourblog postanddocumentationfor more information. Notable Changes - 🪆st.columnssupports up to one level of column nesting (i.e., columns inside columns) in the main area of the app. - ⏳st.progresssupports adding a message to display above the progress bar with thetextkeyword parameter. - ↔️st.buttonhas an optionaluse_container_widthparameter to allow you to stretch buttons across the full container width. - 🐍 We formally added support for Python 3.11. - 🖨️ Save your app as a PDF via the \"Print\" option in your app's hamburger menu. - 🛎️ Apps can serve small, static media files via theenableStaticServingconfig option. See ourdocumentationon how to use this feature and our demoappfor an example. Other Changes - 🏁 All Streamlit endpoints (including/healthz) have been renamed to have a consistent pattern and avoid any clashes with reserved endpoints of GCP (notably Cloud Run and App Engine) (#5534). - ⚡ Improved caching performance when multiple sessions access an uncomputed cached value simultaneously (#6017). - 🚧 Streamlit only displays deprecation warnings in the browser when theclient.showErrorDetailsconfig option is set toTrue. Deprecation warnings always get logged to the console, regardless of whether they're displayed in-browser (#5945). - 🏓 Refactored thest.dataframeinternals to improve dataframe handling and conversion, such as detecting more types, converting key-value dicts to dataframes, and more (#6026,#6023). - 💽 The behavior of widget labels when they are passed unsupported Markdown elements is documented (#5978). - 📊 Bug fix: Plotly improvements — upgraded multiple frontend dependencies, including Plotly, to the latest version to properly redraw cached charts, make Plotly mapbox animations work, and allow users to update the figure layout when using the Streamlit theme (#5885,#5967,#6055). - 📶 Bug fix: allow browser tabs that transiently disconnect (due to a network blip, load balancer", "prev_chunk_id": "chunk_1003", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1005", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.18.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.18.0", "content": "timeout, etc.) to avoid losing all of their state (#5856). - 📱 Bug fix: the keyboard is hidden on mobile whenst.selectboxandst.multiselecthave less than 10 options (#5979). - 🐝 Bug fix: design tweaks tost.metric,st.multiselect,st.tabs, and menu items to prevent label overflow and scrolling issues, especially with small viewport sizes (#5933,#6034). - 🐞 Bug fix: switched to a functioning Twemoji URL from which page favicons are loaded inst.set_page_config(#5943). - ✍️ More type hints (#5986). Thanks,harahu!", "prev_chunk_id": "chunk_1004", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1006", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Version 1.17.0", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Version 1.17.0", "content": "Version 1.17.0 Release date: January 12, 2023 Notable Changes - 🪄@st.experimental_singletonsupports an optionalvalidateparameter that accepts a validation function for cached data and is called each time the cached value is accessed. - 💾@st.experimental_memo'spersistparameter can also accept booleans. Other Changes - 📟 Multipage apps exclude__init__.pyfrom the page selector (#5890). - 📐 The iframes of embedded apps have the ability to dynamically resize their height (#5894). - 🐞 Bug fix: thumb values of range sliders respect the container width (#5913). - 🪲 Bug fix: all examples in docstrings of Streamlit commands contain relevant imports to make them reproducible (#5877).", "prev_chunk_id": "chunk_1005", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1007", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2023", "title": "Still have questions?", "page_title": "2023 release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1006", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1008", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "2024 release notes", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "2024 release notes", "content": "2024 release notes This page contains release notes for Streamlit versions released in 2024. For the latest version of Streamlit, see Release notes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1009", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.41.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.41.0", "content": "Version 1.41.0 Release date: December 10, 2024 Notable Changes - 🔲st.metricandst.columnshave a parameter to show an optional border (#9927,#9928). - 🎨 Text and background color inMarkdowncan use the \"primary\" color from thetheme.primaryColorconfiguration option (#9676). - 🥶 You can freeze columns withcolumn configurationto make them always visible when scrolling horizontally (#9535,#7078). - 3️⃣ Thetypeparameter forbuttonsaccepts a new option,\"tertiary\"(#9923). - 🚶‍♂️ Streamlit supportspathlib.Pathobjects everywhere you can use a string path (#9711,#9783). - ⏱️st.date_inputandst.time_inputaccept ISO formatted strings for initial values (#9753). - 💬st.write_streamaccepts async generators, which it converts internally to sync generators (#8724,#8161). - 🪵 Theclient.showErrorDetailsconfiguration option has additional values to show or hide more information (#9909). - 🔎 When Streamlit shows stack traces in the app for uncaught exceptions, internal code is omitted or reduced for easier debugging (#9913). - 📈st.line_chartshows tooltips for the nearest point on hover (#9674). - 🌐st.htmlwill attempt to convert non-string objects with._repr_html_()before falling back tostr()(#9877). - 🐍 Streamlit supports Python 3.13 and no longer supports Python 3.8 (#9635). Other Changes - 🔣 Material Symbols have been updated with the latest icons (#9813,#9810). - 👽 Streamlit supports Watchdog version 6 (#9785). Thanks,RubenVanEldik. - 🌀 Bug fix: Streamlit only shows cached function spinners on cache misses and doesn't show spinners for nested cached functions (#9956,#9951). - 🔈 Bug fix: Streamlit's audio buffer handles channels better to correctly play audio recordings in Firefox (#9885,#9799). - 🦊 Bug fix: URL patterns are matched correctly to allow Community Cloud developer tools to display correctly in Firefox (#9849,#9848). - ☠️ Bug fix: Corrected a performance and alignment problem with containers (#9901,#9456,#9560). - 👻 Bug fix:st.rerunwill raise an error if an invalidscopeis passed to it (#9911,#9908). - 🦋 Bug fix: Dataframe toolbars show correctly in dialogs (#9897,#9461). - 🦀 Bug fix:LinkColumnregex fordisplay_textuses the correct URI decoding (#9895,#9893). - 🦎 Bug fix:st.dataframehas correct type hinting", "prev_chunk_id": "chunk_1008", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1010", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.41.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.41.0", "content": "whenon_selection=\"ignore\"(#9898,#9669). - 🐌 Bug fix: Padding is applied consistently for wide and centered layout mode (#9882,#9707). - 🕸️ Bug fix:st.graphviz_chartis displayed correctly whenuse_container_width=True(#9867,#9866). - 🦗 Bug fix: The overloaded definitions ofst.pillsandst.segmented_controluse the correct selection-mode default (#9801). Thanks,RubenVanEldik! - 🦂 Bug fix:st.text_area(and other widgets) are correctly submitted in a form when usingCtrl+Enter(#9847,#9841). - 🦟 Bug Fix:st.writerendersDeltaGeneratorobjects withst.help(#9828,#9827). - 🦠 Bug fix:st.text_areacorrectly matches the value in Session State when used with a key (#9829,#9825). - 🪰 Bug fix:st.text_inputdoes not trigger a rerun when a user submits an unchanged value (#9826). - 🪳 Bug fix: Improved styling forst.exceptionto fix overflow and incorrect padding (#9818,#9817,#9816). - 🕷️ Bug fix: Large dataframe don't overflow and cover the dataframe toolbar in fullscreen mode (#9803,#9798). - 🐞 Bug fix:st.audio_inputshows the correct time on recording in time zones with a half-hour offset (#9791,#9631). - 🐝 Bug fix: In iOS,st.number_inputshows a number pad instead of a keyboard when in focus (#9766,#9763). - 🐜 Bug fix: Widget keys containing hyphens are correctly added to HTML classes in the DOM with anst-key-prefix (#9793). - 🪲 Bug fix: Audio files created byst.audio_inputinclude a timestamp to ensure unique file names (#9768). - 🐛 Bug fix: Double slash URL pathnames do not create a 301 redirect (#9754,#9690).", "prev_chunk_id": "chunk_1009", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1011", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.40.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.40.0", "content": "Version 1.40.0 Release date: November 6, 2024 Highlights - 💊 Introducingst.pillsto create a single- or multi-select group of pill-buttons. - 🎛️ Introducingst.segmented_controlto create a segmented button or button group. - 🎤 Announcing the general availability ofst.audio_input, a widget to let users record sound with their microphones. Notable Changes - ➡️ Markdown renders a limited set of typographical symbols (arrows and comparators). - You can use:streamlit:to render the Streamlit logo inMarkdown. - 🐍st.textwraps text and no longer uses monospace font. - 🪣 You can setuse_container_widthforst.image.use_column_widthis deprecated. - 📅st.date_inputinfers the first day of the week from the user’s locale (#9706,#5215). Other Changes - 🎶 Streamlit’s CLI tool accepts array values for configuration options (#9577). - ⛓️ Static file serving supports symlinks (#9147,#9146). Thanks,link89! - 🚀 Streamlit provides helpful links for deployment when an app is running locally (#9681). - ↕️ The fullscreen button for charts matches with the dataframe toolbar (#9721). - 🏃 The running-man icon has a brief delay before rendering to avoid an unnecessary flicker for fast running apps (#9732). - 🖇️ TheComponentRequestHandlerallows symlinks (#9588). - 👆 Streamlit works withpillowversion 11 (#9742). Thanks,hauntsaninja! - 🗺️ Deck.gl was upgraded to version 9.0.33 (#9636). - 🦠 Bug fix:st.latexstays center-aligned when using thehelpkeyword argument (#9698,#9682). Thanks,emmagarr! - 🪰 Bug fix: Apps correctly access local storage on Android (#9744,#9740). - 🕷️ Bug fix: Cached class methods can be cleared (#9642,#9633). - 🐞 Bug fix: Streamlit clears fragment auto-reruns when a user changes pages. This prevents an invalid index (#9617). - 🐝 Bug fix:st.page_linkmargins are correct (#9625). - 🐜 Bug fix: Form widgets show submission instructions when in focus (#9576,#7079). - 🪲 Bug fix:st.navigationcorrectly reconcilesclient.showSidebarNavigation(#9589,#9581). - 🐛 Bug fix:st.text_arearequires a minimum height of 68px which fits two lines (#9561,#9217). - 💅 Bug fix: Various styling fixes (#9529,#8131,#9555,#9496,#9554,#9349,#7739).", "prev_chunk_id": "chunk_1010", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1012", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.39.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.39.0", "content": "Version 1.39.0 Release date: October 1, 2024 Highlights - 🎤 Introducingst.experimental_audio_inputto let users record with their microphones! - 📍st.pydeck_chartcan return selection events! Notable Changes - 😃st.button,st.download_button,st.form_submit_button,st.link_button, andst.popovereach have a new parameter to add an icon. - 🏢st.logohas a new parameter to adjust the size of your logo. - 🧭st.navigationlets you display an always-expanded or collapsible menu using a newexpandedparameter. - ↕️ You can setheightandwidthforst.mapandst.pydeck_chart. - ↩️ Form submission behavior can be configured with a newenter_to_submitparameter (#9480,#7538,#9406,#8042). - ⏱️ A new config option,server.disconnectedSessionTTL, lets you set a minimum time before a disconnected session is cleaned up (#9179). - 🤹 Dataframes support multi-index headers (#9483,#6319). Other Changes - 🔑 Widget keys appear as HTML classes in the DOM with anst-key-prefix (#9295,#5437,#3888). - 🔍 TheStreamlitAPIExceptionclass has been extended into more specific exceptions for some of the most common errors (#9318). - 🗺️st.mapandst.pydeck_charthave a full-screen toggle that matches the dataframe toolbar. - ⬆️ Frontend dependencies for Vega have been upgraded (#9443,#9438). - 🕵️ Streamlit is compatible with Watchdog version 5 (#9354). Thanks,RubenVanEldik! - 🔁 Streamlit is compatible with Tenacity version 9 (#9348). - 🔢 Bug fix: Column configuration will override any text or number format frompandas.Styler(#9538,#7329,#7977). - 🦋 Bug fix: Deck GL zoom button has the correct border radius (#9536). - 🦐 Bug fix: Embedded apps have the correct padding to avoid hiding elements (#9524,#9341). - 🎨 Bug fix: Thest.multiselectplaceholder text has the correct color (#9523,#9514). - 🧹 Bug fix:st.jsonscrolls horizontally instead of overflowing its container (#9521,#9520). - 🌬️ Bug fix: Bokeh charts (temporarily) don't have a fullscreen button to prevent horizontal scrolling (#9528,#2358). - 🐡 Bug fix: Users are correctly redirected if they add a trailing slash to a page URL (#9500,#9127). - 📁 Bug fix:st.Pagewarns developers against using subdirectories inurl_path, which is not supported (#9499). - 💩 Bug fix: Streamlit correctly calculates", "prev_chunk_id": "chunk_1011", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1013", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.39.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.39.0", "content": "dataframe widths to prevent Minified React error #185: Maximum update depth exceeded (#9490,#7949). - ☠️ Bug fix: ScriptRunContext handles the active script hash to avoid a race condition where widgets lose state in a multipage app (#9441,#9100). - 🪱 Bug fix: PDFs don't appear as plain text when hosted through static file serving in Streamlit (#9439,#9425). - 👻 Bug fix: Fragment elements don't disappear when used with custom components and callbacks (#9381,#9389,#9372). - 👽 Bug fix: Streamlit watches the correct directory for file changes (#9453,#7467). - 🦀 Bug fix: The sidebar navigation uses page count to determine when to display a \"show more\" button for more consistent behavior (#9394). - 🦎 Bug fix: The internal script hash is updated at the beginning of a script run instead of the end for correct page routing when a script run is interrupted (#9408,#8975). - 🐌 Bug fix: Bold formatting in headers is ignored (#9395,#4248). - 🕸️ Bug fix: Streamlit correctly identifies the MIME type of more files to prevent custom components from not rendering (#9390,#9365). Thanks,t0mdavid-m! - 🦗 Bug fix: Theclient.showSidebarNavigationconfiguration option works correctly withst.navigation(#9379). - 🦂 Bug fix: Streamlit usesexample.cominstead oftest.comin a health check to avoid unnecessary warnings (#9371). Thanks,wyattscarpenter! - 🦟 Bug fix:st.Pagewill raise an error if it tries to initialize a page with an empty path (#9374,#8892). - 🦠 Bug fix: An unchangedst.dialogcan be programmatically reopened after a user has dismissed it (#9333,#9323). - 🪰 Bug fix: Streamlit will not remove underscores from declared page titles inst.Page(#9375,#8890). - 🪳 Bug fix:st.logodoes not flicker when switching pages (#9361,#8815). - 🕷️ Bug fix:st.data_editorallows users to re-add a row with the same index after deleting it (#8864,#8854). - 🐞 Bug fix:st.logomaintains its aspect ratio when resized to fit within the sidebar width (#9368). - 🐝 Bug fix: Streamlit correctly removesst.logoif not called", "prev_chunk_id": "chunk_1012", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1014", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.39.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.39.0", "content": "during a rerun (#9337,#9336). - 🐜 Bug fix:st.logodoes not flicker when the sidebar changes its state (#9338). - 🪲 Bug fix: Streamlit rendersst.balloonsandst.snowin a React Portal for improved rendering and compatibility withst.dialog(#9335,#9236). - 🐛 Bug fix: Option labels are cleanly truncated whenst.multiselectis displayed in a narrow container (#9334,#8213).", "prev_chunk_id": "chunk_1013", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1015", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.38.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.38.0", "content": "Version 1.38.0 Release date: August 27, 2024 Highlights - 📈 Streamlit natively supports more dataframe formats! Use dataframe and series objects from popular libraries like Dask, Modin, Numpy, pandas, Polars, PyArrow, Snowpark, Xarray, and more. Use database cursors compliant with the Python Database API Specification 2.0. Use anything that supports the Python dataframe interchange protocol. See thedocs. Notable Changes - ↔️ You can control the initial expansion state ofst.jsonelements. - 🧑‍💻 You can choose to wrap lines inst.code. - 🕵️ Streamlit supports Kubernetes style secrets so you can use Snowflake Snowpark Container Services secret format (#9078). - ⤴️ Breaking change: We removed a patch that allows custom validators inpydantic<2.0(#9257). - 💔 Breaking change: We removed the experimental cache replay feature from caching decorators (#9305). Other Changes - 🌐 For better app efficiency, a WebSocket reconnect will not trigger a rerun unless a script run was interrupted (#9083). - 👋 We updated ourstreamlit helloapp to use Google Material icons. - ⌨️st.number_input,st.selectbox,st.slider,st.select_slider, andst.radioprovide more precise type hinting for their return values (#9048,#9296,#8717). Thanks,Asaurus1! - ⭐st.feedbackprovides more precise type hinting for its return value (#9216). Thanks,wyattscarpenter! - 💅 We improved theme management for embedded apps viapostMessage(#9103). - 🌱 Bug fix: Within the sidebar, the image forst.logoresizes along with the sidebar width (#9298,#8707). - 🪹 Bug fix: When a parent fragment updates, Streamlit cleans up child fragments correctly (#9246,#9233,#9267). - 💩 Bug fix: Elements unstale within a fragment rerun as they are updated instead of all together at the end of the fragment rerun (#9285). - 🪱 Bug fix: If a block type changes during a rerun, Streamlit discards the child elements of that block to prevent improper visual artifacts, likest.tabscausing a blank page (#9276,#9259,#8676). - ☠️ Bug fix: Widget state is preserved when page reruns are interrupted with another rerun (#9187,#9163). Thanks,dannyopts! -", "prev_chunk_id": "chunk_1014", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1016", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.38.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.38.0", "content": "👽 Bug fix:optionsinst.selectbox,st.multiselect,st.radio, andst.select_slidercorrectly usedict_items(#9241,#9237,#5377). - 👻 Bug fix: ASelectboxColumnindex will show with the correct, grayed-out styling in a dataframe (#9231,#8772). - 🦀 Bug fix:st.write_streamwill not immediately fail when receiving an empty chunk (#9234,#9227). - 🦋 Bug fix: Streamlit won't auto-scroll to an empty anchor, if present (#9206,#9203). - 🦎 Bug fix: We changed the handling ofscriptRunIdto preventst.tabsfrom showing extra, empty tabs in fragments (#9186,#9158,#9215). - 🐌 Bug fix: Automatically rerunning fragments don't raiseFragmentStorageKeyErrorto prevent a possible race condition (#9183,#9080). - 🕸️ Bug fix: We improvedst.plotly_chart's handling of the pass-through keyword argumentconfig(#9190,#9134). - 🦗 Bug fix: Markdown in alllabelparameters correctly ignores headers (#9189,#9141). - 🦂 Bug fix: We reverted a change to fragments which caused some widgets to lose state in some circumstances (#9178,#9171). - 🦟 Bug fix: The deprecation warnings forst.experimental_fragmentandst.experimental_dialogonly show when the commands are called. This prevents custom components which use them from raising premature warnings on import (#9170,#9143). - 🦠 Bug fix:st.codeshows syntax highlighting for diff code whenlanguage=\"diff\"(#9172,#8687). - 🪰 Bug fix: Streamlit commands that raiseScriptControlExceptionexecute as expected in try-except blocks (#9167,#9155,#9182). - 🪳 Bug fix: Thevalueforst.date_inputhas the correct type for linting (#9149). Thanks,wyattscarpenter! - 🕷️ Bug fix: We updatedplotly.jsto supporthoversubplots=\"axis\"(#9144,#9118). - 🐞 Bug fix: We stabilized the identity ofst.mapinstances so the command doesn't create multiple maps when its parameters are updated (#9092,#8329). - 🐝 Bug fix: You can now clear the cache for cached class instance methods (#9101,#8638). - 🐜 Bug fix: Copy buttons work correctly in dialogs (#9130,#9112). - 🪲 Bug fix: Streamlit magic works consistently in for-else, while-else, try-else, try-except, and match blocks (#9110,#9109). Thanks,whitphx! - 🐛 Bug fix: When printing an app, the bottom container will always print at the end without overlapping other content (#9129).", "prev_chunk_id": "chunk_1015", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1017", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.37.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.37.0", "content": "Version 1.37.0 Release date: July 25, 2024 Highlights - 🍪 Introducingst.contextto read headers and cookies! - ⭐ Introducingst.feedbackto collect ratings and sentiment from your users! - 👟 Announcing the general availability ofst.fragment, a decorator that lets you rerun functions independently of the whole page. - 🍿 Announcing the general availability ofst.dialog, a decorator that lets you create modal dialogs. Notable Changes - ℹ️ You can use icons from the Material Symbols library inMarkdown! - 📈 You can passgraphviz.Sourceobjects tost.graphviz_chart. - 📊 You can modify the stacking behavior forst.bar_chartandst.area_chart. - 🔭 Within a fragment, you can scopest.rerunto the fragment. - 🪺 Streamlit supports nested fragments (#8931,#8635). - 📞 Fragments can be used in callback functions (#8916,#8591). Other Changes - ⭕ Material Symbols are rounded instead of outlined (#8998). - 🔢 Streamlit supports Numpy version 2.0 (#8940). - 😄 We've updated emoji validation for new emojis (#8923). - 👻 We've removed several experimental commands with new, generally available versions (#8943). - ☠️ We've removed deprecated configuration options per their announced expiration date (#9005,#9013,#9018). - 🦎 Bug fix: Nested fragments rerun correctly when a child fragment precedes a widget in the parent fragment (#9114). - 🐌 Bug fix: Streamlit validates file paths before performing additional checks when using static file serving for improved security (#8990). - 🕸️ Bug fix:st.mapdisplays at the correct width insidest.expander(#9070,#8004). - 🦗 Bug fix: Streamlit displays the correct (Windows) path forsecrets.tomlin an error message (#9061,#6147). - 🦂 Bug fix:st.switch_pagecorrectly clears non-embed query parameters when the user switches pages (#9059,#9050). - 🦟 Bug fix: Custom themes display correctly for multipage elements likest.page_link(#8994,#8978). - 🦠 Bug fix:st.snowandst.balloonsdon't show in prints (#9053,#7790). - 🪰 Bug fix: We've improved the default formatting forst.number_input(#9035,#7163). - 🪳 Bug fix: Anst.navigationexample was corrected (#9027,#9026). Thanks,mahotd! - 🕷️ Bug fix: Dialogs no longer have a brief delay", "prev_chunk_id": "chunk_1016", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1018", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.37.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.37.0", "content": "when closing (#9023,#8747). - 🦀 Bug fix: Streamlit correctly raises aKeyErrorwhen encountered in a fragment instead of a misleading, fragment-related error (#9011,#8494). - 🐞 Bug fix: Streamlit doesn't clearMediaFileManageron fragment reruns to prevent invalid references (#9010,#8932). - 🐝 Bug fix: Custom themes are correctly removed when deleted (#8989,#8962). - 🐜 Bug fix: Streamlit supports non-unix style paths for correct multipage routing in Windows (#8988,#8958). - 🪲 Bug fix: Usingst.rerunin a fragment will not cause the app's main body content to render in the fragment in rare events (#8798). - 🐛 Bug fix: When an exception is raised within a fragment, Streamlit shows the error message within the fragment (#8868).", "prev_chunk_id": "chunk_1017", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1019", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.36.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.36.0", "content": "Version 1.36.0 Release date: June 20, 2024 Highlights - 🧭 Introducingst.navigationandst.Pagefor a new way to define multipage apps! Check out thedocsto learn more. Notable Changes - 📊st.bar_chartcan render charts horizontally. - ℹ️st.expandersupports adding an icon next to its label. - 🏗️st.columnslets you set vertical alignment. - 📲 Custom components support callback functions (#8633,#3977). - 📥 Fragments no longer support rendering widgets outside of their main body (#8756). - 🏷️ You can now customize axis labels forst.area_chart,st.bar_chart,st.line_chart, andst.scatter_chart. - ⌛ The caching parameterexperimental_allow_widgetsis deprecated (#8817). - ❌ Streamlit no longer supports legacy caching.st.cacheis now an alias forst.cache_dataandst.cache_resource(#8737). - ⬆️ Streamlit supportsprotobufversion 5 (#8627). Other Changes - ✨ Streamlit Hello usesst.navigationandst.Page, the new, preferred method for declaring multipage apps (#8806). - 🧹 Streamlit no longer appends \"· Streamlit\" to the page title of apps, unless running on Community Cloud (#8900). - 🦋 Streamlit magic andst.writeusest.jsonto displayst.secrets(#8659,#2905). - 🔍 Streamlit doesn't automatically check for newer version on PyPi (#8841,#8453). - 🐌 Bug fix: Custom component functions require importingstreamlit.components.v1(#8666,#8644). - 🕸️ Bug fix: Reverted change to handle Altairsresolve_scalemethod since it caused a regression (#8845,#8642). - 🦗 Bug fix: Images in Markdown do not overflow the Markdown container (#8794). - 🦂 Bug fix: Clarified the error message forst.selectboxwhenindexis larger than the size ofoptions(#8775,#8771). - 🦟 Bug fix: Streamlit correctly handles non-widget elements with IDs (#8770,#8768). - 🦠 Bug fix: Docstrings correctly identify whenuse_container_width=Trueis the default (#8809). - 🪰 Bug fix: Streamlit has a consistent minimum element height for better vertical alignment (#8797,#8835,#8027,#8706). - 🪳 Bug fix: Added check to ensureSessionInfois initialized before performing actions (#8779,#8321,#7549). - 🕷️ Bug fix: Dataframe use raw numbers without formatting by default (#8708,#8695). - 🐞 Bug fix: Updated the error message for disallowed writes to Session State (#8720,#8715). - 🐝 Bug fix: Streamlit doesn't initializeLocalSourcesWatcherif file watching is disabled (#8741,#8738).", "prev_chunk_id": "chunk_1018", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1020", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.36.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.36.0", "content": "- 🐜 Bug fix:st.experimental_dialogno longer has an invalid default value fortitle(#8729). - 🪲 Bug fix: Removed deprecated kwargs inast.Callto prevent type error (#8711). Thanks,JelleZijlstra! - 🐛 Bug fix:st.experimental_dialogis explicitly exported to avoid a type checking error (#8728,#8712).", "prev_chunk_id": "chunk_1019", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1021", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.35.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.35.0", "content": "Version 1.35.0 Release date: May 23, 2024 Highlights - 📈 Announcing user selections for charts! Usest.plotly_chart,st.altair_chart, andst.vega_lite_chartto make chart widgets for even more interactive apps. - 🚣‍♂️ Announcing user selections for dataframes. Get row and column selections from users withst.dataframe. - 💼 Introducingst.logoto add an image in the sidebar, above navigation. Notable Changes - 🔗st.page_linksupports Material icons (#8593). - ⚓ Anchor button for headers display inline at the end of headers for a more beautiful and consistent appearance (#8587). - 🈂️SQLConnectionacceptsqueryas asqlalchemy.URL.createparameter so you can specify character sets (#8581). Thanks,LucianLiu6! Other Changes - 🕸️ Bug fix: A fallback method was added for CSV downloads to increase browser compatibility (#8452,#8210). - 🦗 Bug fix: Column config is deep-copied when cloned to prevent unintentional modifications (#8677). - 🦂 Bug fix:st.data_editorrenders correctly when usingnum_rows=dynamicwith null values in added rows (#8640,#7458). - 🦟 Bug fix:streamlit runwill display thelocalhostaddress when initializing Streamlit withserver.headless=true(#8647,#8629). - 🦠 Bug fix: Scroll margin matches the new toolbar (app chrome) height (#8641,#8554). - 🪰 Bug fix: Enum coercion is compatible with StrEnum (#8622,#8500). Thanks,97k! - 🪳 Bug fix: Focus is returned to chat input after clicking submit for a better mobile experience (#8637). - 🕷️ Bug fix: Internal parameter and view names for Altair charts are stabilized for better performance (#8628). - 🐞 Bug fix: Typing was improved forst.query_params.update()andst.query_params.from_dict()(#8614,#8613). Thanks,Asaurus1! - 🐝 Bug fix: The fullscreen button no longer appears forst.tableto prevent unwanted side scrolling (#8621,#2358). - 🐜 Bug fix: Streamlit correctly clears stale elements when usingst.rerun(#8599,#8360). - 🪲 Bug fix: Custom components can be executed standalone for testing and scripting (#8620,#8606). - 👻 Bug fix: Plotly charts no longer render cached data when updated (#8191,#5902) - 👽 Plotly chart widths will not overflow its parent container when rendered in a bordered container (#8191,#8244). - 🦀 Plotly charts usingwebglrender correctly", "prev_chunk_id": "chunk_1020", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1022", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.35.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.35.0", "content": "on M1/M2 chipsets for macOS (#8191,#8169). - 🦋 Plotly charts are sized correctly when rendered vertically adjacent (#8191,#7597). - 🦎 Bug fix: Plotly charts retain their state when the app window is resized (#8191,#6324). - 🐛 Bug fix: Plotly charts inst.tabsno longer flicker when changing tabs (#8191,#8575). - 🐌 Bug fix: Plotly charts respectuse_container_widthif this parameter is changed between reruns (#8191,#8576).", "prev_chunk_id": "chunk_1021", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1023", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.34.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.34.0", "content": "Version 1.34.0 Release date: May 2, 2024 Highlights - 🍿 Introducingst.experimental_dialog! Create a modal overlay that can also rerun independently from the rest of your app. Check out thedocsto learn how. Notable Changes - 🔣st.toast,st.chat_message,st.set_page_config,st.info,st.success,st.error, andst.warningcan use Google Material Symbols for their icons. - 🌈Markdownsupports background colors for text. Check out thefeature demo app. - 🎥st.audioandst.videocan now be set to autoplay.st.videocan be muted. - 🗃️ You canclear specific cached valuesfor a cached function. Thanks,OscarSaharoy! - ❓ You can now set all query parameters with a single call tost.query_params.from_dict. Thanks,Asaurus1! Other Changes - 🔲 Streamlit supports Modin and Snowpark pandas DataFrames and Series (#8506). - ⏱️ Improved support forperioddata types inst.dataframeandst.data_editor(#7987). - 🗺️ Streamlit supports usingpydeck-cartowithst.pydeck_chart(#8422). - ❄️ Additionalsnowflakerequirements were updated to allow Python versions 3.8 to 3.11 (#8538). - 🍞st.toastreceived visual improvements and now appears in the top right (#8433). - 🦋 Visual tweaks for dialogs and modals. - 🦀 Bug fix:st.write_streamreturns an empty string when passed a generator with no yield (#8560). - 🦎 Bug fix: Widgets that supportNonevalues can be correctly set toNonethrough Session State (#8529,#7649). - 🐌 Bug fix: If the initial value forst.date_inputis not set and today's date falls outside the declared minimum or maximum, then the minimum or maximum will be used instead, whichever is closer (#8519,#6167). - 🕸️ Bug fix: Altair'sresolve_scalemethod is handled correctly (#8497,#1667). - 🦗 Bug fix:st.multiselectscorrectly handles sets when passed tooptionsordefault(#8471,#8466). - 🦂 Bug fix:st.statusdoes not show the expander toggle when empty (#8369). - 🦟 Bug fix: The width ofvconcatcharts in Vega and Altair is set correctly (#8498,#2751). - 🦠 Bug fix: Apps print beautifully and no longer show excessive whitespace (#8502,#7815). - 🪰 Bug fix: Invalid escape sequences were removed to avoid warnings frompytest(#8510,#8501). - 🪳 Bug fix:st.file_uploadercallback is correctly executed once per file selection after the first selection (#8493,#4877).", "prev_chunk_id": "chunk_1022", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1024", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.34.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.34.0", "content": "- 🕷️ Bug fix: Streamlit is compatible down topillowversion 7.1.0 instead of 9.1.0 (#8492,#8486). - 🐞 Bug fix: Widget values are correctly dropped when a script run is interrupted by switching pages (#8425,#7338). - 🐝 Bug fix: Apps in dark mode will return to dark mode after printing (#8469,#7879). - 🐜 Bug fix: Component ready state is dynamic to avoid race conditions that caused blank apps in Safari (#8434,#8362). - 🪲 Bug fix:st.slideryields a Python error whenmin_valueis less than or equal tomax_value(#8413,#8342). - 🐛 Bug fix: Time is offset correctly for Vega and Altair (#8278,#4342).", "prev_chunk_id": "chunk_1023", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1025", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.33.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.33.0", "content": "Version 1.33.0 Release date: April 4, 2024 Highlights - 👟 Introducingst.experimental_fragmentto decorate functions and rerun them independently of the whole page. Check out thedocsand give your apps a speed boost! - 🌐 Introducingst.htmlto insert custom HTML into your app! Check out thedocsfor how to use it. Notable Changes - 📺st.audioandst.videoallow looping and setting an end time (#8203,#8348). - 🔁AppTestallows switching pages withAppTest.switch_page(#8280). - 🧪format_funcis accessible inAppTestfor widgets that use it (#8189,#8019,#7679). - 📈 Column configuration now includesAreaChartColumn.LineChartColumnno longer shows area (#8237). - 🚧 Breaking change:st.writewill no longer setunsafe_allow_html=Truewhen passed an object containing a_repr_html_method. For more information, see PR#8238. Other Changes - 🖱️Users can click on the widget label to focus on input forst.number_input,st.text_input, andst.text_area(#8155). Thanks,filiptammergard! - ⬆️ Streamlit supportspackagingversion 24.x (#8338,#8328). - 🕸️ Bug fix: Streamlit now watches for changes to imported modules in addition to pages (#8372). Thanks,zyxue! - 🦗 Bug fix: Overflowing toast messages are correctly truncated (#8337,#8330). - 🦂 Bug fix:st.statuscorrectly updates to complete when using LangChain'sStreamlitCallbackHandler(#8331). - 🦟 Bug fix: Custom components no longer show white backgrounds in dark themes (#8242,#8156,#7813). - 🦠 Bug fix: Content area width is reduced when a fullscreen icon would otherwise cause horizontal overflow (#8279,#6990). - 🪰 Bug fix: Custom components with undefined frame heights will render with a height of 0 (#8290,#8285). - 🪳 Bug fix: Restored a check for active sessions to prevent apps from needlessly running when no users are connected (#8294). - 🕷️ Bug fix: Custom themes have precedence over embedding options (#8021,#7118). - 🐞 Bug fix: Reverted the async timer to expire session storage cache to address computational efficiency (#8281). - 🐝 Bug fix: When usingst.popoverwithuse_container_width=True, the popover container's minimum width will match the popover button (#8266,#8261). - 🐜 Bug fix: Usingst.rerunwith a triggering widget inAppTestno longer creates an infinite loop (#8264,#7768). - 🪲 Bug fix:", "prev_chunk_id": "chunk_1024", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1026", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.33.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.33.0", "content": "URLs are correctly decoded inLinkColumnif regex is used or if not using fully qualified URLs (#8258,#7064). - 🐛 Bug fix:st.query_paramsonly sends oneForwardMsgwhen updating multiple parameters (#8205,#8199). Thanks,Asaurus1!", "prev_chunk_id": "chunk_1025", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1027", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.32.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.32.0", "content": "Version 1.32.0 Release date: March 7, 2024 Highlights - 🍿 Introducingst.popoverto create popover elements in your Streamlit apps. Check outthe docsto see how to use it! Notable Changes - 📺 You can now pass subtitles tost.video! Check out ourfeature demo. - ⚗️AppTestincludes support forst.expanderandst.status. - 🧪AppTest.from_functionaccepts a function that takes arguments and/or returns a value. - 🧩 The timeout warning for custom components was replaced with an element skeleton to improve the UX for slow-loading components, especially in some cloud-hosted platforms (#8179,#7046). - 📄st.switch_pageandst.page_linkreceived significant improvements to path handling, performance, and visual appearance (see below for details). - 🦀 Bug fix: Streamlit usesglide-data-gridversion 6.0.4 to fix a variety of dataframe issues (#7779,#6900,#7032,#7727,#6810,#7930,#7949,#7831,#8168). - 💦 Bug fix: We've plugged a significant memory leak in the coroutine loop. Apps that generate a large number of small messages between client and server will benefit greatly (#8068,#7989,#6510). Other Changes - 💪 Multiple modules are now lazy-loaded to speed up Streamlit's import time (#8150,#8143,#8134,#8113,#8125,#8111,#8109,#6066). - 🖼️st.writesupportsPILimages (#8039). - 🔗st.radioallows markdown links within the items passed tooptions(#8028,#7992). - 💀 Thedeprecation.showPyplotGlobalUseconfig option is deprecated and will be removed in the subsequent release (#8133). - 🤖 Streamlit supports AzureOpenAI chat stream (#8107,#8084). - 🌐 The/healthzendpoint supports the HTTP HEAD method (#8145,#8144). Thanks,rahulmistri1997! - 🌀 Thecacheparameter forst.spinneris now private (_cache) since it's for internal use (#8118). - 🏃 Session storage is checked and expired asynchronously to improve performance and efficiency of apps with lower traffic (#8083). - 🐜st.write_streamraises a descriptiveExceptionwhen the message cannot be parsed (#8036). - 📘 Fixed a typo in the examples forst.switch_pageandst.page_link(#8162). Thanks,t1emp0! - 👻 Bug fix:st.helpcorrectly displays conditional members (#8228). - 🦋 Bug fix: App State fully clears on page change to prevent lingering stale elements (#8208). - 🦎 Bug fix:st.info,st.success,st.warning, andst.errordon't overflow with long markdown strings (#8194,#6394). - 🐌 Bug fix: Streamlit shows a", "prev_chunk_id": "chunk_1026", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1028", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.32.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.32.0", "content": "warning that port 3000 is reserved for development when the server port is set to 3000 (#8152,#8149). - 🕸️ Bug fix:st.page_linkandst.switch_pagehave improved path calculation for consistency (#8127). - 🦗 Bug fix:st.page_linkshows the correct path in browser on hover (#8086,#8080). - 🦂 Bug fix:st.page_linkandst.switch_pagenormalize paths for correct handling in Windows (#8103,#8070). - 🦟 Bug fix: Script runner uses a while loop instead of recursion to avoid stack overflows (#8100). - 🦠 Bug fix:st.page_linkandst.switch_pagecorrectly handle relative paths prefixed with\"/\"(#8085,#8081). - 🪰 Bug fix:st.imageparses paths in Windows correctly (#8092,#7271,#6066). - 🪳 Bug fix:st.switch_pageno longer waits for the current page to finish running before switching pages (#8054,#7954). - 🕷️ Bug fix:st.mapand other simple charts correctly handle color when data is not indexed starting from 0 (#8158,#8079,#8077). Thanks,awhazell! - 🐞 Bug fix:st.selectbox,st.multiselect,st.select_slider, andst.radiouse shallow copies of their options to prevent unexpected mutations (#8064,#7534). - 🐝 Bug fix: The selected time inst.time_inputdisplays correctly in dark mode (#8056,#7436). - 🪲 Bug fix: Dataframe scrollbars display correctly in the latest version of Chrome (#8034). - 🐛 Bug fix: Castingst.query_paramstostrwill print the content of the query parameters instead of the class description (#8030).", "prev_chunk_id": "chunk_1027", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1029", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.31.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.31.0", "content": "Version 1.31.0 Release date: February 1, 2024 Release videos - What's new? Highlights - 🔗 Introducingst.page_link! Now, you can build custom navigation menus for your multipage apps. Check outour docsto see how. - 💦 Announcingst.write_streamto conveniently handle generators and streamed responses. Check outour docsto see how making chat apps just got easier. Notable Changes - 📝st.chat_inputcan be used inline and placed anywhere in the app. You can also have multiplest.chat_inputwidgets on a page (#7896). Other Changes - 🧹 Internal refactoring and cleanup (#7980). Thanks,whitphx! - ❄️ Bug fix: Snowpark is now an optional dependency forSnowflakeConnection(#7919). - 🕷️ Bug fix: The watchdog suggestion is disabled whenserver.fileWatcherTypeis set tononeorpoll(#8024,#7999). - 🐞 Bug fix: Required columns can be hidden when not usingst.data_editorwith dynamic rows (#7996,#7991). - 🐝 Bug fix: New period types are supported for pandas 2.2.0 (#7988). - 🐜 Bug fix: Custom components receive only the app's origin and path to avoid reloading components when query parameters change (#7951,#7503). Thanks,eric-skydio! - 🪲 Bug fix:st.progresswon't raise an exception when given a value above 1.0 due to float precision (#7953,#5517). Thanks,notiona! - 📚 Streamlit supportsimportlib-metadataversion 7 (#7925). Thanks,elgalu! - 🐛 Bug fix:AppTestcorrectly sees widgets inside containers (#7923,#7711). - 💿 Custom components no longer accumulate style elements when re-rendered for better performance (#7914). Thanks,Tom-Julux!", "prev_chunk_id": "chunk_1028", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1030", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.30.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.30.0", "content": "Version 1.30.0 Release date: January 11, 2024 Release videos - What's new? Highlights - 🔄 Announcingst.switch_pageto programmatically switch pages in multipage apps! Check out ourdocsto learn about this highly anticipated feature! - ❓Introducingst.query_paramsto handle variables passed through your app's URL. Check out ourdocsto understand this feature and how it's been upgraded and improved from our experimental version! Notable Changes - 📐st.containercan be configured with a height to create grids or scrolling containers (#7697,#2169,#2447). - 🔗 For dataframes,LinkColumnhas a simplified UI and can be configured with display text, including programmatically defined text through regular expressions (#7784,#7741,#6787). - 🧭 Sidebar navigation for multipage apps can be hidden via configuration (#7852). - ⏩ Plotly figures can load even faster when used in combination withorjson(#7860). Thanks,eric-skydio! - ♻️ Behavior change: Query parameters are removed when changing pages (#7817,#6725,#5505). Other Changes - 🛠️showFooteris no longer an embed option since the footer no longer exists (#7902,#7785). - 🕵️ All security concerns should be reported throughHackerOne(#7783). - 🕷️ Bug fix: Tabs are not disabled when stale to prevent flickering (#7905,#7820). - 🛡️ Bug fix: The full file path is used instead of a prefix to prevent custom components from reaching beyond their own folders (#7901). - 🪱 Bug fix: Widgets raise an exception if its values aren't Python comparable (#7840,#3714). - 🐞 Bug fix: The down-arrow icons on expanders maintain a consistent size (#7596). Thanks,matiboux! - 🐝 Bug fix: Tabs no longer flicker when switching between them (#7904). - 🐜 Bug fix: Enter-to-submit is automatically disabled when the associatedst.form_submit_buttonis disabled (#7827,#7822). - 🪲 Bug fix: Required columns cannot be hidden with column configuration (#7888,#7559). - 🐛 Bug fix: Usingnanas a value inSelectboxColumnwill raise an error instead of silently failing (#7887,#7558). - 🌙 Bug fix: Custom component iframes allow dark mode (#7821,#7813). - 🪰 Bug fix: The command", "prev_chunk_id": "chunk_1029", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1031", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Version 1.30.0", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Version 1.30.0", "content": "to start Streamlit is not sent to the frontend (#7787). - 💅 Bug fix: The background color ofst.toggleis enhanced for better visibility (#7788). - 🪳 Bug fix: Built-in charts can handle ordered categorical columns (#7771,#7776).", "prev_chunk_id": "chunk_1030", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1032", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2024", "title": "Still have questions?", "page_title": "2024 release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1031", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1033", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "2025 release notes", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "2025 release notes", "content": "2025 release notes This page contains release notes for Streamlit versions released in 2025. For the latest version of Streamlit, see Release notes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1034", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.48.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.48.0", "content": "Version 1.48.0 Release date: August 5, 2025 Highlights - 💪 Announcing horizontal flexcontainers! Configure the alignment, direction, and gap of containers to create dynamic layouts. Notable Changes - 🪵st.logoutwill log the user out of their identity provider if the server metadata includesend_session_endpoint(#11901,#11900). Thanks,velochy! - 💬 You can configure the dismissibility ofst.dialogand set callback functions (#9504,#12034). Thanks,souvikmaji! - ↔️ You can set awidthparameter forbuttonsandpopovers. - 🧑‍💻codeFontWeightcan be configured separately in the sidebar. - 📶 You can configure the WebSocket ping interval with theserver.websocketPingIntervalconfiguration option (#12117,#12108). Other Changes - 🌀 The spinner design was unified across Streamlit commands (#12031). - 💅 Design and style tweaks (#12032,#11989,#11986,#11999,#12015,#11995,#11981,#11964). - 🔄 Error logic and logging was improved to reduce confusion fromasyncioruntime errors when unrelated errors are raised (#12008). - 🪧 Dataframe column menus include an icon to show the column type and a button to copy the column name (#11303). - 💽 For convenience, there are additional \"extras\" installation options (#11760,#8233). - 📁 Additional checks are performed to validate the extension of uploaded files, but app developers are still responsible for checking and handling the security of uploaded files (#11884,#11883). - 🔘 Button group widgets are identified by their command name in error messages (#11769,#11753). Thanks,bajajku! - ⚔️ Forst.snow,st.balloons, chat avatars, and media elements, thecrossoriginproperty can be configured by hosts (#12087,#11948). - 🦗 Bug fix: Ctrl+C will stop a Streamlit server in Windows, even if there is no active session (#12049,#6855). - 🦂 Bug fix:st.line_chartuses the column order in the chart data instead of reordering them alphabetically (#12092,#12071). - 🦟 Bug fix: Menu items set inst.set_page_configare not hidden whenclient.toolbarModeis set to\"minimal\"(#12091,#12083). - 🦠 Bug fix:theme.codeFontWeightdoes not interfere with bold inline code (#12074,#11976). - 🪰 Bug fix: To allow fractional pixel values, heading font sizes in theming configuration aren't rounded (#12077,#11963). - 🪳 Bug fix: Altair", "prev_chunk_id": "chunk_1033", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1035", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.48.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.48.0", "content": "5.4.0 and 5.4.1 have been excluded to prevent an upstream bug with reading dataframes (#12066,#12064). - 🕷️ Bug fix: Dataframe scrollbars have been tweaked to avoid sizing problems (#11936,#11921,#12053,#11985). - 🐞 Bug fix: Linting accepts lists in addition to tuples for callback arguments in widgets (#12039). - 🐝 Bug fix: To fix a deprecation warning, Altair theme syntax was updated (#12050). - 🐜 Bug fix:st.navigationdoes not hide the menu when a single section is used withposition=\"top\"(#12025,#12029). - 🪲 Bug fix: The sidebar state does not reset when the window is resized (#12024,#12016). - 🐛 Bug fix:st.pillsandst.segmented_controldon't raise unintendedStreamlitDuplicateElementIderrors (#11982,#11975).", "prev_chunk_id": "chunk_1034", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1036", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.47.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.47.0", "content": "Version 1.47.0 Release date: July 16, 2025 Highlights - 🎨 Streamlit has additionaltheming configurationoptions!theme.baseFontWeight: Set the root font weight of text in the app.theme.chartCategoricalColors: Configure default categorical colors for Plotly, Altair, and Vega-Lite charts.theme.chartSequentialColors: Configure default sequential colors for Plotly, Altair, and Vega-Lite charts.theme.codeFontWeight: Set the font weight of code text.theme.dataframeHeaderBackgroundColor: Set the background color of dataframe headers.theme.headingFontSizes: Set the font sizes of headings.theme.headingFontWeights: Set the font weights of headings.theme.linkUnderline: Configure whether to underline links. Notable Changes - 💬 You can set the unsubmitted value ofst.chat_inputthrough Session State (#10175,#7166). - ↔️ You can set awidthparameter forst.html,st.feedback,st.pills,st.segmented_control, andst.multiselect. - ↕️ You can set aheightparameter forst.metricandst.text_area. - 👩‍💻st.codeandst.formcan haveheight=\"stretch\". - 🧑‍💻st.codecan havewidth=\"content\". - ⏱️ You can show the elapsed time with the spinner for cached functions using theshow_timeparameter (#11469,#10647). Thanks,Darkace01! - server.showEmailPromptlets you configure whether to show the email prompt (for locally running apps). - 💾NumberColumnandProgressColumnsupport\"bytes\"as a predefined format (#11288,#11287). Thanks,cgivre! - ⚙️ Column configuration accepts pixel widths for columns (#11838). - ℹ️ Thedisplay_textparameter ofLinkColumnaccepts a Material icon (#11690,#7004). - 🖊️ Thetitleparameter ofst.dialogaccepts Markdown (#11763,#11755). - 🧩 To support proxying requests for custom components, indeclare_component, you can set bothurlandpath(#11698). Other Changes - 🧭 Section labels in the sidebar navigation widget are collapsible (#11863). - 📂 The \"Deploy\" button is hidden when the \"File change\" notification is visible in the app chrome (#11834). - 🔝 When using top navigation in an app, the header has more padding (#11836). - 🪜 InNumberColumn, the precision fromstepwill override the display precision fromformat, unlessformatis a printf string (#11835). - 📅 Whenst.date_inputaccepts a date range, the widget displays a quick-select option below the calendar for common date ranges (#10166,#11108). - 🏋️ Dataframes support font weight defined inpandasStylerobjects (#11705,#6461). - 🫥 The about dialog does not show by default in the app menu. The current Streamlit version is displayed", "prev_chunk_id": "chunk_1035", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1037", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.47.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.47.0", "content": "in the settings dialog (#10091). - 💅st.metricuses a background color for the delta value, likest.badge(#11678). - 💻 IDEs can give type hints for.clear()on cached functions (#11793,#11821). Thanks,whitphx! - 🔄 Bug swap: To prevent a multipage app regression,st.context.themedoes not automatically rerun the app on first load. In some cases,st.context.thememay not be correct until the first rerun (#11870,#11797). - 🧹 Bug fix:st.chat_inputdisplays correctly at the bottom of the screen in mobile view (#11896,#11722,#11891). - ⏳ Bug fix: When a WebSocket reconnects, the app will fully rerun to prevent missing fragments (#11890,#11660). - 🪱 Bug fix: To reduceNo such file or directoryerrors, the file watcher has more robust exception handling and clearer logging (#11871,#11841,#11809,#11728). - 💩 Bug fix: Vega-Lite facet charts do not flicker (#11833). - ☠️ Bug fix: When the initial sidebar state is set to\"collapsed\", the sidebar correctly loads in a collapsed state without flickering open (#11861,#11848). - 👽 Bug fix: To prevent apps from being out of sync with their current code at a later time, Streamlit clears the script cache when all file watchers disconnect (#11876,#11739). Thanks,diwu-sf! - 👻 Bug fix: Inline code in tooltips has the same relative size as inline code in other Markdown text (#11877). - 🦀 Bug fix:st.multiselectandst.selectboxdisplay the correct placeholder text whenaccept_new_options=True(#11623,#11609). - 🦋 Bug fix: The column visibility menu can be closed by toggling the toolbar icon (#11857,#11801). - 🦎 Bug fix: Progress bar columns in dataframes have the correct padding between the bar and its label (#11685). - 🐌 Bug fix: The warning indicator in a dataframe cell adapts to theme configuration (#11682). - 🕸️ Bug fix: To fix multiple visual and UX bugs in dataframe,glide-data-gridwas updated (#11677,#8310,#9498,#9471). - 🦗 Bug fix: In the sidebar navigation widget, font spacing and weight were adjust for visual clarity (#11814). - 🦂 Bug fix: Altair", "prev_chunk_id": "chunk_1036", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1038", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.47.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.47.0", "content": "charts correctly resize in width to match their container (#11807,#11802). - 🦟 Bug fix: The running-man icon matches the theme configuration (#11461,#11371). Thanks,TreavVasu! - 🦠 Bug fix: The top header background is correctly opaque when it contains elements (#11787,#11785). - 🪰 Bug fix: Extra top padding is removed when printing (#11798). - 🪳 Bug fix: Markdown inline code displays correctly whenunsafe_allow_html=True(#11817,#11800). Thanks,bajajku! - 🕷️ Bug fix: The WebSocket ping interval does not exceed the timeout interval (#11693,#11670). - 🐞 Bug fix: The sidebar state initialized correctly on Community Cloud and page content slides and resizes correctly in response to the sidebar (#11732,#11702,#11710). - 🐝 Bug fix: The timer inst.spinneruses system time to prevent pausing when the user focuses on another browser tab (#11756,#11720). - 🐜 Bug fix: Empty containers with borders and empty expanders are visible before elements are added to them (#11669). - 🪲 Bug fix:st.audio_inputandst.camera_inputhave consistent appearances (#11699,#11700). - 🐛 Bug fix: To prevent a race condition, the file watcher correctly applies a lock to watched paths (#11692,#11691).", "prev_chunk_id": "chunk_1037", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1039", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.46.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.46.0", "content": "Version 1.46.0 Release date: June 18, 2025 Highlights - 🧭 Introducing top navigation! Usest.navigationwithposition=\"top\"to create a navigation menu across the top of your app. - 🔆 You can detect if the viewer is in light mode or dark mode at runtime withst.context.theme. Notable Changes - 🪺 Streamlit no longer restricts the nesting of columns, expanders, popovers, and chat message containers, but beware of bad design! Always be mindful of different screen sizes and orientations, and don't overuse nested layouts. - ↔️ You can set the width of most Streamlit elements. - ⬆️st.formhas a new parameter to configure itsheight. - 🛠️st.columnssupportsgap=Nonefor no gap between columns. - 🏋️ Font face declarations inconfig.tomlsupport weight and unicode ranges (#11248,#11163,#11247). - 😃 Font face declarations are supported in the window variable (#11628,#11568). - 🔎 Streamlit searches for secrets and configuration options relative to the entrypoint file in addition to the working directory and user root (#10173,#8195). - 🎨 A new configuration option,theme.dataframeBorderColor, lets you set the border color for dataframes and tables separately from other border colors (#11475). - 🌯 A new configuration option,theme.buttonRadius, lets you set the radius of buttons separately from other elements (#11464). - 🖥️ A new configuration option,theme.codeFontSize, lets you set the size of code inst.code,st.json, andst.help(#11508). - 🔒 You can configure a list of allowed origins when CORS protection is enabled (#11377). - 📄st.set_page_configcan be called multiple times in a single script run (#11286,#4483,#2216,#9797,#9038). - 🗺️st.pydeck_chartandst.mapnow use Carto by default to provide map tiles (#11231). - 👀 You can configure Streamlit to watch additional directories for changes with the new configuration option,server.folderWatchList(#9656,#9655). Thanks,akramsystems! Other Changes - 🔘 Exception messages include a copy button to conveniently copy the message to your clipboard (#11250,#11083). Thanks,snakeM! - ⚓ Streamlit apps can be served from port 3000 (#11525,#8149). - 👟 Markdown dependencies were upgraded", "prev_chunk_id": "chunk_1038", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1040", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.46.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.46.0", "content": "for improved performance (#11553,#11550). - ↔️ The sidebar is narrower by default and consistently handles the scrollbar spacing (#11412). - 👋 We gave Streamlit hello a couple small tweaks (#11442). - 🧑‍💻 Base URL window variables are consistently namespaced in__streamlit(#11481). - 🌐 Streamlit apps now serve amanifest.jsonfile (#11462). - 🖌️st.dataframeshows row selection boxes always instead of just on hover (#11411,#11410). - 🦋ListColumnandLinkColumncan inherit coloring frompandasStyler(#11612,#8254). - 💹NumberColumnandProgressColumnsupport a Japanese yen number format (#11588). Thanks,alexmalins! - 🔗st.page_linkcan inherit an icon when passed aStreamlitPage(#10694,#9743). Thanks,abokey1! - 🎫 A button's placement in the sidebar or main body of an app is included in its widget identity (#10881,#10598). Thanks,joaooliveira-11! - 🕷️ Built-in Streamlit fonts now use variable font files (#11646,#11600,#11534). - 🤹 Bug fix: Streamlit Markdown correctly formats task lists and block quotes (#11237). - 🐞 Bug fix: Horizontal scroll bars are sized correctly in Safari (#11625). - 🐝 Bug fix: Unnecessary media caching was reduced to improve efficiency and avoid video player crashes (#11635,#9688). - 🐜 Bug fix:st.textuses thebreak-wordCSS property to wrap long lines without whitespace (#10969,#10824). Thanks,matilde2004! - 🪲 Bug fix: Material icons display correctly inst.markdownwhenunsafe_allow_html=True(#11633,#9945). - 🐛 Bug fix: Multi-index column names preserve brackets (#11617,#10415). - 💅 Bug fix: Various CSS tweaks (#11631,#11632,#11630,#11611,#11577,#9085,#8671,#11576,#11569). - ⛏️ Bug fix:st.dataframeclears filter options when applying sort to prevent incorrect highlights (#11587,#11575). - 📊 Bug fix: Altair charts have the correct width and don't overflow with long titles (#11585,#9984). - 🍞 Bug fix:st.toastmessages appear abovest.dialogcontainers (#11578,#10383). - 🪱 Bug fix: Streamlit apps correctly scroll to anchor links (#11552,#11551). - ✍️ Bug fix:st.contextdoes not lose state in an app being edited (#11506,#11330). - ⬜ Bug fix:st.codepreserves leading white space (#10065,#6302). Thanks,XuehaiPan! - 📅 Bug fix:st.date_inputshows the correct hover effect when using date ranges (#11223,#10929). Thanks,Bernardo1008! - 💩 Bug fix: Dataframes usingpandasStylercorrectly displayEnumvalues (#11049,#10637). Thanks,BigBird404! - ☠️ Bug", "prev_chunk_id": "chunk_1039", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1041", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.46.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.46.0", "content": "fix:st.contextdoes not lose state whenst.switch_pageis called (#11521,#11507). - 👽 Bug fix: File watcher correctly handles custom metaclasses (#10388,#10992). Thanks,HomenShum! - 👻 Bug fix:st.mapuses a private Mapbox token when configured (#11511,#11399). - 🦀 Bug fix:vega-interpreterwas updated to prevent unintentional blank axes (#11514,#5733). - 🦎 Bug fix: Truncated values inNumberColumnare rounded correctly (#11520,#11519). - 🐌 Bug fix: Highlighted in text in Markdown has the correct padding on wrapped lines (#11530). - 🕸️ Bug fix: For a Plotly chart, reset axes works correctly after using fullscreen (#11498,#11327). - 🦗 Bug fix: Altair chart are not cropped on the left on first load (#10939,#9339). Thanks,goncalossmartins! - 📈 Bug fix: Chart columns correctly show negative values (#11048,#10411). Thanks,tiagorb1! - 🦂 Bug fix: Streamlit doesn't crash when editing indices inst.data_editor(#11448,#11434). - 🦟 Bug fix: Color and style is preserved in charts when using.add_rows()(#11414,#11312). - 🌪️ Bug fix: Tornado 6.5.0 is excluded to prevent file uploading errors related to unicode filenames (#11440,#11396,#11436). - 🦠 Bug fix: Selected rows are cleared when a column inst.dataframeis sorted (#11363,#11345). - 📶 Bug fix: Streamlit shows a clearer message when it can't connect to the server and automatically dismisses the message if a connection is successful (#11366). - 🪰 Bug fix: Localized number and date formats correctly interpret locales with commas (#11297,#11291). - 🧹 Bug fix: Streamlit cleans up the forward message cache to prevent WebSocket message errors (#11302,#11299,#11300). - 📜 Bug fix:st.latexscrolls horizontally when its content is wider than the app (#10071,#4304). - 🪳 Bug fix:st.multiselecthas a more stable sort when filtering options (#11309,#11218). - 🕷️ Bug fix:st.multiselectoptions are case sensitive and don't overlap in the drop down menu (#11307,#11217,#11306,#11215). - 🍪 Bug fix: Streamlit logs an error if the cookie returned byst.loginis too large (#11290,#11168). - 🪲 Bug fix: Displaying elements within a fragment's callback logs a clear warning", "prev_chunk_id": "chunk_1040", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1042", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.46.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.46.0", "content": "that it's not supported (#10942,#10475). Thanks,Zane-dev16! - 🐞 Bug fix:st.file_uploaderis case insensitive when validating allowed file extensions (#11261,#11259). - 🐝 Bug fix: Page runs end correctly to prevent invalid widget states (#11258,#11202). - 👤 Bug fix: Error messages correctly refer tost.userinstead ofst.experimental_user(#11198). - 🏷️ Bug fix: The missing label warning for widgets includes a stack trace (#11187,#8908). - 🐛 Bug fix:st.data_editorreturns the correct result when some rows are deleted and others are added (#11183,#11180).", "prev_chunk_id": "chunk_1041", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1043", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.45.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.45.0", "content": "Version 1.45.0 Release date: April 29, 2025 Highlights - 🧑 Announcing the general availability ofst.user, a dict-like object to access information about the current user. Notable Changes - ➕st.multiselectandst.selectboxhave a new parameter to let users add new options. - 🥸st.contexthas new attributes:url,ip_address, andis_embedded. - ⚠️ Textalertsandexceptionshave a newwidthparameter (#11142). - ⌨️ You can set the tab index forst.components.v1.htmlandst.components.v1.iframe(#11065,#7969). - 🌐 When you pass a CSS file's path tost.html, Streamlit will automatically insert<style>tags and avoid creating extra space in the app (#10979,#9388,#10027). - 😃 You can add an icon to the left of the value inst.text_inputandst.number_input. Other Changes - 🗑️ Per the scheduled deprecation,st.experimental_audio_inputhas been removed. Usest.audio_inputinstead. - 💅 Various elements received styling tweaks for consistency and compatibility with advanced theming (#10916,#10930,#10915,#10944,#10990,#11033,#11034). - ⚒️ The element toolbar sizing and spacing was adjusted for improved UX (#11135,#11155). - 🫥 Bug fix: Streamlit does not display a frontend error when displaying an empty dataframe (#11100,#11064). - 🔁 Bug fix:st.contextretains its information when callingst.rerun(#11113,#11111). - 💩 Bug fix:st.camera_inputhas the correct color and hover effect when disabled (#11116). - 🎤 Bug fix:st.audio_inputhas consistent color and hover effects with other widgets (#11118). - ↔️ Bug fix:st.logodisplays correctly when the sidebar is resized (#11063,#11062). - 📂 Bug fix:st.file_uploadercan handle multi-part file extensions in itstypeparameter (#11043,#11041). Thanks,moutayam! - 💈 Bug fix:theme.fontFacescorrectly supports font style (#11098,#11097). - 🧹 Bug fix:streamlit initspecifies file encoding to avoid errors in systems where UTF-8 is not the default (#11090,#11086). Thanks,ashm-dev! - 📜 Bug fix: In the sidebar, space is reserved for the scrollbar to prevent flickering from resizing (#10733,#10310). - 🪱 Bug fix:st.logosupports SVGs defined with aviewBox(#11038,#10904). - ☠️ Bug fix:st.date_inputraises an error in the UI if a user enters a date outside of the specified allowed range (#10764,#8475). - 👽 Bug fix:st.snowandst.balloonsdon't incorrectly rerun during a fragment rerun (#11015,#10961). - 👻 Bug", "prev_chunk_id": "chunk_1042", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1044", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.45.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.45.0", "content": "fix: When updatingconfig.tomlduring development, Streamlit will elegantly handle invalid TOML formatting and reload the configuration file on the next save (#10857,#1256,#8320). - 🦋 Bug fix: Streamlit applies the correct hover effect when colored text is used in button labels (#10996,#8767). - 🦀 Bug fix: Streamlit ignores__init__.pyand dotfiles in the/pagesdirectory when automatically declaring pages in a multipage app (#11009,#11006). - ⏩st.writereceived an optimization tweak for rendering strings (#10985). - 🦎 Bug fix:st.htmlrenders at 100% width for correct sizing (#10976,#10964). - 🐌 Bug fix: Page links become disabled if a client disconnects from the Streamlit server (#10946,#9198). - 🕸️ Bug fix: Streamlit supports newer emojis in page icons (#10912,#11154). - 🦗 Bug fix:st.exceptiononly shows links to Google and ChatGPT when the app is being accessed throughlocalhost(#10971,#10924). - 🦂 Bug fix:st.chat_inputwill expand to show multi-line placeholder text in most browsers. Firefox does not support this fix (#10931,#10611). - 🦟 Bug fix: Streamlit elegantly catches aTypeErrorwhen concurrent changes to rows and columns cause a failure in serialization (#10954,#10937). - 🦠 Bug fix: Streamlit cleanly handles non-ASCII characters in anchor links, which may change some anchors in existing apps (#10929,#8114). - 🪰 Bug fix: To prevent a race condition, session information is not immediately cleared unless a new session message is received (#9886,#9767). - 🪳 Bug fix:streamlit config showcorrectly displaysclient.showErrorDetailsas a string instead of a list (#10921,#10913). - 🕷️ Bug fix:st.selectboxdoes not lose its value if a partial edit is abandoned (#10891). - 🐞 Bug fix:st.badgedoesn't falsely showrainbowas a color option (#10896). - 🐝 Bug fix: To avoid a file lock conflict the occurs with some IDEs, Streamlit's file watcher utilities retries reading files when blocked (#10868,#4486). Thanks,Morridin! - 🐜 Bug fix:st.selectboxandst.multiselecthave consistent color and spacing for placeholder text (#10865). - 🪲 Bug fix: Context managers correctly handle form elements (#10752,#8761). Thanks,SrGesus! - 🐛 Bug", "prev_chunk_id": "chunk_1043", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1045", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.45.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.45.0", "content": "fix:st.link_buttonandst.tabsremain active when a client disconnects from a Streamlit server (#10861).", "prev_chunk_id": "chunk_1044", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1046", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.44.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.44.0", "content": "Version 1.44.0 Release date: March 25, 2025 Highlights - 💈 Introducingadvanced theming options! Use an assortment of configuration options to customize the appearance of your app. Change the fonts, colors, and roundness of your app without CSS. - 👮 Introducingst.badgeto insert a colored badge element. You can also include badges in Markdown using a new directive. - 🏗️ Usestreamlit initin your terminal to create all the local files you need for a new Streamlit app. Notable Changes - 🤖st.exceptionincludes links to open Google or ChatGPT with the contents of the exception. This includes uncaught exceptions displayed in the app. - 🗺️ You can access the user's locale throughst.context(#10563). Other Changes - 📄 When using apages/directory to automatically generate a multipage app, no pages (including the entrypoint file) can have the same inferred URL pathname (#10276). - 🏎️ To improve performance, Streamlit uses the React 18createRootAPI for its frontend (#10453). - 📝 To improve compatibility with AI tools, script compilation errors are logged whenlogger.level=\"error\"and not just whenlogger.level=\"debug\"(#10826). - 🪵 Streamlit automatically enables more detailed logging ifrichis installed (#10650). - 🔢st.sliderandst.number_inputraise an error when assigned a value in excess of a declared minimum or maximum (#9964,#9342). - 🛠️st.tablesupport pandasStyler.set_tooltips()(#10561,#10553). - ℹ️ Material symbols have been updated to the latest icon set (#10813,#10717). - 🦋 Visual tweaks to headers (#10599). - 🦀 Bug fix:st.htmldisplays correctly when used insidest.tabs(#10825,#10815). - 🦎 Bug fix: For backwards compatibility,theme.font=\"sans serfi\"is internally converted to the newtheme.font=\"sans-serif\"(#10789,#10786). - 🐌 Bug fix: When usingst.secrets, if Streamlit can't find thesecrets.tomlfile, it will raise aFileNotFoundError(#10508,#8559). - 🕸️ Bug fix:st.secretsraises a clearTypeErrorif you try to assign a value to an attribute (#10698,#10107). - 🦗 Bug fix: In single-page apps,st.page_linkdoes not highlight external links as if they are the current page (#10690,#10689). - 🦂 Bug fix:st.poppoverdisplays at the correct width when using thehelpparameter (#10709,#10693).", "prev_chunk_id": "chunk_1045", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1047", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.44.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.44.0", "content": "- 🦟 Bug fix: All components (and custom components) that read their width from the DOM initially load with a width of -1 px to prevent flickering (#10712,#10672,#10663,#10644). - 🦠 Bug fix: Whenst.number_inputis configured to use integers, the default minimum and maximum values will prevent integer overflow (#10655,#6740). - 🪰 Bug fix:st.navigationuses immutable types to prevent mypy errors (#10670). - 🪳 Bug fix: Custom components correctly inherit font from theme configuration (#10661,#10660). - 🕷️ Bug fix: Dataframes correctly support Dask data objects (#10662). - 🐞 Bug fix: Button widths are correct when using thehelpparameter (#10658,#10648,#10656). - 🐝 Bug fix: Scrolling is disabled when hovering overst.number_inputto prevent accidental value changes (#10642,#8867). - 🐜 Bug fix:st.chat_inputgives a clear error in the UI when the file size limit is exceeded (#10530). - 🪲 Bug fix: The favicon and Markdown emojis use the same SVG emoji source for consistency (#10539,#6822). - 🐛 Bug fix: The dataframe search bar is more responsive to width (#10534,#10532).", "prev_chunk_id": "chunk_1046", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1048", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.43.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.43.0", "content": "Version 1.43.0 Release date: March 4, 2025 Highlights - 📁 Announcing the option to accept files withst.chat_input! - 📒 Introducing a new column type for column configuration! UseJsonColumnto show JSON-compatible objects. Notable Changes - 🏃 You can preventst.download_buttonfrom triggering a rerun by settingon_click=\"ignore\"(#10296,#4382). - 🕑 You can access a user's timezone and timezone offset throughst.context(#10336). - ↕️ You can configure the row height inst.dataframeandst.data_editorwith a new parameter (#9549,#7266,#8632,#5386). - 💅st.dataframeandst.data_editoruseuse_container_width=Trueby default (#10434). - 🤏Markdownhas a small text directive (#10487,#10486). - 🧵 You can pass strings, paths, and callables tost.navigationin place ofStreamlitPageobjects for convenience (#10358,#10069). Thanks,ashm-dev! - 📈 Streamlit has a new custom component,streamlit-bokeh, to support the latest version of Bokeh (#10374,#5858). - 🔣NumberColumn,ProgressColumn,DatetimeColumn,DateColumn, andTimeColumnhave preconfigured format options for ease of use (#10179,#8788,#7702). - 🛎️Static file servingsupports files with JSON, XML, and common font file extensions. (#10417,#10335,#10337,#10302). Other Changes - 🥷 Users can hide dataframe columns (#10264,#6870). - 📅 Users can change the format of numbers, dates, and times in dataframes (#10420). - ↔️ Users can auto-size column widths (#10476). - 🐻‍❄️ Streamlit supports Polars dataframe and series hashing (#10408,#10347). - ☠️richis no longer a required dependency for Streamlit (#10320). - 🦋st.file_uploaderhas a better display format in narrow containers (#10272). - 🦎 Bug fix: Tabs are prevented from having a width of zero to prevent flickering (#10533). - 🐌 Bug fix: Column order is correctly displayed when set in column configuration (#10445,#10442). - 🕸️ Bug fix: We updated dataframe null handling to prevent deprecation warnings (#10484). - 🦗 Bug fix: Elapsed time doesn't overflow forst.audio_input(#10410,#10373). Thanks,ashm-dev! - 🦂 Bug fix:st.altair_chartdoes not show an incorrect \"true\" tooltip when the user makes a selection (#10456,#10448). - 🦟 Bug fix: Streamlit does not raise a RuntimeError when anasyncioevent loop is not already running (#10455,#10452). - 🦠 Bug fix: The key for an internal MIME", "prev_chunk_id": "chunk_1047", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1049", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.43.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.43.0", "content": "type is set correctly to avoid a browser warning (#10404). - 🪰 Bug fix:st.data_editorautomatically scrolls to the bottom when a user adds a row (#10405,#10351). - 🪳 Bug fix: Tooltips are suppressed on user-added rows inst.data_editorto prevent erroneous warnings (#10398). - 🕷️ Bug fix:st.logodisplays consistently when used with fragments and dialogs (#10377,#10350,#10382). - 🐞 Bug fix:st.graphviz_charthas rounded corners for consistent style (#10224). - 🐝 Bug fix: Streamlit raises a clear exception when an underscore is used inproviderforst.login(#10360,#10356). - 🐜 Bug fix: The dataframe column menu displays correctly inside dialogs (#10359,#10357). - 🪲 Bug fix: Exception handling was adjusted for improved compatibility with Cython (#10354,#10353). Thanks,tutu-sol! - 🐛 Bug fix:st.pillsandst.segmented_controlhave consistent font sizes across browsers (#10349).", "prev_chunk_id": "chunk_1048", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1050", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.42.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.42.0", "content": "Version 1.42.0 Release date: February 4, 2025 Highlights - 👩‍💻 Introducingst.login()andst.logout()to authenticate users with any OpenID Connect provider. Notable Changes - ❣️st.tablesupports Markdown (#8785,#10088). - ⏲️st.spinnercan show elapsed time withshow_time=True(#6805,#10072). - 💈st.imagesupports Markdown in thecaptionparameter (#6808,#10075). - ↕️st.codehas aheightparameter (#7418,#10080). - ↔️ Most charts default to usinguse_container_width=True(#10064). - ❄️SnowflakeConnectionwas updated to match the current Snowflake API, which changes its handling of keyword arguments in some cases (#10122). - 🐁 Users can drag and drop dataframe columns to rearrange them (#8796,#10099). Other Changes - 📌 Dataframes have column menus for users to sort and pin columns (#10206). - 🚦 Dataframes support categorical indices (#9647,#10195). - 🛸 Dataframes show a hover highlight on rows (#8096,#10104). - ⚠️ When dataframes have cell values that are inconsistent with their configured type, Streamlit shows a tooltip describing the error (#8253,#9899). - ➰ If there is an existing asyncio event loop when a Streamlit app starts, the app will reuse it instead of creating a new one (#10164). Thanks,DeltaGa! - 🖼️ Streamlit recognizespyspark.sql.connect.dataframe.DataFrameobjects as dataframes (#9953,#9954). Thanks,OSalama! - 😃 We've updated emoji validation for new emojis (#10149). - 🔣 Material Symbols have been updated with the latest icons (#10247). - 💅 Visual tweaks and improvements (#8705,#9823,#10047,#10048,#10083,#10087,#10225). - ⭕st.imagedisplays rounded corners for consistent design (#9999). - 🎩 Bug fix: Top margin is applied correctly inst.columns(#10265,#10268). - 💩 Bug fix:react-syntax-highlighteris aliased to prevent rendering errors inst.code(#10231,#10244). - 🧹 Bug fix: We improved error messages forst.query_params(#10111,#10237). - 🪱 Bug fix: Linting forst.altair_chartrecognizes all Altair chart types (#10202). - ↗️ Bug fix:st.dataframesupports raw Arrow data (#5606,#10191). - 🐍 Bug fix:st.navigationandst.page_linkwork when running in pure Python tests (#10163). - ☠️ Bug fix: Retries were added to prevent a possible race condition when files are removed while Streamlit is running (#10148). - 👽 Bug fix: When printing an app,st.logowill only print once", "prev_chunk_id": "chunk_1049", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1051", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Version 1.42.0", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Version 1.42.0", "content": "(#10165,#10171). - 🌍 Bug fix: Material icons are marked to prevent translation (#10168,#10174). - 👻 Bug fix:st.vega_lite_chartcorrectly caches and updates its data (#6689,#10125). - 🦀 Bug fix: When a fragment ID is not found, Streamlit logs a warning but doesn't raise an error (#9921,#10130). - 🦋 Bug fix: The label onst.expandercorrectly fades when stale (#10085). - 🦎 Bug fix:st.date_inputprovides better type hinting for its return value (#9477,#9620). Thanks,pranaybattu! - 🐌 Bug fix: In dataframes, small float values display their first significant figure instead of displaying as 0 (#10060). - 🕸️ Bug fix: Whenrichis installed, errors are only logged once. (#10097). - 🦗 Bug fix:st.textpreserves whitespace (#10055,#10062). - 🦂 Bug fix: Dataframewidthis not ignored whenheightis changed (#9762,#10036). - 🦟 Bug fix: Multi index columns correctly handle empty labels (#9749,#10035). - 🦠 Bug fix: Pinned columns respectcolumn_orderin when configured inst.dataframe(#9997,#10034). - 🪰 Bug fix: Tooltips don't overflow to the left or right (#9288,#9452,#9983). - 🪳 Bug fix: Disabled feedback widgets correctly show their value (#10030). - 🕷️ Bug fix: Widgets correctly submit values if a user edits the value and immediately clicks a button (#10007,#10018). - 🐞 Bug fix: Some MIME types have been hardcoded to protect against browser misconfiguration (#10004,#10010). - 🐝 Bug fix: Files that unnecessarily inflated Streamlit's installation size were removed (#10008,#10011). - 🐜 Bug fix:st.date_inputgives the correct type hint for thevalueparameter (#10005,#10006). - 🪲 Bug fix:st.writepasses tost.htmlwhen._repr_html()is present for an object (#9910). - 🐛 Bug fix:st.htmlpreservestarget=_blankif set in an HTML string (#9972,#9994).", "prev_chunk_id": "chunk_1050", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1052", "url": "https://docs.streamlit.io/develop/quick-reference/release-notes/2025", "title": "Still have questions?", "page_title": "2025 release notes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1051", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1053", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming", "title": "Theming overview", "page_title": "Theming - Streamlit Docs", "breadcrumbs": "Theming overview", "content": "Theming overview In this guide, we provide an overview of theming and visual customization of Streamlit apps. Streamlit themes are defined using configuration options, which are most commonly defined in a .streamlit/config.toml file. For more information about setting configuration options, see Working with configuration options. For a complete list of configuration options and definitions, see the API reference for config.toml. The following options can be set in the [theme] table of config.toml and can't be set separately in the [theme.sidebar] table: - Base color scheme: Set your custom theme to inherit from Streamlit's light or dark theme. - Base font: Set the base font weight and size. (This can be configured separately for heading and code font.) - Chart color: Set series colors for Plotly, Altair, and Vega-Lite charts. - Sidebar border: Set the visibility of the sidebar border. The following options can be configured separately for the main body of your app and the sidebar: - Font family: Set the font family for body text, headings, and code. - Font style: Set the weight and size of heading and code font, and set visibility of link underlines. - Text color: Set the color of body text and links. - Primary color: Set the color of interactive elements and highlights. - Background color: Set the color of app, widget, code block, and dataframe header backgrounds. - Border radius: Set the roundness of elements and widgets. - Border color: Set the color and visibility of element, widget, sidebar, and dataframe borders.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1054", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming", "title": "Example themes", "page_title": "Theming - Streamlit Docs", "breadcrumbs": "Example themes", "content": "Example themes The following light theme is inspired by Anthropic. The following dark theme is inspired by Spotify.", "prev_chunk_id": "chunk_1053", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1055", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming", "title": "Working with theme configuration during development", "page_title": "Theming - Streamlit Docs", "breadcrumbs": "Working with theme configuration during development", "content": "Working with theme configuration during development Most theme configuration options can be updated while an app is running. This makes it easy to iterate on your custom theme. If you change your app's primary color, save your config.toml file, and rerun your app, you will immediately see the new color. However, some configuration options (like [[theme.fontFace]]) require you to restart the Streamlit server to reflect the updates. If in doubt, when updating your app's configuration, stop the Streamlit server in your terminal and restart your app with the streamlit run command.", "prev_chunk_id": "chunk_1054", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1056", "url": "https://docs.streamlit.io/develop/concepts/configuration/theming", "title": "Still have questions?", "page_title": "Theming - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1055", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1057", "url": "https://docs.streamlit.io/develop/concepts/configuration/serving-static-files", "title": "Static file serving", "page_title": "Static file serving - Streamlit Docs", "breadcrumbs": "Static file serving", "content": "Static file serving Streamlit apps can host and serve small, static media files to support media embedding use cases that won't work with the normal media elements. To enable this feature, set enableStaticServing = true under [server] in your config file, or environment variable STREAMLIT_SERVER_ENABLE_STATIC_SERVING=true. Media stored in the folder ./static/ relative to the running app file is served at path app/static/[filename], such as http://localhost:8501/app/static/cat.png.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1058", "url": "https://docs.streamlit.io/develop/concepts/configuration/serving-static-files", "title": "Details on usage", "page_title": "Static file serving - Streamlit Docs", "breadcrumbs": "Details on usage", "content": "Details on usage - Files with the following extensions will be served normally:Common image types:.jpg,.jpeg,.png,.gifCommon font types:.otf,.ttf,.woff,.woff2Other types:.pdf,.xml,.jsonAny other file will be sent with headerContent-Type:text/plainwhich will cause browsers to render in plain text. This is included for security - other file types that need to render should be hosted outside the app. - Streamlit also setsX-Content-Type-Options:nosnifffor all files rendered from the static directory. - For apps running on Streamlit Community Cloud:Files available in the Github repo will always be served. Any files generated while the app is running, such as based on user interaction (file upload, etc), are not guaranteed to persist across user sessions.Apps which store and serve many files, or large files, may run into resource limits and be shut down.", "prev_chunk_id": "chunk_1057", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1059", "url": "https://docs.streamlit.io/develop/concepts/configuration/serving-static-files", "title": "Example usage", "page_title": "Static file serving - Streamlit Docs", "breadcrumbs": "Example usage", "content": "Example usage - Put an imagecat.pngin the folder./static/ - AddenableStaticServing = trueunder[server]in your.streamlit/config.toml - Any media in the./static/folder is served at the relative URL likeapp/static/cat.png Additional resources: - https://docs.streamlit.io/develop/concepts/configuration - https://static-file-serving.streamlit.app/", "prev_chunk_id": "chunk_1058", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1060", "url": "https://docs.streamlit.io/develop/concepts/configuration/serving-static-files", "title": "Still have questions?", "page_title": "Static file serving - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1059", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1061", "url": "https://docs.streamlit.io/develop/concepts/configuration/https-support", "title": "HTTPS support", "page_title": "HTTPS support - Streamlit Docs", "breadcrumbs": "HTTPS support", "content": "HTTPS support Many apps need to be accessed with SSL / TLS protocol or https://. We recommend performing SSL termination in a reverse proxy or load balancer for self-hosted and production use cases, not directly in the app. Streamlit Community Cloud uses this approach, and every major cloud and app hosting platform should allow you to configure it and provide extensive documentation. You can find some of these platforms in our Deployment tutorials. To terminate SSL in your Streamlit app, you must configure server.sslCertFile and server.sslKeyFile. Learn how to set config options in Configuration.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1062", "url": "https://docs.streamlit.io/develop/concepts/configuration/https-support", "title": "Details on usage", "page_title": "HTTPS support - Streamlit Docs", "breadcrumbs": "Details on usage", "content": "Details on usage - The configuration value should be a local file path to a cert file and key file. These must be available at the time the app starts. - Bothserver.sslCertFileandserver.sslKeyFilemust be specified. If only one is specified, your app will exit with an error. - This feature will not work in Community Cloud. Community Cloud already serves your app with TLS.", "prev_chunk_id": "chunk_1061", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1063", "url": "https://docs.streamlit.io/develop/concepts/configuration/https-support", "title": "Still have questions?", "page_title": "HTTPS support - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1062", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1064", "url": "https://docs.streamlit.io/develop/concepts/configuration/options", "title": "Working with configuration options", "page_title": "Working with configuration options - Streamlit Docs", "breadcrumbs": "Working with configuration options", "content": "Working with configuration options Streamlit provides four different ways to set configuration options. This list is in reverse order of precedence, i.e. command line flags take precedence over environment variables when the same configuration option is provided multiple times. - In aglobal config fileat~/.streamlit/config.tomlfor macOS/Linux or%userprofile%/.streamlit/config.tomlfor Windows:[server] port = 80 - In aper-project config fileat$CWD/.streamlit/config.toml, where$CWDis the folder you're running Streamlit from. - ThroughSTREAMLIT_*environment variables, such as:export STREAMLIT_SERVER_PORT=80 export STREAMLIT_SERVER_COOKIE_SECRET=dontforgottochangeme - Asflags on the command linewhen runningstreamlit run:streamlit run your_script.py --server.port 80 All available configuration options are documented in config.toml. These options may be declared in a TOML file, as environment variables, or as command line options. When using environment variables to override config.toml, convert the variable (including its section header) to upper snake case and add a STREAMLIT_ prefix. For example, STREAMLIT_CLIENT_SHOW_ERROR_DETAILS is equivalent to the following in TOML: When using command line options to override config.toml and environment variables, use the same case as you would in the TOML file and include the section header as a period-separated prefix. For example, the command line option --server.enableStaticServing true is equivalent to the following: As mentioned during the installation process, Streamlit collects usage statistics. You can find out more by reading our Privacy Notice, but the high-level summary is that although we collect telemetry data we cannot see and do not store information contained in Streamlit apps. If you'd like to opt out of usage statistics, add the following to your config file: You can change the base colors of your app using the [theme] section of the configuration system. To learn more, see Theming. As described in Command-line options, you can view all available configuration options using:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1065", "url": "https://docs.streamlit.io/develop/concepts/configuration/options", "title": "Available options", "page_title": "Working with configuration options - Streamlit Docs", "breadcrumbs": "Available options", "content": "Available options All available configuration options are documented in config.toml. These options may be declared in a TOML file, as environment variables, or as command line options. When using environment variables to override config.toml, convert the variable (including its section header) to upper snake case and add a STREAMLIT_ prefix. For example, STREAMLIT_CLIENT_SHOW_ERROR_DETAILS is equivalent to the following in TOML: When using command line options to override config.toml and environment variables, use the same case as you would in the TOML file and include the section header as a period-separated prefix. For example, the command line option --server.enableStaticServing true is equivalent to the following:", "prev_chunk_id": "chunk_1064", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1066", "url": "https://docs.streamlit.io/develop/concepts/configuration/options", "title": "Telemetry", "page_title": "Working with configuration options - Streamlit Docs", "breadcrumbs": "Telemetry", "content": "Telemetry As mentioned during the installation process, Streamlit collects usage statistics. You can find out more by reading our Privacy Notice, but the high-level summary is that although we collect telemetry data we cannot see and do not store information contained in Streamlit apps. If you'd like to opt out of usage statistics, add the following to your config file:", "prev_chunk_id": "chunk_1065", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1067", "url": "https://docs.streamlit.io/develop/concepts/configuration/options", "title": "Theming", "page_title": "Working with configuration options - Streamlit Docs", "breadcrumbs": "Theming", "content": "Theming You can change the base colors of your app using the [theme] section of the configuration system. To learn more, see Theming.", "prev_chunk_id": "chunk_1066", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1068", "url": "https://docs.streamlit.io/develop/concepts/configuration/options", "title": "View all configuration options", "page_title": "Working with configuration options - Streamlit Docs", "breadcrumbs": "View all configuration options", "content": "View all configuration options As described in Command-line options, you can view all available configuration options using:", "prev_chunk_id": "chunk_1067", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1069", "url": "https://docs.streamlit.io/develop/concepts/configuration/options", "title": "Still have questions?", "page_title": "Working with configuration options - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1068", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1070", "url": "https://docs.streamlit.io/develop/concepts/app-testing/examples", "title": "Testing a login page", "page_title": "App testing example - Streamlit Docs", "breadcrumbs": "Testing a login page", "content": "Testing a login page Let's consider a login page. In this example, secrets.toml is not present. We'll manually declare dummy secrets directly in the tests. To avoid timing attacks, the login script uses hmac to compare a user's password to the secret value as a security best practice.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1071", "url": "https://docs.streamlit.io/develop/concepts/app-testing/examples", "title": "Login page behavior", "page_title": "App testing example - Streamlit Docs", "breadcrumbs": "Login page behavior", "content": "Login page behavior Before diving into the app's code, let's think about what this page is supposed to do. Whether you use test-driven development or you write unit tests after your code, it's a good idea to think about the functionality that needs to be tested. The login page should behave as follows: - Before a user interacts with the app:Their status is \"unverified.\"A password prompt is displayed. - If a user types an incorrect password:Their status is \"incorrect.\"An error message is displayed.The password attempt is cleared from the input. - If a user types a correct password:Their status is \"verified.\"A confirmation message is displayed.A logout button is displayed (without a login prompt). - If a logged-in user clicks theLog outbutton:Their status is \"unverified.\"A password prompt is displayed.", "prev_chunk_id": "chunk_1070", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1072", "url": "https://docs.streamlit.io/develop/concepts/app-testing/examples", "title": "Login page Python file", "page_title": "App testing example - Streamlit Docs", "breadcrumbs": "Login page Python file", "content": "Login page Python file The user's status mentioned in the page's specifications are encoded in st.session_state.status. This value is initialized at the beginning of the script as \"unverified\" and is updated through a callback when the password prompt receives a new entry.", "prev_chunk_id": "chunk_1071", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1073", "url": "https://docs.streamlit.io/develop/concepts/app-testing/examples", "title": "Login page test file", "page_title": "App testing example - Streamlit Docs", "breadcrumbs": "Login page test file", "content": "Login page test file These tests closely follow the app's specifications above. In each test, a dummy secret is set before running the app and proceeding with further simulations and checks. See how Session State was modified in the last test? Instead of fully simulating a user logging in, the test jumps straight to a logged-in state by setting at.session_state[\"status\"] = \"verified\". After running the app, the test proceeds to simulate the user logging out.", "prev_chunk_id": "chunk_1072", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1074", "url": "https://docs.streamlit.io/develop/concepts/app-testing/examples", "title": "Automating your tests", "page_title": "App testing example - Streamlit Docs", "breadcrumbs": "Automating your tests", "content": "Automating your tests If myproject/ was pushed to GitHub as a repository, you could add GitHub Actions test automation with Streamlit App Action. This is as simple as adding a workflow file at myproject/.github/workflows/:", "prev_chunk_id": "chunk_1073", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1075", "url": "https://docs.streamlit.io/develop/concepts/app-testing/examples", "title": "Still have questions?", "page_title": "App testing example - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1074", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1076", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Automate your tests with CI", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Automate your tests with CI", "content": "Automate your tests with CI One of the key benefits of app testing is that tests can be automated using Continuous Integration (CI). By running tests automatically during development, you can validate that changes to your app don't break existing functionality. You can verify app code as you commit, catch bugs early, and prevent accidental breaks before deployment. There are many popular CI tools, including GitHub Actions, Jenkins, GitLab CI, Azure DevOps, and Circle CI. Streamlit app testing will integrate easily with any of them similar to any other Python tests.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1077", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "GitHub Actions", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "GitHub Actions", "content": "GitHub Actions Since many Streamlit apps (and all Community Cloud apps) are built in GitHub, this page uses examples from GitHub Actions. For more information about GitHub Actions, see: - Quickstart for GitHub Actions - GitHub Actions: About continuous integration - GitHub Actions: Build & test Python", "prev_chunk_id": "chunk_1076", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1078", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Streamlit App Action", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Streamlit App Action", "content": "Streamlit App Action Streamlit App Action provides an easy way to add automated testing to your app repository in GitHub. It also includes basic smoke testing for each page of your app without you writing any test code. To install Streamlit App Action, add a workflow .yml file to your repository's .github/workflows/ folder. For example: Let's take a look in more detail at what this action workflow is doing.", "prev_chunk_id": "chunk_1077", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1079", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Triggering the workflow", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Triggering the workflow", "content": "Triggering the workflow This workflow will be triggered and execute tests on pull requests targeting the main branch, as well as any new commits pushed to the main branch. Note that it will also execute the tests on subsequent commits to any open pull requests. See GitHub Actions: Triggering a workflow for more information and examples.", "prev_chunk_id": "chunk_1078", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1080", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Setting up the test environment", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Setting up the test environment", "content": "Setting up the test environment The workflow has a streamlit job that executes a series of steps. The job runs on a Docker container with the ubuntu-latest image. - actions/checkout@v4checks out the current repository code from GitHub and copies the code to the job environment. - actions/setup-python@v5installs Python version 3.11.", "prev_chunk_id": "chunk_1079", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1081", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Running the app tests", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Running the app tests", "content": "Running the app tests Streamlit App Action does the following: - Installpytestand install any dependencies specified inrequirements.txt. - Run the built-in app smoke tests. - Run any other Python tests found in the repository. The built-in smoke tests have the following behavior: - Run the app specified atapp-pathas an AppTest. - Validate that it completes successfully and does not result in an uncaught exception. - Do the same for any additionalpages/of the app relative toapp-path. If you want to run Streamlit App Action without the smoke tests, you can set skip-smoke: true.", "prev_chunk_id": "chunk_1080", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1082", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Linting your app code", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Linting your app code", "content": "Linting your app code Linting is the automated checking of source code for programmatic and stylistic errors. This is done by using a lint tool (otherwise known as a linter). Linting is important to reduce errors and improve the overall quality of your code, especially for repositories with multiple developers or public repositories. You can add automated linting with Ruff by passing ruff: true to Streamlit App Action.", "prev_chunk_id": "chunk_1081", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1083", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Viewing results", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Viewing results", "content": "Viewing results If tests fail, the CI workflow will fail and you will see the results in GitHub. Console logs are available by clicking into the workflow run as described here. For higher-level test results, you can use pytest-results-action. You can combine this with Streamlit App Action as follows:", "prev_chunk_id": "chunk_1082", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1084", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Writing your own actions", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Writing your own actions", "content": "Writing your own actions The above is just provided as an example. Streamlit App Action is a quick way to get started. Once you learn the basics of your CI tool of choice, it's easy to build and customize your own automated workflows. This is a great way to improve your overall productivity as a developer and the quality of your apps.", "prev_chunk_id": "chunk_1083", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1085", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Working example", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Working example", "content": "Working example As a final working example example, take a look at our streamlit/llm-examples Actions, defined in this workflow file.", "prev_chunk_id": "chunk_1084", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1086", "url": "https://docs.streamlit.io/develop/concepts/app-testing/automate-tests", "title": "Still have questions?", "page_title": "Automate your tests with CI - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1085", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1087", "url": "https://docs.streamlit.io/develop/concepts/app-testing/beyond-the-basics", "title": "Beyond the basics of app testing", "page_title": "Beyond the basics of app testing - Streamlit Docs", "breadcrumbs": "Beyond the basics of app testing", "content": "Beyond the basics of app testing Now that you're comfortable with executing a basic test for a Streamlit app let's cover the mutable attributes of AppTest: - AppTest.secrets - AppTest.session_state - AppTest.query_params You can read and update values using dict-like syntax for all three attributes. For .secrets and .query_params, you can use key notation but not attribute notation. For example, the .secrets attribute for AppTest accepts at.secrets[\"my_key\"] but not at.secrets.my_key. This differs from how you can use the associated command in the main library. On the other hand, .session_state allows both key notation and attribute notation. For these attributes, the typical pattern is to declare any values before executing the app's first run. Values can be inspected at any time in a test. There are a few extra considerations for secrets and Session State, which we'll cover now.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1088", "url": "https://docs.streamlit.io/develop/concepts/app-testing/beyond-the-basics", "title": "Using secrets with app testing", "page_title": "Beyond the basics of app testing - Streamlit Docs", "breadcrumbs": "Using secrets with app testing", "content": "Using secrets with app testing Be careful not to include secrets directly in your tests. Consider this simple project with pytest executed in the project's root directory: In the above scenario, your simulated app will have access to your secrets.toml file. However, since you don't want to commit your secrets to your repository, you may need to write tests where you securely pull your secrets into memory or use dummy secrets.", "prev_chunk_id": "chunk_1087", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1089", "url": "https://docs.streamlit.io/develop/concepts/app-testing/beyond-the-basics", "title": "Example: declaring secrets in a test", "page_title": "Beyond the basics of app testing - Streamlit Docs", "breadcrumbs": "Example: declaring secrets in a test", "content": "Example: declaring secrets in a test Within a test, declare each secret after initializing your AppTest instance but before the first run. (A missing secret may result in an app that doesn't run!) For example, consider the following secrets file and corresponding test initialization to assign the same secrets manually: Secrets file: Testing file with equivalent secrets: Generally, you want to avoid typing your secrets directly into your test. If you don't need your real secrets for your test, you can declare dummy secrets as in the example above. If your app uses secrets to connect to an external service like a database or API, consider mocking that service in your app tests. If you need to use the real secrets and actually connect, you should use an API to pass them securely and anonymously. If you are automating your tests with GitHub actions, check out their Security guide.", "prev_chunk_id": "chunk_1088", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1090", "url": "https://docs.streamlit.io/develop/concepts/app-testing/beyond-the-basics", "title": "Working with Session State in app testing", "page_title": "Beyond the basics of app testing - Streamlit Docs", "breadcrumbs": "Working with Session State in app testing", "content": "Working with Session State in app testing The .session_state attribute for AppTest lets you read and update Session State values using key notation (at.session_state[\"my_key\"]) and attribute notation (at.session_state.my_key). By manually declaring values in Session State, you can directly jump to a specific state instead of simulating many steps to get there. Additionally, the testing framework does not provide native support for multipage apps. An instance of AppTest can only test one page. You must manually declare Session State values to simulate a user carrying data from another page.", "prev_chunk_id": "chunk_1089", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1091", "url": "https://docs.streamlit.io/develop/concepts/app-testing/beyond-the-basics", "title": "Example: testing a multipage app", "page_title": "Beyond the basics of app testing - Streamlit Docs", "breadcrumbs": "Example: testing a multipage app", "content": "Example: testing a multipage app Consider a simple multipage app where the first page can modify a value in Session State. To test the second page, set Session State manually and run the simulated app within the test: Project structure: First app page: Second app page: Testing file: By setting the value at.session_state[\"magic_word\"] = \"Balloons\" within the test, you can simulate a user navigating to second.py after entering and saving \"Balloons\" on first.py.", "prev_chunk_id": "chunk_1090", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1092", "url": "https://docs.streamlit.io/develop/concepts/app-testing/beyond-the-basics", "title": "Still have questions?", "page_title": "Beyond the basics of app testing - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1091", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1093", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/widget-updating-session-state", "title": "Overview", "page_title": "Widget updating for every second input when using session state - Streamlit Docs", "breadcrumbs": "Overview", "content": "Overview You are using session state to store page interactions in your app. When users interact with a widget in your app (e.g., click a button), you expect your app to update its widget states and reflect the new values. However, you notice that it doesn't. Instead, users have to interact with the widget twice (e.g., click a button twice) for the app to show the correct values. What do you do now? 🤔 Let's walk through the solution in the section below.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1094", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/widget-updating-session-state", "title": "Solution", "page_title": "Widget updating for every second input when using session state - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution When using session state to update widgets or values in your script, you need to use the unique key you assigned to the widget, not the variable that you assigned your widget to. In the example code block below, the unique key assigned to the slider widget is slider, and the variable the widget is assigned to is slide_val. Let's see this in an example. Say you want a user to click a button that resets a slider. To have the slider's value update on the button click, you need to use a callback function with the on_click parameter of st.button:", "prev_chunk_id": "chunk_1093", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1095", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/widget-updating-session-state", "title": "Relevant resources", "page_title": "Widget updating for every second input when using session state - Streamlit Docs", "breadcrumbs": "Relevant resources", "content": "Relevant resources - Caching Sqlite DB connection resulting in glitchy rendering of the page - Select all checkbox that is linked to selectbox of options", "prev_chunk_id": "chunk_1094", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1096", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/widget-updating-session-state", "title": "Still have questions?", "page_title": "Widget updating for every second input when using session state - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1095", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1097", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/insert-elements-out-of-order", "title": "How to insert elements out of order?", "page_title": "How to insert elements out of order? - Streamlit Docs", "breadcrumbs": "How to insert elements out of order?", "content": "How to insert elements out of order? You can use the st.empty method as a placeholder, to \"save\" a slot in your app that you can use later.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1098", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/insert-elements-out-of-order", "title": "Still have questions?", "page_title": "How to insert elements out of order? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1097", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1099", "url": "https://docs.streamlit.io/knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403", "title": "Problem", "page_title": "Login attempt to Streamlit Community Cloud fails with error 403 - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem Streamlit Community Cloud has monitoring jobs to detect malicious users using the platform for crypto mining. These jobs sometimes result in false positives and a normal user starts getting error 403 against a login attempt.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1100", "url": "https://docs.streamlit.io/knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403", "title": "Solution", "page_title": "Login attempt to Streamlit Community Cloud fails with error 403 - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution Please contact Support by providing your GitHub username for help referring to this article.", "prev_chunk_id": "chunk_1099", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1101", "url": "https://docs.streamlit.io/knowledge-base/deploy/login-attempt-to-streamlit-community-cloud-fails-with-error-403", "title": "Still have questions?", "page_title": "Login attempt to Streamlit Community Cloud fails with error 403 - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1100", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1102", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.linechartcolumn", "title": "Still have questions?", "page_title": "st.column_config.LineChartColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1103", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.timecolumn", "title": "Still have questions?", "page_title": "st.column_config.TimeColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1104", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.datecolumn", "title": "Still have questions?", "page_title": "st.column_config.DateColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1105", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.datetimecolumn", "title": "Still have questions?", "page_title": "st.column_config.DatetimeColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1106", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.jsoncolumn", "title": "Still have questions?", "page_title": "st.column_config.JsonColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1107", "url": "https://docs.streamlit.io/develop/api-reference/cli/init", "title": "$ streamlit init", "page_title": "streamlit init - Streamlit Docs", "breadcrumbs": "$ streamlit init", "content": "$ streamlit init This command creates the files for a new Streamlit app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1108", "url": "https://docs.streamlit.io/develop/api-reference/cli/init", "title": "Arguments", "page_title": "streamlit init - Streamlit Docs", "breadcrumbs": "Arguments", "content": "Arguments <directory> (Optional): The directory location of the new project. If no directory is provided, the current working directory will be used.", "prev_chunk_id": "chunk_1107", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1109", "url": "https://docs.streamlit.io/develop/api-reference/cli/init", "title": "Example 1: Create project files the current working directory", "page_title": "streamlit init - Streamlit Docs", "breadcrumbs": "Example 1: Create project files the current working directory", "content": "Example 1: Create project files the current working directory - In your current working directory (CWD), execute the following:streamlit initStreamlit creates the following files:CWD/ ├── requirements.txt └── streamlit_app.py - In your terminal, Streamlit prompts,❓ Run the app now? [Y/n]. EnterYfor yes.This is equivalent to executingstreamlit run streamlit_app.pyfrom your current working directory. - Begin editing yourstreamlit_app.pyfile and save your changes.", "prev_chunk_id": "chunk_1108", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1110", "url": "https://docs.streamlit.io/develop/api-reference/cli/init", "title": "Example 2: Create project files in another directory", "page_title": "streamlit init - Streamlit Docs", "breadcrumbs": "Example 2: Create project files in another directory", "content": "Example 2: Create project files in another directory - In your current working directory (CWD), execute the following:streamlit init projectStreamlit creates the following files:CWD/ └── project/ ├── requirements.txt └── streamlit_app.py - In your terminal, Streamlit prompts,❓ Run the app now? [Y/n]. EnterYfor yes.This is equivalent to executingstreamlit run project/streamlit_app.pyfrom your current working directory. - Begin editing yourstreamlit_app.pyfile and save your changes.", "prev_chunk_id": "chunk_1109", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1111", "url": "https://docs.streamlit.io/develop/api-reference/cli/init", "title": "Still have questions?", "page_title": "streamlit init - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1110", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1112", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.linkcolumn", "title": "Still have questions?", "page_title": "st.column_config.LinkColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1113", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.progresscolumn", "title": "Still have questions?", "page_title": "st.column_config.ProgressColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1114", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.numbercolumn", "title": "Still have questions?", "page_title": "st.column_config.NumberColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1115", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.areachartcolumn", "title": "Still have questions?", "page_title": "st.column_config.AreaChartColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1116", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "Overview of multipage apps", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "Overview of multipage apps", "content": "Overview of multipage apps Streamlit provides two built-in mechanisms for creating multipage apps. The simplest method is to use a pages/ directory. However, the preferred and more customizable method is to use st.navigation.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1117", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "st.Page and st.navigation", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "st.Page and st.navigation", "content": "st.Page and st.navigation If you want maximum flexibility in defining your multipage app, we recommend using st.Page and st.navigation. With st.Page you can declare any Python file or Callable as a page in your app. Furthermore, you can define common elements for your pages in your entrypoint file (the file you pass to streamlit run). With these methods, your entrypoint file becomes like a picture frame shared by all your pages. You must include st.navigation in your entrypoint file to configure your app's navigation menu. This is also how your entrypoint file serves as the router between your pages.", "prev_chunk_id": "chunk_1116", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1118", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "pages/ directory", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "pages/ directory", "content": "pages/ directory If you're looking for a quick and simple solution, just place a pages/ directory next to your entrypoint file. For every Python file in your pages/ directory, Streamlit will create an additional page for your app. Streamlit determines the page labels and URLs from the file name and automatically populates a navigation menu at the top of your app's sidebar. Streamlit determines the page order in navigation from the filenames. You can use numerical prefixes in the filenames to adjust page order. For more information, see How pages are sorted in the sidebar. If you want to customize your navigation menu with this option, you can deactivate the default navigation through configuration (client.showSidebarNavigation = false). Then, you can use st.page_link to manually contruct a custom navigation menu. With st.page_link, you can change the page label and icon in your navigation menu, but you can't change the URLs of your pages.", "prev_chunk_id": "chunk_1117", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1119", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "Page terminology", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "Page terminology", "content": "Page terminology A page has four identifying pieces as follows: - Page source: This is a Python file or callable function with the page's source code. - Page label: This is how the page is identified within the navigation menu. Seelooks_one. - Page title: This is the content of the HTML<title>element and how the page is identified within a browser tab. Seelooks_two. - Page URL pathname: This is the relative path of the page from the root URL of the app. Seelooks_3. Additionly, a page can have two icons as follows: - Page favicon: This is the icon next to your page title within a browser tab. Seelooks_4. - Page icon: This is the icon next to your page label in the navigation menu. Seelooks_5. Typically, the page icon and favicon are the same, but it's possible make them different.", "prev_chunk_id": "chunk_1118", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1120", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "Automatic page labels and URLs", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "Automatic page labels and URLs", "content": "Automatic page labels and URLs If you use st.Page without declaring the page title or URL pathname, Streamlit falls back on automatically determining the page label, title, and URL pathname in the same manner as when you use a pages/ directory with the default navigation menu. This section describes this naming convention which is shared between the two approaches to multipage apps.", "prev_chunk_id": "chunk_1119", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1121", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "Parts of filenames and callables", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "Parts of filenames and callables", "content": "Parts of filenames and callables Filenames are composed of four different parts as follows (in order): - number: A non-negative integer. - separator: Any combination of underscore (\"_\"), dash (\"-\"), and space (\" \"). - identifier: Everything up to, but not including,\".py\". - \".py\" For callables, the function name is the identifier, including any leading or trailing underscores.", "prev_chunk_id": "chunk_1120", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1122", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "How Streamlit converts filenames into labels and titles", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "How Streamlit converts filenames into labels and titles", "content": "How Streamlit converts filenames into labels and titles Within the navigation menu, Streamlit displays page labels and titles as follows: - If your page has anidentifier, Streamlit displays theidentifier. Any underscores within the page'sidentifierare treated as spaces. Therefore, leading and trailing underscores are not shown. Sequential underscores appear as a single space. - Otherwise, if your page has anumberbut does not have anidentifier, Streamlit displays thenumber, unmodified. Leading zeros are included, if present. - Otherwise, if your page only has aseparatorwith nonumberand noidentifier, Streamlit will not display the page in the sidebar navigation. The following filenames and callables would all display as \"Awesome page\" in the sidebar navigation. - \"Awesome page.py\" - \"Awesome_page.py\" - \"02Awesome_page.py\" - \"--Awesome_page.py\" - \"1_Awesome_page.py\" - \"33 - Awesome page.py\" - Awesome_page() - _Awesome_page() - __Awesome_page__()", "prev_chunk_id": "chunk_1121", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1123", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "How Streamlit converts filenames into URL pathnames", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "How Streamlit converts filenames into URL pathnames", "content": "How Streamlit converts filenames into URL pathnames Your app's homepage is associated to the root URL of app. For all other pages, their identifier or number becomes their URL pathname as follows: - If your page has anidentifierthat came from a filename, Streamlit uses theidentifierwith one modification. Streamlit condenses each consecutive grouping of spaces (\" \") and underscores (\"_\") to a single underscore. - Otherwise, if your page has anidentifierthat came from the name of a callable, Streamlit uses theidentifierunmodified. - Otherwise, if your page has anumberbut does not have anidentifier, Streamlit uses thenumber. Leading zeros are included, if present. For each filename in the list above, the URL pathname would be \"Awesome_page\" relative to the root URL of the app. For example, if your app was running on localhost port 8501, the full URL would be localhost:8501/awesome_page. For the last two callables, however, the pathname would include the leading and trailing underscores to match the callable name exactly.", "prev_chunk_id": "chunk_1122", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1124", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "Navigating between pages", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "Navigating between pages", "content": "Navigating between pages The primary way users navigate between pages is through the navigation widget. Both methods for defining multipage apps include a default navigation menu that appears in the sidebar. When a user clicks this navigation widget, the app reruns and loads the selected page. Optionally, you can hide the default navigation UI and build your own with st.page_link. For more information, see Build a custom navigation menu with st.page_link. If you need to programmatically switch pages, use st.switch_page. Users can also navigate between pages using URLs as noted above. When multiple files have the same URL pathname, Streamlit picks the first one (based on the ordering in the navigation menu. Users can view a specific page by visiting the page's URL. If a user tries to access a URL for a page that does not exist, they will see a modal like the one below, saying \"Page not found.\"", "prev_chunk_id": "chunk_1123", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1125", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/overview", "title": "Still have questions?", "page_title": "Overview of multipage apps - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1124", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1126", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/why-streamlit-restrict-nested-columns", "title": "Why does Streamlit restrict nested st.columns?", "page_title": "Why does Streamlit restrict nested st.columns? - Streamlit Docs", "breadcrumbs": "Why does Streamlit restrict nested st.columns?", "content": "Why does Streamlit restrict nested st.columns? Starting in version 1.46.0, Streamlit removed explicit limits on nesting columns, expanders, popovers, and chat message containers. To follow best design practices and maintain a good appearance on all screen sizes, don't overuse nested layouts. From version 1.18.0 to 1.45.0, Streamlit allows nesting st.columns inside other st.columns with the following restrictions: - In the main area of the app, columns can be nested up to one level of nesting. - In the sidebar, columns cannot be nested. These restrictions were in place to make Streamlit apps look good on all device sizes. Nesting columns multiple times often leads to a bad UI. You might be able to make it look good on one screen size but as soon as a user on a different screen views the app, they will have a bad experience. Some columns will be tiny, others will be way too long, and complex layouts will look out of place. Streamlit tries its best to automatically resize elements to look good across devices, without any help from the developer. But for complex layouts with multiple levels of nesting, this is not possible.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1127", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/why-streamlit-restrict-nested-columns", "title": "Still have questions?", "page_title": "Why does Streamlit restrict nested st.columns? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1126", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1128", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit", "title": "How do I upgrade to the latest version of Streamlit?", "page_title": "How do I upgrade to the latest version of Streamlit? - Streamlit Docs", "breadcrumbs": "How do I upgrade to the latest version of Streamlit?", "content": "How do I upgrade to the latest version of Streamlit? We recommend upgrading to the latest official release of Streamlit so you have access to the newest, cutting-edge features. If you haven't installed Streamlit yet, please read our Installation guide. It helps you set up your virtual environment and walks you through installing Streamlit on Windows, macOS, and Linux. Regardless of which package management tool and OS you're using, we recommend running the commands on this page in a virtual environment. If you've previously installed Streamlit and want to upgrade to the latest version, here's how to do it based on your dependency manager.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1129", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit", "title": "Pipenv", "page_title": "How do I upgrade to the latest version of Streamlit? - Streamlit Docs", "breadcrumbs": "Pipenv", "content": "Pipenv Streamlit's officially-supported environment manager for macOS and Linux is Pipenv. - Navigate to the project folder containing your Pipenv environment: - Activate that environment, upgrade Streamlit, and verify you have the latest version: Or if you want to use an easily-reproducible environment, replace pip with pipenvevery time you install or update a package:", "prev_chunk_id": "chunk_1128", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1130", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit", "title": "Conda", "page_title": "How do I upgrade to the latest version of Streamlit? - Streamlit Docs", "breadcrumbs": "Conda", "content": "Conda - Activate the conda environment where Streamlit is installed: Be sure to replace$ENVIRONMENT_NAME ☝️ with the name your conda environment! - Update Streamlit within the active conda environment and verify you have the latest version:", "prev_chunk_id": "chunk_1129", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1131", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit", "title": "Poetry", "page_title": "How do I upgrade to the latest version of Streamlit? - Streamlit Docs", "breadcrumbs": "Poetry", "content": "Poetry In order to get the latest version of Streamlit with Poetry and verify you have the latest version, run:", "prev_chunk_id": "chunk_1130", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1132", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-upgrade-latest-version-streamlit", "title": "Still have questions?", "page_title": "How do I upgrade to the latest version of Streamlit? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1131", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1133", "url": "https://docs.streamlit.io/knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in", "title": "Huh. This is isn't supposed to happen message after trying to log in", "page_title": "Huh. This is isn't supposed to happen message after trying to log in - Streamlit Docs", "breadcrumbs": "Huh. This is isn't supposed to happen message after trying to log in", "content": "Huh. This is isn't supposed to happen message after trying to log in This article helps to resolve the login issue caused by email mismatching between the GitHub and the Streamlit Community Cloud.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1134", "url": "https://docs.streamlit.io/knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in", "title": "Problem", "page_title": "Huh. This is isn't supposed to happen message after trying to log in - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem You see the following message after signing in to your Streamlit Community Cloud account: This message usually indicates that our system has linked your GitHub username with an email address other than the email address you're currently logged in with.", "prev_chunk_id": "chunk_1133", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1135", "url": "https://docs.streamlit.io/knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in", "title": "Solution", "page_title": "Huh. This is isn't supposed to happen message after trying to log in - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution No worries – all you have to do is: - Log out of Streamlit Community Cloud completely (via both your email and GitHub accounts). - Log in first with your email account (you can do so via either\"Continue with Google\"or\"Continue with email\"). - Log in with yourGitHub account.", "prev_chunk_id": "chunk_1134", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1136", "url": "https://docs.streamlit.io/knowledge-base/deploy/huh-this-isnt-supposed-to-happen-message-after-trying-to-log-in", "title": "Still have questions?", "page_title": "Huh. This is isn't supposed to happen message after trying to log in - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1135", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1137", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.barchartcolumn", "title": "Still have questions?", "page_title": "st.column_config.BarChartColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1138", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.imagecolumn", "title": "Still have questions?", "page_title": "st.column_config.ImageColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1139", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.listcolumn", "title": "Still have questions?", "page_title": "st.column_config.ListColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1140", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.selectboxcolumn", "title": "Still have questions?", "page_title": "st.column_config.SelectboxColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1141", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.checkboxcolumn", "title": "Still have questions?", "page_title": "st.column_config.CheckboxColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1142", "url": "https://docs.streamlit.io/develop/api-reference/cli/version", "title": "$ streamlit version", "page_title": "streamlit version - Streamlit Docs", "breadcrumbs": "$ streamlit version", "content": "$ streamlit version Print Streamlit's version number. This command is equivalent to executing streamlit --version.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1143", "url": "https://docs.streamlit.io/develop/api-reference/cli/version", "title": "Still have questions?", "page_title": "streamlit version - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1142", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1144", "url": "https://docs.streamlit.io/develop/api-reference/cli/run", "title": "$ streamlit run", "page_title": "streamlit run - Streamlit Docs", "breadcrumbs": "$ streamlit run", "content": "$ streamlit run This command starts your Streamlit app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1145", "url": "https://docs.streamlit.io/develop/api-reference/cli/run", "title": "Arguments", "page_title": "streamlit run - Streamlit Docs", "breadcrumbs": "Arguments", "content": "Arguments <entrypoint file>: The path to your entrypoint file for your Streamlit app. In a multipage app with st.navigation, your entrypoint file acts as a router between your pages. Otherwise, your entrypoint file is your app's homepage.", "prev_chunk_id": "chunk_1144", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1146", "url": "https://docs.streamlit.io/develop/api-reference/cli/run", "title": "Options", "page_title": "streamlit run - Streamlit Docs", "breadcrumbs": "Options", "content": "Options Configuration options are passed in the form of --<section>.<option>=<value>. For example, if you want to set the primary color of your app to blue, you could use one of the three equivalent options: - --theme.primaryColor=blue - --theme.primaryColor=\"blue\" - --theme.primaryColor=#0000FF For a complete list of configuration options, see config.toml in the API reference. For examples, see below.", "prev_chunk_id": "chunk_1145", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1147", "url": "https://docs.streamlit.io/develop/api-reference/cli/run", "title": "Script arguments", "page_title": "streamlit run - Streamlit Docs", "breadcrumbs": "Script arguments", "content": "Script arguments If you need to pass arguments directly to your script, you can pass them as positional arguments. If you use sys.argv to read your arguments, sys.arfgv returns a list of all arugments and does not include any configuration options. Python interprets all arguments as strings. - sys.argv[0]returns the provided path to your entrypoint file (<entrypoint file>). - sys.argv[1:]returns a list of arguments in order and does not include any configuration options.", "prev_chunk_id": "chunk_1146", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1148", "url": "https://docs.streamlit.io/develop/api-reference/cli/run", "title": "Examples", "page_title": "streamlit run - Streamlit Docs", "breadcrumbs": "Examples", "content": "Examples - If your app is in your working directory, run it as follows:streamlit run your_app.py - If your app is in a subdirectory, run it as follows:streamlit run your_subdirectory/your_app.py - If your app is saved in a public GitHub repo or gist, run it as follows:streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py - If you need to set one or more configuration options, run it as follows:streamlit run your_app.py --client.showErrorDetails=False --theme.primaryColor=blue - If you need to pass an argument to your script, run it as follows:streamlit run your_app.py \"my list\" of argumentsWithin your script, the following statement will be true:sys.argv[0] == \"your_app.py\" sys.argv[1] == \"my list\" sys.argv[2] == \"of\" sys.argv[3] == \"arguments\"", "prev_chunk_id": "chunk_1147", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1149", "url": "https://docs.streamlit.io/develop/api-reference/cli/run", "title": "Still have questions?", "page_title": "streamlit run - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1148", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1150", "url": "https://docs.streamlit.io/develop/api-reference/cli/help", "title": "$ streamlit help", "page_title": "streamlit help - Streamlit Docs", "breadcrumbs": "$ streamlit help", "content": "$ streamlit help Print the available commands for the Streamlit CLI tool. This command is equivalent to executing streamlit --help.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1151", "url": "https://docs.streamlit.io/develop/api-reference/cli/help", "title": "Still have questions?", "page_title": "streamlit help - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1150", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1152", "url": "https://docs.streamlit.io/develop/api-reference/cli/hello", "title": "$ streamlit hello", "page_title": "streamlit hello - Streamlit Docs", "breadcrumbs": "$ streamlit hello", "content": "$ streamlit hello Run the Hello app, an example Streamlit app included with the Streamlit library.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1153", "url": "https://docs.streamlit.io/develop/api-reference/cli/hello", "title": "Options", "page_title": "streamlit hello - Streamlit Docs", "breadcrumbs": "Options", "content": "Options The hello command accepts configuration options (just like the run command does). Configuration options are passed in the form of --<section>.<option>=<value>. For example, if you want to set the primary color of your app to blue, you could use one of the three equivalent options: - --theme.primaryColor=blue - --theme.primaryColor=\"blue\" - --theme.primaryColor=#0000FF For a complete list of configuration options, see config.toml in the API reference. For examples, see below.", "prev_chunk_id": "chunk_1152", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1154", "url": "https://docs.streamlit.io/develop/api-reference/cli/hello", "title": "Example 1: Run the Hello app with default settings", "page_title": "streamlit hello - Streamlit Docs", "breadcrumbs": "Example 1: Run the Hello app with default settings", "content": "Example 1: Run the Hello app with default settings To verify that Streamlit is installed correctly, this command runs an example app included in the Streamlit library. From any directory, execute the following: Streamlit will start the Hello app and open it in your default browser. The source for the Hello app can be viewed in GitHub.", "prev_chunk_id": "chunk_1153", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1155", "url": "https://docs.streamlit.io/develop/api-reference/cli/hello", "title": "Example 2: Run the Hello app with a custom config option value", "page_title": "streamlit hello - Streamlit Docs", "breadcrumbs": "Example 2: Run the Hello app with a custom config option value", "content": "Example 2: Run the Hello app with a custom config option value To run the Hello app with a blue accent color, from any directory, execute the following:", "prev_chunk_id": "chunk_1154", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1156", "url": "https://docs.streamlit.io/develop/api-reference/cli/hello", "title": "Still have questions?", "page_title": "streamlit hello - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1155", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1157", "url": "https://docs.streamlit.io/develop/api-reference/cli/docs", "title": "$ streamlit docs", "page_title": "streamlit docs - Streamlit Docs", "breadcrumbs": "$ streamlit docs", "content": "$ streamlit docs Open the Streamlit docs in your default browser.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1158", "url": "https://docs.streamlit.io/develop/api-reference/cli/docs", "title": "Still have questions?", "page_title": "streamlit docs - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1157", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1159", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Build a custom navigation menu with st.page_link", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Build a custom navigation menu with st.page_link", "content": "Build a custom navigation menu with st.page_link Streamlit lets you build custom navigation menus and elements with st.page_link. Introduced in Streamlit version 1.31.0, st.page_link can link to other pages in your multipage app or to external sites. When linked to another page in your app, st.page_link will show a highlight effect to indicate the current page. When combined with the client.showSidebarNavigation configuration option, you can build sleek, dynamic navigation in your app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1160", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Prerequisites", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites Create a new working directory in your development environment. We'll call this directory your-repository.", "prev_chunk_id": "chunk_1159", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1161", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Summary", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, we'll build a dynamic navigation menu for a multipage app that depends on the current user's role. We've abstracted away the use of username and creditials to simplify the example. Instead, we'll use a selectbox on the main page of the app to switch between roles. Session State will carry this selection between pages. The app will have a main page (app.py) which serves as the abstracted log-in page. There will be three additional pages which will be hidden or accessible, depending on the current role. The file structure will be as follows: Here's a look at what we'll build:", "prev_chunk_id": "chunk_1160", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1162", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Hide the default sidebar navigation", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Hide the default sidebar navigation", "content": "Hide the default sidebar navigation When creating a custom navigation menu, you need to hide the default sidebar navigation using client.showSidebarNavigation. Add the following .streamlit/config.toml file to your working directory:", "prev_chunk_id": "chunk_1161", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1163", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Create a menu function", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Create a menu function", "content": "Create a menu function You can write different menu logic for different pages or you can create a single menu function to call on multiple pages. In this example, we'll use the same menu logic on all pages, including a redirect to the main page when a user isn't logged in. We'll build a few helper functions to do this. - menu_with_redirect()checks if a user is logged in, then either redirects them to the main page or renders the menu. - menu()will call the correct helper function to render the menu based on whether the user is logged in or not. - authenticated_menu()will display a menu based on an authenticated user's role. - unauthenticated_menu()will display a menu for unauthenticated users. We'll call menu() on the main page and call menu_with_redirect() on the other pages. st.session_state.role will store the current selected role. If this value does not exist or is set to None, then the user is not logged in. Otherwise, it will hold the user's role as a string: \"user\", \"admin\", or \"super-admin\". Add the following menu.py file to your working directory. (We'll describe the functions in more detail below.) Let's take a closer look at authenticated_menu(). When this function is called, st.session_state.role exists and has a value other than None. The first two pages in the navigation menu are available to all users. Since we know a user is logged in when this function is called, we'll use the label \"Switch accounts\" for the main page. (If you don't use the label parameter, the page name will be derived from the file name like it is with the default sidebar navigation.) We only want to show the next two pages to admins. Furthermore, we've chosen to disable—but not hide—the super-admin page when the admin user is not a super-admin.", "prev_chunk_id": "chunk_1162", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1164", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Create a menu function", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Create a menu function", "content": "We do this using the disabled parameter. (disabled=True when the role is not \"super-admin\".) It's that simple! unauthenticated_menu() will only show a link to the main page of the app with the label \"Log in.\" menu() does a simple inspection of st.session_state.role to switch between the two menu-rendering functions. Finally, menu_with_redirect() extends menu() to redirect users to app.py if they aren't logged in.", "prev_chunk_id": "chunk_1163", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1165", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Create the main file of your app", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Create the main file of your app", "content": "Create the main file of your app The main app.py file will serve as a pseudo-login page. The user can choose a role from the st.selectbox widget. A few bits of logic will save that role into Session State to preserve it while navigating between pages—even when returning to app.py. Add the following app.py file to your working directory:", "prev_chunk_id": "chunk_1164", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1166", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Add other pages to your app", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Add other pages to your app", "content": "Add other pages to your app Add the following pages/user.py file: Session State resets if a user manually navigates to a page by URL. Therefore, if a user tries to access an admin page in this example, Session State will be cleared, and they will be redirected to the main page as an unauthenicated user. However, it's still good practice to include a check of the role at the top of each restricted page. You can use st.stop to halt an app if a role is not whitelisted. pages/admin.py: pages/super-admin.py: As noted above, the redirect in menu_with_redirect() will prevent a user from ever seeing the warning messages on the admin pages. If you want to see the warning, just add another st.page_link(\"pages/admin.py\") button at the bottom of app.py so you can navigate to the admin page after selecting the \"user\" role. 😉", "prev_chunk_id": "chunk_1165", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1167", "url": "https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav", "title": "Still have questions?", "page_title": "Build a custom navigation menu with `st.page_link` - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1166", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1168", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/widgets", "title": "Working with widgets in multipage apps", "page_title": "Working with widgets in multipage apps - Streamlit Docs", "breadcrumbs": "Working with widgets in multipage apps", "content": "Working with widgets in multipage apps When you create a widget in a Streamlit app, Streamlit generates a widget ID and uses it to make your widget stateful. As your app reruns with user interaction, Streamlit keeps track of the widget's value by associating its value to its ID. In particular, a widget's ID depends on the page where it's created. If you define an identical widget on two different pages, then the widget will reset to its default value when you switch pages. This guide explains three strategies to deal with the behavior if you'd like to have a widget remain stateful across all pages. If don't want a widget to appear on all pages, but you do want it to remain stateful when you navigate away from its page (and then back), Options 2 and 3 can be used. For detailed information about these strategies, see Understanding widget behavior.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1169", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/widgets", "title": "Option 1 (preferred): Execute your widget command in your entrypoint file", "page_title": "Working with widgets in multipage apps - Streamlit Docs", "breadcrumbs": "Option 1 (preferred): Execute your widget command in your entrypoint file", "content": "Option 1 (preferred): Execute your widget command in your entrypoint file When you define your multipage app with st.Page and st.navigation, your entrypoint file becomes a frame of common elements around your pages. When you execute a widget command in your entrypoint file, Streamlit associates the widget to your entrypoint file instead of a particular page. Since your entrypoint file is executed in every app rerun, any widget in your entrypoint file will remain stateful as your users switch between pages. This method does not work if you define your app with the pages/ directory. The following example includes a selectbox and slider in the sidebar that are rendered and stateful on all pages. The widgets each have an assigned key so you can access their values through Session State within a page. Directory structure: streamlit_app.py:", "prev_chunk_id": "chunk_1168", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1170", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/widgets", "title": "Option 2: Save your widget values into a dummy key in Session State", "page_title": "Working with widgets in multipage apps - Streamlit Docs", "breadcrumbs": "Option 2: Save your widget values into a dummy key in Session State", "content": "Option 2: Save your widget values into a dummy key in Session State If you want to navigate away from a widget and return to it while keeping its value, or if you want to use the same widget on multiple pages, use a separate key in st.session_state to save the value independently from the widget. In this example, a temporary key is used with a widget. The temporary key uses an underscore prefix. Hence, \"_my_key\" is used as the widget key, but the data is copied to \"my_key\" to preserve it between pages. If this is functionalized to work with multiple widgets, it could look something like this:", "prev_chunk_id": "chunk_1169", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1171", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/widgets", "title": "Option 3: Interrupt the widget clean-up process", "page_title": "Working with widgets in multipage apps - Streamlit Docs", "breadcrumbs": "Option 3: Interrupt the widget clean-up process", "content": "Option 3: Interrupt the widget clean-up process When Streamlit gets to the end of an app run, it will delete the data for any widgets that were not rendered. This includes data for any widget not associated to the current page. However, if you re-save a key-value pair in an app run, Streamlit will not associate the key-value pair to any widget until you execute a widget command again with that key. As a result, if you have the following code at the top of every page, any widget with the key \"my_key\" will retain its value wherever it's rendered (or not). Alternatively, if you are using st.navigation and st.Page, you can include this once in your entrypoint file before executing your page.", "prev_chunk_id": "chunk_1170", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1172", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/widgets", "title": "Still have questions?", "page_title": "Working with widgets in multipage apps - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1171", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1173", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/serializable-session-state", "title": "Serializable Session State", "page_title": "What is serializable session state? - Streamlit Docs", "breadcrumbs": "Serializable Session State", "content": "Serializable Session State Serialization refers to the process of converting an object or data structure into a format that can be persisted and shared, and allowing you to recover the data’s original structure. Python’s built-in pickle module serializes Python objects to a byte stream (\"pickling\") and deserializes the stream into an object (\"unpickling\"). By default, Streamlit’s Session State allows you to persist any Python object for the duration of the session, irrespective of the object’s pickle-serializability. This property lets you store Python primitives such as integers, floating-point numbers, complex numbers and booleans, dataframes, and even lambdas returned by functions. However, some execution environments may require serializing all data in Session State, so it may be useful to detect incompatibility during development, or when the execution environment will stop supporting it in the future. To that end, Streamlit provides a runner.enforceSerializableSessionState configuration option that, when set to true, only allows pickle-serializable objects in Session State. To enable the option, either create a global or project config file with the following or use it as a command-line flag: By \"pickle-serializable\", we mean calling pickle.dumps(obj) should not raise a PicklingError exception. When the config option is enabled, adding unserializable data to session state should result in an exception. E.g.,", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1174", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/serializable-session-state", "title": "Still have questions?", "page_title": "What is serializable session state? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1173", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1175", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-pandas-dataframe-csv", "title": "How to download a Pandas DataFrame as a CSV?", "page_title": "How to download a Pandas DataFrame as a CSV? - Streamlit Docs", "breadcrumbs": "How to download a Pandas DataFrame as a CSV?", "content": "How to download a Pandas DataFrame as a CSV? Use the st.download_button widget that is natively built into Streamlit. Check out a sample app demonstrating how you can use st.download_button to download common file formats.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1176", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-pandas-dataframe-csv", "title": "Example usage", "page_title": "How to download a Pandas DataFrame as a CSV? - Streamlit Docs", "breadcrumbs": "Example usage", "content": "Example usage Additional resources: - https://blog.streamlit.io/0-88-0-release-notes/ - https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/ - https://docs.streamlit.io/develop/api-reference/widgets/st.download_button", "prev_chunk_id": "chunk_1175", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1177", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-pandas-dataframe-csv", "title": "Still have questions?", "page_title": "How to download a Pandas DataFrame as a CSV? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1176", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1178", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory", "title": "Creating multipage apps using the pages/ directory", "page_title": "Creating multipage apps using the `pages/` directory - Streamlit Docs", "breadcrumbs": "Creating multipage apps using the pages/ directory", "content": "Creating multipage apps using the pages/ directory The most customizable method for declaring multipage apps is using Page and navigation. However, Streamlit also provides a frictionless way to create multipage apps where pages are automatically recognized and shown in a navigation widget inside your app's sidebar. This method uses the pages/ directory. This page assumes you understand the Page terminology presented in the overview.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1179", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory", "title": "App structure", "page_title": "Creating multipage apps using the `pages/` directory - Streamlit Docs", "breadcrumbs": "App structure", "content": "App structure When you use the pages/ directory, Streamlit identifies pages in your multipage app by directory structure and filenames. Your entrypoint file (the file you pass to streamlit run), is your app's homepage. When you have a pages/ directory next to your entrypoint file, Streamlit will identify each Python file within it as a page. The following example has three pages. your_homepage.py is the entrypoint file and homepage. Run your multipage app just like you would for a single-page app. Pass your entrypoint file to streamlit run. Only .py files in the pages/ directory will be identified as pages. Streamlit ignores all other files in the pages/ directory and its subdirectories. Streamlit also ignores Python files in subdirectories of pages/. See the overview to understand how Streamlit assigns Automatic page labels and URLs based on the number, separator, identifier, and \".py\" extension that constitute a filename. The entrypoint file is always displayed first. The remaining pages are sorted as follows: - Files that have anumberappear before files without anumber. - Files are sorted based on thenumber(if any), followed by thelabel(if any). - When files are sorted, Streamlit treats thenumberas an actual number rather than a string. So03is the same as3. This table shows examples of filenames and their corresponding labels, sorted by the order in which they appear in the sidebar. Examples: Filename | Rendered label 1 - first page.py | first page 12 monkeys.py | monkeys 123.py | 123 123_hello_dear_world.py | hello dear world _12 monkeys.py | 12 monkeys", "prev_chunk_id": "chunk_1178", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1180", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory", "title": "How pages are sorted in the sidebar", "page_title": "Creating multipage apps using the `pages/` directory - Streamlit Docs", "breadcrumbs": "How pages are sorted in the sidebar", "content": "How pages are sorted in the sidebar See the overview to understand how Streamlit assigns Automatic page labels and URLs based on the number, separator, identifier, and \".py\" extension that constitute a filename. The entrypoint file is always displayed first. The remaining pages are sorted as follows: - Files that have anumberappear before files without anumber. - Files are sorted based on thenumber(if any), followed by thelabel(if any). - When files are sorted, Streamlit treats thenumberas an actual number rather than a string. So03is the same as3. This table shows examples of filenames and their corresponding labels, sorted by the order in which they appear in the sidebar. Examples: Filename | Rendered label 1 - first page.py | first page 12 monkeys.py | monkeys 123.py | 123 123_hello_dear_world.py | hello dear world _12 monkeys.py | 12 monkeys", "prev_chunk_id": "chunk_1179", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1181", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory", "title": "Notes and limitations", "page_title": "Creating multipage apps using the `pages/` directory - Streamlit Docs", "breadcrumbs": "Notes and limitations", "content": "Notes and limitations - Pages support run-on-save.When you update a page while your app is running, this causes a rerun for users currently viewing that exact page.When you update a page while your app is running, the app will not automatically rerun for users currently viewing a different page. - While your app is running, adding or deleting a page updates the sidebar navigation immediately. - st.set_page_configworks at the page level.When you settitleorfaviconusingst.set_page_config, this applies to the current page only.When you setlayoutusingst.set_page_config, the setting will remain for the session until changed by another call tost.set_page_config. If you usest.set_page_configto setlayout, it's recommended to call it onallpages. - Pages share the same Python modules globally:# page1.py import foo foo.hello = 123 # page2.py import foo st.write(foo.hello) # If page1 already executed, this writes 123 - Pages share the samest.session_state:# page1.py import streamlit as st if \"shared\" not in st.session_state: st.session_state[\"shared\"] = True # page2.py import streamlit as st st.write(st.session_state[\"shared\"]) # If page1 already executed, this writes True You now have a solid understanding of multipage apps. You've learned how to structure apps, define pages, and navigate between pages in the user interface. It's time to create your first multipage app! 🥳", "prev_chunk_id": "chunk_1180", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1182", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory", "title": "Still have questions?", "page_title": "Creating multipage apps using the `pages/` directory - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1181", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1183", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "Define multipage apps with st.Page and st.navigation", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "Define multipage apps with st.Page and st.navigation", "content": "Define multipage apps with st.Page and st.navigation st.Page and st.navigation are the preferred commands for defining multipage apps. With these commands, you have flexibility to organize your project files and customize your navigation menu. Simply initialize StreamlitPage objects with st.Page, then pass those StreamlitPage objects to st.navigation in your entrypoint file (i.e. the file you pass to streamlit run). This page assumes you understand the Page terminology presented in the overview.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1184", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "App structure", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "App structure", "content": "App structure When using st.navigation, your entrypoint file acts like a page router. Each page is a script executed from your entrypoint file. You can define a page from a Python file or function. If you include elements or widgets in your entrypoint file, they become common elements between your pages. In this case, you can think of your entrypoint file like a picture frame around each of your pages. You can only call st.navigation once per app run and you must call it from your entrypoint file. When a user selects a page in navigation (or is routed through a command like st.switch_page), st.navigation returns the selected page. You must manually execute that page with the .run() method. The following example is a two-page app where each page is defined by a Python file. Directory structure: streamlit_app.py:", "prev_chunk_id": "chunk_1183", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1185", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "Defining pages", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "Defining pages", "content": "Defining pages st.Page lets you define a page. The first and only required argument defines your page source, which can be a Python file or function. When using Python files, your pages may be in a subdirectory (or superdirectory). The path to your page file must always be relative to the entrypoint file. Once you create your page objects, pass them to st.navigation to register them as pages in your app. If you don't define your page title or URL pathname, Streamlit will infer them from the file or function name as described in the multipage apps Overview. However, st.Page lets you configure them manually. Within st.Page, Streamlit uses title to set the page label and title. Additionaly, Streamlit uses icon to set the page icon and favicon. If you want to have a different page title and label, or different page icon and favicon, you can use st.set_page_config to change the page title and/or favicon. Just call st.set_page_config in your entrypoint file or in your page script. You can call st.set_page_config multiple times to additively configure your page. Use st.set_page_config in your entrypoint file to declare a default configuration, and call it within page scripts to override that default. The following example uses st.set_page_config to set a page title and favicon consistently across pages. Each page will have its own label and icon in the navigation menu, but the browser tab will show a consistent title and favicon on all pages. Directory structure: streamlit_app.py:", "prev_chunk_id": "chunk_1184", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1186", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "Customizing navigation", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "Customizing navigation", "content": "Customizing navigation You can display your navigation menu in the sidebar or along the top of your app using the position parameter in st.navigation. If you want to group your pages into sections, st.navigation lets you insert headers in the sidebar navigation or drop-down groups in the top navigation. Alternatively, you can disable the default navigation widget and build a custom navigation menu with st.page_link. Additionally, you can dynamically change which pages you pass to st.navigation. However, only the page returned by st.navigation accepts the .run() method. If a user enters a URL with a pathname, and that pathname is not associated to a page in st.navigation (on first run), Streamlit will throw a \"Page not found\" error and redirect them to the default page.", "prev_chunk_id": "chunk_1185", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1187", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "Adding section headers", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "Adding section headers", "content": "Adding section headers The simplest way to customize your navigation menu is to organize the pages within st.navigation. You can sort or group pages, as well as remove any pages you don't want the user to access. This is a convenient way to handle user permissions. However, you can't hide a page in navigation while keeping it accessible through a direct URL. If you need to hide a page while keeping it accessible, you'll need to hide the default navigation menu and build a navigation menu with commands like st.page_link. The following example creates two menu states. When a user starts a new session, they are not logged in. In this case, the only available page is the login page. If a user tries to access another page by URL, it will create a new session and Streamlit will not recognize the page. The user will be diverted to the login page. However, after a user logs in, they will see a navigation menu with three sections and be directed to the dashboard as the app's default page (i.e. homepage). Directory structure: streamlit_app.py:", "prev_chunk_id": "chunk_1186", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1188", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "Dynamically changing the available pages", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "Dynamically changing the available pages", "content": "Dynamically changing the available pages You can change what pages are available to a user by updating the list of pages in st.navigation. This is a convenient way to handle role-based or user-based access to certain pages. For more information, check out our tutorial, Create a dynamic navigation menu.", "prev_chunk_id": "chunk_1187", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1189", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "Building a custom navigation menu", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "Building a custom navigation menu", "content": "Building a custom navigation menu If you want more control over your navigation menu, you can hide the default navigation and build your own. You can hide the default navigation by including position=\"hidden\" in your st.navigation command. If you want a page to be available to a user without showing it in the navigation menu, you must use this method. A user can't be routed to a page if the page isn't included in st.navigation. This applies to navigation by URL as well as commands like st.switch_page and st.page_link.", "prev_chunk_id": "chunk_1188", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1190", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation", "title": "Still have questions?", "page_title": "Define multipage apps with st.Page and st.navigation - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1189", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1191", "url": "https://docs.streamlit.io/develop/api-reference/cli/config", "title": "$ streamlit config show", "page_title": "streamlit config show - Streamlit Docs", "breadcrumbs": "$ streamlit config show", "content": "$ streamlit config show Print all the available configuration options, including their descriptions, default values, and current values. For more information about configuration options, see config.toml.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1192", "url": "https://docs.streamlit.io/develop/api-reference/cli/config", "title": "Still have questions?", "page_title": "streamlit config show - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1191", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1193", "url": "https://docs.streamlit.io/develop/api-reference/cli/cache", "title": "$ streamlit cache clear", "page_title": "streamlit cache - Streamlit Docs", "breadcrumbs": "$ streamlit cache clear", "content": "$ streamlit cache clear Clear persisted files from the on-disk Streamlit cache, if present.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1194", "url": "https://docs.streamlit.io/develop/api-reference/cli/cache", "title": "Still have questions?", "page_title": "streamlit cache - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1193", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1195", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.textcolumn", "title": "Still have questions?", "page_title": "st.column_config.TextColumn - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1196", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.column", "title": "Still have questions?", "page_title": "st.column_config.Column - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1197", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Introduction", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a Snowflake database from Streamlit. It uses st.connection, the Snowpark library, and Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1198", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Prerequisites", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - The following packages must be installed in your Python environment:streamlit>=1.28 snowflake-snowpark-python>=0.9.0 snowflake-connector-python>=2.8.0push_pinNoteUse the correct version of Python required bysnowflake-snowpark-python. For example, if you usesnowflake-snowpark-python==1.23.0, you must use Python version >=3.8, <3.12. - You must have a Snowflake account. To create a trial account, see thetutorialinGet started. - You should have a basic understanding ofst.connectionandSecrets management.", "prev_chunk_id": "chunk_1197", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1199", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Create a Snowflake database", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Create a Snowflake database", "content": "Create a Snowflake database If you already have a database that you want to use, you can skip to the next step. - Sign in to your Snowflake account athttps://app.snowflake.com. - In the left navigation, select \"Projects,\" and then select \"Worksheets.\" - To create a new worksheet, in the upper-right corner, click the plus icon (add).You can use a worksheet to quickly and conveniently execute SQL statements. This is a great way to learn about and experiment with SQL in a trial account. - Optional: To rename your worksheet, in the upper-left corner, hover over the tab with your worksheet name, and then click the overflow menu icon (more_vert). Select \"Rename\", enter a new worksheet name (e.g. \"Scratchwork\"), and then press \"Enter\". - To create a new database with a table, in your worksheet's SQL editor, type and execute the following SQL statements:CREATE DATABASE PETS; CREATE TABLE MYTABLE (NAME varchar(80), PET varchar(80)); INSERT INTO MYTABLE VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird'); SELECT * FROM MYTABLE;To execute the statements in a worksheet, select all the lines you want to execute by highlighting them with your mouse. Then, in the upper-right corner, click the play button (play_arrow). Alternatively, if you want to execute everything in a worksheet, click the down arrow (expand_more) next to the play button, and select \"Run All\".priority_highImportantIf no lines are highlighted and you click the play button, only the line with your cursor will be executed. - Optional: To view your new database, above the left navigation, select \"Databases.\" Click the down arrows (expand_more) to expand \"PETS\" → \"PUBLIC\" → \"Tables\" → \"MYTABLE.\" - For your use in later steps, note down your role, warehouse, database, and schema. In the preceding screenshot, these are the following:role = \"ACCOUNTADMIN\" warehouse = \"COMPUTE_WH\" database = \"PETS\" schema = \"PUBLIC\"Because", "prev_chunk_id": "chunk_1198", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1200", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Create a Snowflake database", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Create a Snowflake database", "content": "the SQL statements did not specify a schema, they defaulted to the \"PUBLIC\" schema within the new \"PETS\" database. The role and warehouse are trial-account defaults. You can see the role and warehouse used by your worksheet in the upper-right corner, to the left of the \"Share\" and play (play_arrow) buttons.In Snowflake, databases provide storage, and warehouses provide compute. When you configure your connection, you aren't explicitly required to declare role, warehouse, database, and schema; if these are not specified, the connection will use your account defaults. If you want to use multiple roles, warehouses, or databases, you can also change these settings within an active connection. However, declaring these defaults avoids unintentional selections. - To conveniently copy your account identifier, in the lower-left corner, click your profile image, and hover over your account. A popover dialog expands to the right with your organization and account. In the popover, hover over your account, and click the copy icon (content_copy).The account identifier in your clipboard is period-separated, which is the format used for SQL statements. However, the Snowflake Connector for Python requires a hyphen-separated format. Paste your account identifier into your notes, and change the period to a hyphen.account = \"xxxxxxx-xxxxxxx\"For more information, seeAccount identifiersin the Snowflake docs.", "prev_chunk_id": "chunk_1199", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1201", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Add connection parameters to your local app secrets", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Add connection parameters to your local app secrets", "content": "Add connection parameters to your local app secrets There are three places Streamlit looks for your connection parameters: keyword arguments in st.connection, .streamlit/secrets.toml, and .snowflake/configuration.toml. For more information, especially if you want to manage multiple connections, see the examples in the API reference for SnowflakeConnnection. To configure your connection, you must specify the following: - Your account identifier (account) - Your username (user) - Some form of authentication parameter (likepasswordorprivate_key_file) If you don't have MFA on your account, you can just specify your password. Alternatively, you can set up key-pair authentication on your account and point to your private_key_file. If you are just looking for a quick, local connection, you can set authenticator to prompt you for credentials in an external browser. In addition to the three required parameters to authenticate your connection, it is common to specify the default role, warehouse, database, and schema for convenience. For more information about required and optional parameters, see the Snowflake Connector for Python documentation.", "prev_chunk_id": "chunk_1200", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1202", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Option 1: Use .streamlit/secrets.toml", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Option 1: Use .streamlit/secrets.toml", "content": "Option 1: Use .streamlit/secrets.toml - If you don't already have a.streamlit/secrets.tomlfile in your app's working directory, create an empty secrets file.To learn more, seeSecrets Management.priority_highImportantAdd this file to.gitignoreand don't commit it to your GitHub repo! If you want to use this connection in multiple repositories, you can create a globalsecrets.tomlfile instead. For more information, seesecrets.tomlfile location. - Add your connection parameters to.streamlit/secrets.toml:[connections.snowflake] account = \"xxxxxxx-xxxxxxx\" user = \"xxx\" private_key_file = \"../xxx/xxx.p8\" role = \"xxx\" warehouse = \"xxx\" database = \"xxx\" schema = \"xxx\"priority_highImportantYour account identifier must be hyphen-separated:<my_organization>-<my_account>. This is the general-purpose identifier format and not the period-separated format used within SQL statements.In the example above, the connection uses key-pair authentication. Therefore,private_key_fileis defined instead ofpassword.private_key_filecan be an absolute or relative path. If you use a relative path, it should be relative to your app's working directory (where you executestreamlit run).", "prev_chunk_id": "chunk_1201", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1203", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Option 2: Use .snowflake/connections.toml", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Option 2: Use .snowflake/connections.toml", "content": "Option 2: Use .snowflake/connections.toml If you already have your connection configured using Snowflake's connections file, you can use it as-is. If you are using a default connection, no change is needed in later steps of this tutorial. If you are using a named connection, you will need to include the name in st.connection. This is noted in a later step. For information about using named connections, see the examples in the API reference for SnowflakeConnnection. - If you don't already have a.snowflake/configuration.tomlfile in your user directory, create an empty connections file. - Add your connection parameters to.snowflake/connection.toml:[default] account = \"xxxxxxx-xxxxxxx\" user = \"xxx\" private_key_file = \"../xxx/xxx.p8\" role = \"xxx\" warehouse = \"xxx\" database = \"xxx\" schema = \"xxx\"This example uses key-pair authentication as described in the previous option.", "prev_chunk_id": "chunk_1202", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1204", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app - Copy the following code to your Streamlit app and save it. If you are not using the example database and table from the first section of this tutorial, replace the SQL query and results handling as appropriate.# streamlit_app.py import streamlit as st conn = st.connection(\"snowflake\") df = conn.query(\"SELECT * FROM mytable;\", ttl=\"10m\") for row in df.itertuples(): st.write(f\"{row.NAME} has a :{row.PET}:\")Thest.connectioncommand creates aSnowflakeConnectionobject and handles secrets retrieval. The.query()method handles query caching and retries. By default, query results are cached without expiring. Settingttl=\"10m\"ensures that the query result is cached for no longer than 10 minutes. To disable caching, you can setttl=0instead. Learn more inCaching.push_pinNoteIf you configured your connection using a named connection in.snowflake/connections.tomlinstead of[default](Option 2 above), you must include your connection name inst.connection. If you have[my_connection]in your connections file, replace the line withst.connectionas follows:conn = st.connection(\"my_connection\", type=\"snowflake\") - In your working directory, open a terminal, and run your Streamlit app.streamlit run streamlit_app.pyIf everything worked out (and you used the example table from the first section), your app should look like this: The SnowflakeConnection used above also provides access to Snowpark sessions for dataframe-style operations that run natively inside Snowflake. Using this approach, you can rewrite the app above as follows: Because this example uses .session() instead of .query(), caching is added manually for better performance and efficiency. If everything worked out (and you used the example table from the first section), your app should look the same as the preceding screenshot.", "prev_chunk_id": "chunk_1203", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1205", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Use a Snowpark session", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Use a Snowpark session", "content": "Use a Snowpark session The SnowflakeConnection used above also provides access to Snowpark sessions for dataframe-style operations that run natively inside Snowflake. Using this approach, you can rewrite the app above as follows: Because this example uses .session() instead of .query(), caching is added manually for better performance and efficiency. If everything worked out (and you used the example table from the first section), your app should look the same as the preceding screenshot.", "prev_chunk_id": "chunk_1204", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1206", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Connecting to Snowflake from Community Cloud", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Connecting to Snowflake from Community Cloud", "content": "Connecting to Snowflake from Community Cloud This tutorial assumes a local Streamlit app, however you can also connect to Snowflake from apps hosted in Community Cloud. The main additional steps are: - Include information about dependenciesusing arequirements.txtfile withsnowflake-snowpark-pythonand any other dependencies. - Add your secretsto your Community Cloud app. You must use the.streamlit/secrets.tomlformat described inOption 1above.", "prev_chunk_id": "chunk_1205", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1207", "url": "https://docs.streamlit.io/develop/tutorials/databases/snowflake", "title": "Still have questions?", "page_title": "Connect Streamlit to Snowflake - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1206", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1208", "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql", "title": "Introduction", "page_title": "Connect Streamlit to MySQL - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a remote MySQL database from Streamlit Community Cloud. It uses st.connection and Streamlit's Secrets management. The below example code will only work on Streamlit version >= 1.28, when st.connection was added.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1209", "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql", "title": "Create a MySQL database", "page_title": "Connect Streamlit to MySQL - Streamlit Docs", "breadcrumbs": "Create a MySQL database", "content": "Create a MySQL database First, follow this tutorial to install MySQL and start the MySQL server (note down the username and password!). Once your MySQL server is up and running, connect to it with the mysql client and enter the following commands to create a database and a table with some example values:", "prev_chunk_id": "chunk_1208", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1210", "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql", "title": "Add username and password to your local app secrets", "page_title": "Connect Streamlit to MySQL - Streamlit Docs", "breadcrumbs": "Add username and password to your local app secrets", "content": "Add username and password to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Learn more about Streamlit secrets management here. Create this file if it doesn't exist yet and add the database name, user, and password of your MySQL server as shown below: If you use query when defining your connection, you must use streamlit>=1.35.0.", "prev_chunk_id": "chunk_1209", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1211", "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to MySQL - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1210", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1212", "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql", "title": "Add dependencies to your requirements file", "page_title": "Connect Streamlit to MySQL - Streamlit Docs", "breadcrumbs": "Add dependencies to your requirements file", "content": "Add dependencies to your requirements file Add the mysqlclient and SQLAlchemy packages to your requirements.txt file, preferably pinning its version (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1211", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1213", "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to MySQL - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt query to use the name of your table. See st.connection above? This handles secrets retrieval, setup, query caching and retries. By default, query() results are cached without expiring. In this case, we set ttl=600 to ensure the query result is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. If everything worked out (and you used the example table we created above), your app should look like this:", "prev_chunk_id": "chunk_1212", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1214", "url": "https://docs.streamlit.io/develop/tutorials/databases/mysql", "title": "Still have questions?", "page_title": "Connect Streamlit to MySQL - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1213", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1215", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Create a dynamic navigation menu", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Create a dynamic navigation menu", "content": "Create a dynamic navigation menu st.navigation makes it easy to build dynamic navigation menus. You can change the set of pages passed to st.navigation with each rerun, which changes the navigation menu to match. This is a convenient feature for creating custom, role-based navigation menus. This tutorial uses st.navigation and st.Page, which were introduced in Streamlit version 1.36.0. For an older workaround using the pages/ directory and st.page_link, see Build a custom navigation menu with st.page_link.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1216", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Applied concepts", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Usest.navigationandst.Pageto define a multipage app. - Create a dynamic, role-based navigation menu.", "prev_chunk_id": "chunk_1215", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1217", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Prerequisites", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.36.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding ofst.navigationandst.Page.", "prev_chunk_id": "chunk_1216", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1218", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Summary", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, we'll build a dynamic navigation menu for a multipage app that depends on the current user's role. You'll abstract away the use of username and credentials to simplify the example. Instead, you'll use a selectbox to let users choose a role and log in. The entrypoint file, streamlit_app.py will handle user authentication. The other pages will be stubs representing account management (settings.py) and specific pages associated to three roles: Requester, Responder, and Admin. Requesters can access the account and request pages. Responders can access the account and respond pages. Admins can access all pages. Here's a look at what we'll build:", "prev_chunk_id": "chunk_1217", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1219", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Initialize your app", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedstreamlit_app.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run streamlit_app.pyYour app will be blank because you still need to add code. - Instreamlit_app.py, write the following:import streamlit as st - Save yourstreamlit_app.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes tostreamlit_app.py. - Return to your code.", "prev_chunk_id": "chunk_1218", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1220", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Add your page and image files", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Add your page and image files", "content": "Add your page and image files - Inyour_repositoy, create a file namedsettings.py. - Insettings.pyadd the following stub.import streamlit as st st.header(\"Settings\") st.write(f\"You are logged in as {st.session_state.role}.\")In later steps, you'll create an authentication method that saves the current user's role tost.session_state.role. Since you'll be blocking access to this page until a user is logged in, you don't need to initialize the\"role\"key in Session State for this page. - Create similar stubs by changing the value ofst.headerfor the following six pages:your-repository/ ├── admin │ ├── admin_1.py │ └── admin_2.py ├── request │ ├── request_1.py │ └── request_2.py └── respond ├── respond_1.py └── respond_2.pyFor example,admin/admin_1.pyshould be the following:import streamlit as st st.header(\"Admin 1\") st.write(f\"You are logged in as {st.session_state.role}.\") - Create animagessubdirectory inyour-repositoryand add the following two files:horizontal_blue.pngicon_blue.pngYou now have all the files needed to build your app.", "prev_chunk_id": "chunk_1219", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1221", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Initialize global values", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Initialize global values", "content": "Initialize global values - Return tostreamlit_app.pyand initialize\"role\"in Session State.if \"role\" not in st.session_state: st.session_state.role = NoneYou will use this value to gatekeep access to your app. This represents the role of the current, authenticated user. - Define the available roles.ROLES = [None, \"Requester\", \"Responder\", \"Admin\"]Noneis included as a role since that is the value corresponding to an unauthenticated user.", "prev_chunk_id": "chunk_1220", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1222", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Define your user authentication pages", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Define your user authentication pages", "content": "Define your user authentication pages st.navigation lets you define pages from Python functions. Here, you'll define the login and logout pages from Python functions. - Begin your login page (function definition).def login(): - Add a header for the page.st.header(\"Log in\") - Create a selectbox for the user to choose a role.role = st.selectbox(\"Choose your role\", ROLES) - Add a button to commit the user role to Session State.if st.button(\"Log in\"): st.session_state.role = role st.rerun()This is an abstraction of an authentication workflow. When a user clicks the button, Streamlit saves the role to Session State and reruns the app. In later steps, you'll add logic to direct users to a role's default page when the value changes inst.session_state.role. This completes your login page function. - Begin your logout page (function definition).def logout(): - Immediately set the role toNoneand rerun the app.st.session_state.role = None st.rerun()Since the lougout page function immediately updates Session State and reruns, a user will never view this page. The page will execute in a fraction of a second and, upon rerunning, the app will send the user to the login page. Therefore, no additional elements are rendered on the page. If desired, you can change this page to also include a button, similar to the login page. A button would allow users to confirm they really intend to log out.", "prev_chunk_id": "chunk_1221", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1223", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Define all your pages", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Define all your pages", "content": "Define all your pages - As a convenience, savest.session_state.roleto a variable.role = st.session_state.role - Define your account pages.logout_page = st.Page(logout, title=\"Log out\", icon=\":material/logout:\") settings = st.Page(\"settings.py\", title=\"Settings\", icon=\":material/settings:\")This gives each page a nice title and icon to make your navigation menu look neat and clean. - Define your request pages.request_1 = st.Page( \"request/request_1.py\", title=\"Request 1\", icon=\":material/help:\", default=(role == \"Requester\"), ) request_2 = st.Page( \"request/request_2.py\", title=\"Request 2\", icon=\":material/bug_report:\" )If you don't manually declare a default page inst.navigation, then the first page will automatically be the default. The first page in the menu will be \"Log out\" within an \"Account\" section of the menu. Therefore, you'll need to tell Streamlit what page each user should be directed to by default.This code dynamically setsdefault=Truewhen the role is \"Requester\" and sets it toFalse, otherwise. - Define your remaining pages.respond_1 = st.Page( \"respond/respond_1.py\", title=\"Respond 1\", icon=\":material/healing:\", default=(role == \"Responder\"), ) respond_2 = st.Page( \"respond/respond_2.py\", title=\"Respond 2\", icon=\":material/handyman:\" ) admin_1 = st.Page( \"admin/admin_1.py\", title=\"Admin 1\", icon=\":material/person_add:\", default=(role == \"Admin\"), ) admin_2 = st.Page(\"admin/admin_2.py\", title=\"Admin 2\", icon=\":material/security:\")Similar to the request pages, thedefaultparameter is set for the other roles' default pages. - Group your pages into convenient lists.account_pages = [logout_page, settings] request_pages = [request_1, request_2] respond_pages = [respond_1, respond_2] admin_pages = [admin_1, admin_2]These are all the pages available to logged-in users.", "prev_chunk_id": "chunk_1222", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1224", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Define your common elements and navigation", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Define your common elements and navigation", "content": "Define your common elements and navigation - Add a title to show on all pages.st.title(\"Request manager\")Since you're calling the title command in your entrypoint file, this title will be visible on all pages. Elements created in your entrypoint file create a frame of common elements around all your pages. - Add a logo to your app.st.logo(\"images/horizontal_blue.png\", icon_image=\"images/icon_blue.png\")Once again, since you're calling this command in your entrypoint file, you won't need to also call it within each page. - Initialize a dictionary of page lists.page_dict = {}In the next step, you'll check the user's role and add pages to the dictionary that the user is allowed to access. Whenst.navigationreceives a dictionary of page lists, it creates a navigation menu with groups of pages and section headers. - Build the dictionary of allowed pages by checking the user's role.if st.session_state.role in [\"Requester\", \"Admin\"]: page_dict[\"Request\"] = request_pages if st.session_state.role in [\"Responder\", \"Admin\"]: page_dict[\"Respond\"] = respond_pages if st.session_state.role == \"Admin\": page_dict[\"Admin\"] = admin_pages - Check if the user is allowed to access any pages and add the account pages if they are.if len(page_dict) > 0: pg = st.navigation({\"Account\": account_pages} | page_dict)Ifpage_dictis not empty, then the user is logged in. The|operator merges the two dictionaries, adding the account pages to the beginning. - Fallback to the login page if the user isn't logged in.else: pg = st.navigation([st.Page(login)]) - Execute the page returned byst.navigation.pg.run() - Save yourstreamlit_app.pyfile and view your app!Try logging in, switching pages, and logging out. Try again with a different role.", "prev_chunk_id": "chunk_1223", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1225", "url": "https://docs.streamlit.io/develop/tutorials/multipage/dynamic-navigation", "title": "Still have questions?", "page_title": "Create a dynamic navigation menu - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1224", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1226", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Dataframes", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Dataframes", "content": "Dataframes Dataframes are a great way to display and edit data in a tabular format. Working with Pandas DataFrames and other tabular data structures is key to data science workflows. If developers and data scientists want to display this data in Streamlit, they have multiple options: st.dataframe and st.data_editor. If you want to solely display data in a table-like UI, st.dataframe is the way to go. If you want to interactively edit data, use st.data_editor. We explore the use cases and advantages of each option in the following sections.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1227", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Display dataframes with st.dataframe", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Display dataframes with st.dataframe", "content": "Display dataframes with st.dataframe Streamlit can display dataframes in a table-like UI via st.dataframe :", "prev_chunk_id": "chunk_1226", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1228", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "st.dataframe UI features", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "st.dataframe UI features", "content": "st.dataframe UI features st.dataframe provides additional functionality by using glide-data-grid under the hood: - Column sorting: To sort columns, select their headers, or select \"Sort ascending\" or \"Sort descending\" from the header menu (more_vert). - Column resizing: To resize columns, drag and drop column header borders, or select \"Autosize\" from the header menu. - Column hiding: To hide columns, select \"Hide column\" from the header menu. - Reorder and pin columns: To reorder columns or pin them on the left, drag and drop column headers or select \"Pin column\" from the header menu, respectively. - Format numbers, dates, and times: To change the format of numeric columns, select an option under \"Format\" in the header menu. - Dataframe resizing: To resize dataframes, drag and drop the bottom right corner. - Fullscreen view: To enlarge dataframes to fullscreen, select the fullscreen icon (fullscreen) in the toolbar. - Search: To search through the data, select the search icon (search) in the toolbar or use hotkeys (⌘+ForCtrl+F). - Download: To download the data as a CSV file, select the download icon (download) in the toolbar. - Copy to clipboard: To copy the data to the clipboard, select one or multiple cells, use the hotkeys (⌘+CorCtrl+C), and paste them into your favorite spreadsheet software. Try out all the UI features using the embedded app from the prior section. In addition to Pandas DataFrames, st.dataframe also supports other common Python types, e.g., list, dict, or numpy array. It also supports Snowpark and PySpark DataFrames, which allow you to lazily evaluate and pull data from databases. This can be useful for working with large datasets.", "prev_chunk_id": "chunk_1227", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1229", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Edit data with st.data_editor", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Edit data with st.data_editor", "content": "Edit data with st.data_editor Streamlit supports editable dataframes via the st.data_editor command. Check out its API in st.data_editor. It shows the dataframe in a table, similar to st.dataframe. But in contrast to st.dataframe, this table isn't static! The user can click on cells and edit them. The edited data is then returned on the Python side. Here's an example: Try it out by double-clicking on any cell. You'll notice you can edit all cell values. Try editing the values in the rating column and observe how the text output at the bottom changes:", "prev_chunk_id": "chunk_1228", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1230", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "st.data_editor UI features", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "st.data_editor UI features", "content": "st.data_editor UI features st.data_editor also supports a few additional things: - Add and delete rows: You can do this by settingnum_rows= \"dynamic\"when callingst.data_editor. This will allow users to add and delete rows as needed. - Copy and paste support: Copy and paste both betweenst.data_editorand spreadsheet software like Google Sheets and Excel. - Access edited data: Access only the individual edits instead of the entire edited data structure via Session State. - Bulk edits: Similar to Excel, just drag a handle to edit neighboring cells. - Automatic input validation: Column Configuration provides strong data type support and other configurable options. For example, there's no way to enter letters into a number cell. Number cells can have a designated min and max. - Edit common data structures:st.data_editorsupports lists, dicts, NumPy ndarray, and more!", "prev_chunk_id": "chunk_1229", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1231", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Add and delete rows", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Add and delete rows", "content": "Add and delete rows With st.data_editor, viewers can add or delete rows via the table UI. This mode can be activated by setting the num_rows parameter to \"dynamic\": - To add new rows, click the plus icon (add) in the toolbar. Alternatively, click inside a shaded cell below the bottom row of the table. - To delete rows, select one or more rows using the checkboxes on the left. Click the delete icon (delete) or press thedeletekey on your keyboard.", "prev_chunk_id": "chunk_1230", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1232", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Copy and paste support", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Copy and paste support", "content": "Copy and paste support The data editor supports pasting in tabular data from Google Sheets, Excel, Notion, and many other similar tools. You can also copy-paste data between st.data_editor instances. This functionality, powered by the Clipboard API, can be a huge time saver for users who need to work with data across multiple platforms. To try it out: - Copy data fromthis Google Sheets documentto your clipboard. - Single click any cell in thenamecolumn in the app above. Paste it in using hotkeys (⌘+VorCtrl+V).", "prev_chunk_id": "chunk_1231", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1233", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Access edited data", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Access edited data", "content": "Access edited data Sometimes, it is more convenient to know which cells have been changed rather than getting the entire edited dataframe back. Streamlit makes this easy through the use of Session State. If a key parameter is set, Streamlit will store any changes made to the dataframe in Session State. This snippet shows how you can access changed data using Session State: In this code snippet, the key parameter is set to \"my_key\". After the data editor is created, the value associated to \"my_key\" in Session State is displayed in the app using st.write. This shows the additions, edits, and deletions that were made. This can be useful when working with large dataframes and you only need to know which cells have changed, rather than access the entire edited dataframe. Use all we've learned so far and apply them to the above embedded app. Try editing cells, adding new rows, and deleting rows. Notice how edits to the table are reflected in Session State. When you make any edits, a rerun is triggered which sends the edits to the backend. The widget's state is a JSON object containing three properties: edited_rows, added_rows, and deleted rows:. - edited_rowsis a dictionary containing all edits. Keys are zero-based row indices and values are dictionaries that map column names to edits (e.g.{0: {\"col1\": ..., \"col2\": ...}}). - added_rowsis a list of newly added rows. Each value is a dictionary with the same format as above (e.g.[{\"col1\": ..., \"col2\": ...}]). - deleted_rowsis a list of row numbers that have been deleted from the table (e.g.[0, 2]). st.data_editor does not support reordering rows, so added rows will always be appended to the end of the dataframe with any edits and deletions applicable to the original rows.", "prev_chunk_id": "chunk_1232", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1234", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Bulk edits", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Bulk edits", "content": "Bulk edits The data editor includes a feature that allows for bulk editing of cells. Similar to Excel, you can drag a handle across a selection of cells to edit their values in bulk. You can even apply commonly used keyboard shortcuts in spreadsheet software. This is useful when you need to make the same change across multiple cells, rather than editing each cell individually.", "prev_chunk_id": "chunk_1233", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1235", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Edit common data structures", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Edit common data structures", "content": "Edit common data structures Editing doesn't just work for Pandas DataFrames! You can also edit lists, tuples, sets, dictionaries, NumPy arrays, or Snowpark & PySpark DataFrames. Most data types will be returned in their original format. But some types (e.g. Snowpark and PySpark) are converted to Pandas DataFrames. To learn about all the supported types, read the st.data_editor API. For example, you can easily let the user add items to a list: Or numpy arrays: Or lists of records: Or dictionaries and many more types!", "prev_chunk_id": "chunk_1234", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1236", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Automatic input validation", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Automatic input validation", "content": "Automatic input validation The data editor includes automatic input validation to help prevent errors when editing cells. For example, if you have a column that contains numerical data, the input field will automatically restrict the user to only entering numerical data. This helps to prevent errors that could occur if the user were to accidentally enter a non-numerical value. Additional input validation can be configured through the Column configuration API. Keep reading below for an overview of column configuration, including validation options.", "prev_chunk_id": "chunk_1235", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1237", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Configuring columns", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Configuring columns", "content": "Configuring columns You can configure the display and editing behavior of columns in st.dataframe and st.data_editor via the Column configuration API. We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor columns. Additionally, you can make individual columns editable, set columns as categorical and specify which options they can take, hide the index of the dataframe, and much more. Column configuration includes the following column types: Text, Number, Checkbox, Selectbox, Date, Time, Datetime, List, Link, Image, Line chart, Bar chart, and Progress. There is also a generic Column option. See the embedded app below to view these different column types. Each column type is individually previewed in the Column configuration API documentation.", "prev_chunk_id": "chunk_1236", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1238", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Format values", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Format values", "content": "Format values A format parameter is available in column configuration for Text, Date, Time, and Datetime columns. Chart-like columns can also be formatted. Line chart and Bar chart columns have a y_min and y_max parameters to set the vertical bounds. For a Progress column, you can declare the horizontal bounds with min_value and max_value.", "prev_chunk_id": "chunk_1237", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1239", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Validate input", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Validate input", "content": "Validate input When specifying a column configuration, you can declare not only the data type of the column but also value restrictions. All column configuration elements allow you to make a column required with the keyword parameter required=True. For Text and Link columns, you can specify the maximum number of characters with max_chars or use regular expressions to validate entries through validate. Numerical columns, including Number, Date, Time, and Datetime have min_value and max_value parameters. Selectbox columns have a configurable list of options. The data type for Number columns is float by default. Passing a value of type int to any of min_value, max_value, step, or default will set the type for the column as int.", "prev_chunk_id": "chunk_1238", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1240", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Configure an empty dataframe", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Configure an empty dataframe", "content": "Configure an empty dataframe You can use st.data_editor to collect tabular input from a user. When starting from an empty dataframe, default column types are text. Use column configuration to specify the data types you want to collect from users.", "prev_chunk_id": "chunk_1239", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1241", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Additional formatting options", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Additional formatting options", "content": "Additional formatting options In addition to column configuration, st.dataframe and st.data_editor have a few more parameters to customize the display of your dataframe. - hide_index: Set toTrueto hide the dataframe's index. - column_order: Pass a list of column labels to specify the order of display. - disabled: Pass a list of column labels to disable them from editing. This let's you avoid disabling them individually.", "prev_chunk_id": "chunk_1240", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1242", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Handling large datasets", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Handling large datasets", "content": "Handling large datasets st.dataframe and st.data_editor have been designed to theoretically handle tables with millions of rows thanks to their highly performant implementation using the glide-data-grid library and HTML canvas. However, the maximum amount of data that an app can realistically handle will depend on several other factors, including: - The maximum size of WebSocket messages: Streamlit's WebSocket messages are configurable via theserver.maxMessageSizeconfig option, which limits the amount of data that can be transferred via the WebSocket connection at once. - The server memory: The amount of data that your app can handle will also depend on the amount of memory available on your server. If the server's memory is exceeded, the app may become slow or unresponsive. - The user's browser memory: Since all the data needs to be transferred to the user's browser for rendering, the amount of memory available on the user's device can also affect the app's performance. If the browser's memory is exceeded, it may crash or become unresponsive. In addition to these factors, a slow network connection can also significantly slow down apps that handle large datasets. When handling large datasets with more than 150,000 rows, Streamlit applies additional optimizations and disables column sorting. This can help to reduce the amount of data that needs to be processed at once and improve the app's performance.", "prev_chunk_id": "chunk_1241", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1243", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Limitations", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Limitations", "content": "Limitations - Streamlit casts all column names to strings internally, sost.data_editorwill return a DataFrame where all column names are strings. - The dataframe toolbar is not currently configurable. - While Streamlit's data editing capabilities offer a lot of functionality, editing is enabled for a limited set of column types (TextColumn,NumberColumn,LinkColumn,CheckboxColumn,SelectboxColumn,DateColumn,TimeColumn, andDatetimeColumn). We are actively working on supporting editing for other column types as well, such as images, lists, and charts. - Almost all editable datatypes are supported for index editing. However,pandas.CategoricalIndexandpandas.MultiIndexare not supported for editing. - Sorting is not supported forst.data_editorwhennum_rows=\"dynamic\". - Sorting is deactivated to optimize performance on large datasets with more than 150,000 rows. We are continually working to improve Streamlit's handling of DataFrame and add functionality to data editing, so keep an eye out for updates.", "prev_chunk_id": "chunk_1242", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1244", "url": "https://docs.streamlit.io/develop/concepts/design/dataframes", "title": "Still have questions?", "page_title": "Dataframes - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1243", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1245", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-file-streamlit", "title": "How to download a file in Streamlit?", "page_title": "How to download a file in Streamlit? - Streamlit Docs", "breadcrumbs": "How to download a file in Streamlit?", "content": "How to download a file in Streamlit? Use the st.download_button widget that is natively built into Streamlit. Check out a sample app demonstrating how you can use st.download_button to download common file formats.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1246", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-file-streamlit", "title": "Example usage", "page_title": "How to download a file in Streamlit? - Streamlit Docs", "breadcrumbs": "Example usage", "content": "Example usage Additional resources: - https://blog.streamlit.io/0-88-0-release-notes/ - https://streamlit-release-demos-0-88streamlit-app-0-88-v8ram3.streamlit.app/ - https://docs.streamlit.io/develop/api-reference/widgets/st.download_button", "prev_chunk_id": "chunk_1245", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1247", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/how-download-file-streamlit", "title": "Still have questions?", "page_title": "How to download a file in Streamlit? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1246", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1248", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Get started with app testing", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Get started with app testing", "content": "Get started with app testing This guide will cover a simple example of how tests are structured within a project and how to execute them with pytest. After seeing the big picture, keep reading to learn about the Fundamentals of app testing: - Initializing and running a simulated app - Retrieving elements - Manipulating widgets - Inspecting the results Streamlit's app testing framework is not tied to any particular testing tool, but we'll use pytest for our examples since it is one of the most common Python test frameworks. To try out the examples in this guide, be sure to install pytest into your Streamlit development environment before you begin:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1249", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "A simple testing example with pytest", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "A simple testing example with pytest", "content": "A simple testing example with pytest This section explains how a simple test is structured and executed with pytest. For a comprehensive introduction to pytest, check out Real Python's guide to Effective Python testing with pytest.", "prev_chunk_id": "chunk_1248", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1250", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "How pytest is structured", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "How pytest is structured", "content": "How pytest is structured pytest uses a naming convention for files and functions to execute tests conveniently. Name your test scripts of the form test_<name>.py or <name>_test.py. For example, you can use test_myapp.py or myapp_test.py. Within your test scripts, each test is written as a function. Each function is named to begin or end with test. We will prefix all our test scripts and test functions with test_ for our examples in this guide. You can write as many tests (functions) within a single test script as you want. When calling pytest in a directory, all test_<name>.py files within it will be used for testing. This includes files within subdirectories. Each test_<something> function within those files will be executed as a test. You can place test files anywhere in your project directory, but it is common to collect tests into a designated tests/ directory. For other ways to structure and execute tests, check out How to invoke pytest in the pytest docs.", "prev_chunk_id": "chunk_1249", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1251", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Example project with app testing", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Example project with app testing", "content": "Example project with app testing Consider the following project: Main app file: Testing file: Let's take a quick look at what's in this app and test before we run it. The main app file (app.py) contains four elements when rendered: st.title, st.number_input, st.button, and st.markdown. The test script (test_app.py) includes a single test (the function named test_increment_and_add). We'll cover test syntax in more detail in the latter half of this guide, but here's a brief explanation of what this test does: - Initialize the simulated app and execute the first script run.at = AppTest.from_file(\"app.py\").run() - Simulate a user clicking the plus icon (add) to increment the number input (and the resulting script rerun).at.number_input[0].increment().run() - Simulate a user clicking the \"Add\" button (and the resulting script rerun).at.button[0].click().run() - Check if the correct message is displayed at the end.assert at.markdown[0].value == \"Beans counted: 1\" Assertions are the heart of tests. When the assertion is true, the test passes. When the assertion is false, the test fails. A test can have multiple assertions, but keeping tests tightly focused is good practice. When tests focus on a single behavior, it is easier to understand and respond to failure.", "prev_chunk_id": "chunk_1250", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1252", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Try out a simple test with pytest", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Try out a simple test with pytest", "content": "Try out a simple test with pytest - Copy the files above into a new \"myproject\" directory. - Open a terminal and change directory to your project.cd myproject - Executepytest:pytest The test should execute successfully. Your terminal should show something like this: By executing pytest at the root of your project directory, all Python files with the test prefix (test_<name>.py) will be scanned for test functions. Within each test file, each function with the test prefix will be executed as a test. pytest then counts successes and itemizes failures. You can also direct pytest to only scan your testing directory. For example, from the root of your project directory, execute:", "prev_chunk_id": "chunk_1251", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1253", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Handling file paths and imports with pytest", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Handling file paths and imports with pytest", "content": "Handling file paths and imports with pytest Imports and paths within a test script should be relative to the directory where pytest is called. That is why the test function uses the path app.py instead of ../app.py even though the app file is one directory up from the test script. You'll usually call pytest from the directory containing your main app file. This is typically the root of your project directory. Additionally, if .streamlit/ is present in the directory where you call pytest, any config.toml and secrets.toml within it will be accessible to your simulated app. For example, your simulated app will have access to the config.toml and secrets.toml files in this common setup: Project structure: Initialization within test_app.py: Command to execute tests:", "prev_chunk_id": "chunk_1252", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1254", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Fundamentals of app testing", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Fundamentals of app testing", "content": "Fundamentals of app testing Now that you understand the basics of pytest let's dive into using Streamlit's app testing framework. Every test begins with initializing and running your simulated app. Additional commands are used to retrieve, manipulate, and inspect elements. On the next page, we'll go Beyond the basics and cover more advanced scenarios like working with secrets, Session State, or multipage apps.", "prev_chunk_id": "chunk_1253", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1255", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "How to initialize and run a simulated app", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "How to initialize and run a simulated app", "content": "How to initialize and run a simulated app To test a Streamlit app, you must first initialize an instance of AppTest with the code for one page of your app. There are three methods for initializing a simulated app. These are provided as class methods to AppTest. We will focus on AppTest.from_file() which allows you to provide a path to a page of your app. This is the most common scenario for building automated tests during app development. AppTest.from_string() and AppTest.from_function() may be helpful for some simple or experimental scenarios. Let's continue with the example from above. Recall the testing file: Look at the first line in the test function: This is doing two things and is equivalent to: AppTest.from_file() returns an instance of AppTest, initialized with the contents of app.py. The .run() method is used to run the app for the first time. Looking at the test, notice that the .run() method manually executes each script run. A test must explicitly run the app each time. This applies to the app's first run and any rerun resulting from simulated user input.", "prev_chunk_id": "chunk_1254", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1256", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "How to retrieve elements", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "How to retrieve elements", "content": "How to retrieve elements The attributes of the AppTest class return sequences of elements. The elements are sorted according to display order in the rendered app. Specific elements can be retrieved by index. Additionally, widgets with keys can be retrieved by key.", "prev_chunk_id": "chunk_1255", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1257", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Retrieve elements by index", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Retrieve elements by index", "content": "Retrieve elements by index Each attribute of AppTest returns a sequence of the associated element type. Specific elements can be retrieved by index. In the above example, at.number_input returns a sequence of all st.number_input elements in the app. Thus, at.number_input[0] is the first such element in the app. Similarly, at.markdown returns a collection of all st.markdown elements where at.markdown[0] is the first such element. Check out the current list of supported elements in the \"Attributes\" section of the AppTest class or the App testing cheat sheet. You can also use the .get() method and pass the attribute's name. at.get(\"number_input\") and at.get(\"markdown\") are equivalent to at.number_input and at.markdown, respectively. The returned sequence of elements is ordered by appearance on the page. If containers are used to insert elements in a different order, these sequences may not match the order within your code. Consider the following example where containers are used to switch the order of two buttons on the page: If the above app was tested, the first button (at.button[0]) would be labeled \"B\" and the second button (at.button[1]) would be labeled \"A.\" As true assertions, these would be:", "prev_chunk_id": "chunk_1256", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1258", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Retrieve widgets by key", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Retrieve widgets by key", "content": "Retrieve widgets by key You can retrieve keyed widgets by their keys instead of their order on the page. The key of the widget is passed as either an arg or kwarg. For example, look at this app and the following (true) assertions:", "prev_chunk_id": "chunk_1257", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1259", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Retrieve containers", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Retrieve containers", "content": "Retrieve containers You can also narrow down your sequences of elements by retrieving specific containers. Each retrieved container has the same attributes as AppTest. For example, at.sidebar.checkbox returns a sequence of all checkboxes in the sidebar. at.main.selectbox returns the sequence of all selectboxes in the main body of the app (not in the sidebar). For AppTest.columns and AppTest.tabs, a sequence of containers is returned. So at.columns[0].button would be the sequence of all buttons in the first column appearing in the app.", "prev_chunk_id": "chunk_1258", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1260", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "How to manipulate widgets", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "How to manipulate widgets", "content": "How to manipulate widgets All widgets have a universal .set_value() method. Additionally, many widgets have specific methods for manipulating their value. The names of Testing element classes closely match the names of the AppTest attributes. For example, look at the return type of AppTest.button to see the corresponding class of Button. Aside from setting the value of a button with .set_value(), you can also use .click(). Check out each testing element class for its specific methods.", "prev_chunk_id": "chunk_1259", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1261", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "How to inspect elements", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "How to inspect elements", "content": "How to inspect elements All elements, including widgets, have a universal .value property. This returns the contents of the element. For widgets, this is the same as the return value or value in Session State. For non-input elements, this will be the value of the primary contents argument. For example, .value returns the value of body for st.markdown or st.error. It returns the value of data for st.dataframe or st.table. Additionally, you can check many other details for widgets like labels or disabled status. Many parameters are available for inspection, but not all. Use linting software to see what is currently supported. Here's an example:", "prev_chunk_id": "chunk_1260", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1262", "url": "https://docs.streamlit.io/develop/concepts/app-testing/get-started", "title": "Still have questions?", "page_title": "Get started with app testing - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1261", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1263", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Manage your app", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Manage your app", "content": "Manage your app You can manage your deployed app from your workspace at share.streamlit.io or directly from <your-custom-subdomain>.streamlit.app. You can view, deploy, delete, reboot, or favorite an app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1264", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Manage your app from your workspace", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Manage your app from your workspace", "content": "Manage your app from your workspace Streamlit Community Cloud is organized into workspaces, which automatically group your apps according to their repository's owner in GitHub. Your workspace is indicated in the upper-left corner. For more information, see Switching workspaces. To deploy or manage any app, always switch to the workspace matching the repository's owner first.", "prev_chunk_id": "chunk_1263", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1265", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Sort your apps", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Sort your apps", "content": "Sort your apps If you have many apps in your workspace, you can pin apps to the top by marking them as favorite (star). For more information, see Favorite your app.", "prev_chunk_id": "chunk_1264", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1266", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "App overflow menus", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "App overflow menus", "content": "App overflow menus Each app has a menu accessible from the overflow icon (more_vert) to the right. - Edit with Codespaces— SeeEdit your app with GitHub Codespaces - Reboot— SeeReboot your app - Delete— SeeDelete your app - Analytics— SeeApp analytics - Settings— SeeApp settings If you have view-only access to an app, all options in the app's menu will be disabled except analytics.", "prev_chunk_id": "chunk_1265", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1267", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Manage your app directly from your app", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Manage your app directly from your app", "content": "Manage your app directly from your app You can manage your deployed app directly from the app itself! Just make sure you are signed in to Community Cloud, and then visit your app.", "prev_chunk_id": "chunk_1266", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1268", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Cloud logs", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Cloud logs", "content": "Cloud logs - From your app at<your-custom-subdomain>.streamlit.app, click \"Manage app\" in the lower-right corner. - Once you've clicked on \"Manage app\", you will be able to view your app's logs. This is your primary place to troubleshoot any issues with your app. - You can access more developer options by clicking the overflow icon (more_vert) at the bottom of your Cloud logs. To conveniently download your logs, click \"Download log.\"", "prev_chunk_id": "chunk_1267", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1269", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "App chrome", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "App chrome", "content": "App chrome From your app at <your-custom-subdomain>.streamlit.app, you can always access the app chrome just like you can when developing locally. The option to deploy your app is removed, but you can still clear your cache from here.", "prev_chunk_id": "chunk_1268", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1270", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Update your app", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Update your app", "content": "Update your app Your GitHub repository is the source for your app, so that means that any time you push an update to your repository you'll see it reflected in the app in almost real time. Try it out! Streamlit also smartly detects whether you touched your dependencies, in which case it will automatically do a full redeploy for you—which will take a little more time. But since most updates don't involve dependency changes, you should usually see your app update in real time.", "prev_chunk_id": "chunk_1269", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1271", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Add or remove dependencies", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Add or remove dependencies", "content": "Add or remove dependencies To add or remove dependencies at any point, just update requirements.txt (Python dependenciess) or packages.txt (Linux dependencies), and commit the changes to your repository on GitHub. Community Cloud detects the change in your dependencies and automatically triggers (re)installation. It is best practice to pin your Streamlit version in requirements.txt. Otherwise, the version may be auto-upgraded at any point without your knowledge, which could lead to undesired results (e.g. when we deprecate a feature in Streamlit).", "prev_chunk_id": "chunk_1270", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1272", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Resource limits", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Resource limits", "content": "Resource limits All Community Cloud users have access to the same resources and are subject to the same limits. These limits may change at any time without notice. If your app meets or exceeds its limits, it may slow down from throttling or become nonfunctional. The limits as of February 2024 are approximately as follows: - CPU: 0.078 cores minimum, 2 cores maximum - Memory: 690MB minimum, 2.7GBs maximum - Storage: No minimum, 50GB maximum Symptoms that your app is running out of resources include the following: - Your app is running slowly. - Your app displays \"🤯 This app has gone over its resource limits.\" - Your app displays \"😦 Oh no.\"", "prev_chunk_id": "chunk_1271", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1273", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Good for the world", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Good for the world", "content": "Good for the world Streamlit offers increased resources for apps with good-for-the-world use cases. Generally, these apps are used by an educational institution or nonprofit organization, are part of an open-source project, or benefit the world in some way. If your app is not primarily used by a for-profit company you can apply for increased resources.", "prev_chunk_id": "chunk_1272", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1274", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Optimizing your app", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Optimizing your app", "content": "Optimizing your app If your app is running slow or showing the error pages mentioned above, we first highly recommend going through and implementing the suggestions in the following blog posts to prevent your app from hitting the resource limits and to detect if your Streamlit app leaks memory: - Common app problems: Resource limits - 3 steps to fix app memory leaks If your app exceeds its resource limits, developers and viewers alike will see \"😦 Oh no.\" If see \"😦 Oh no.\" when viewing your app, first check your Cloud logs for any specific errors. If there are no errors in your Cloud logs you are likely dealing with a resource issue.", "prev_chunk_id": "chunk_1273", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1275", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Developer view", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Developer view", "content": "Developer view If you are signed in to a developer account for an app over its limits, you can access \"Manage app\" from the lower-right corner of the app to reboot it and clear its memory. \"Manage app\" will be red and have a warning icon (error).", "prev_chunk_id": "chunk_1274", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1276", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "App hibernation", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "App hibernation", "content": "App hibernation All apps without traffic for 12 hours go to sleep. Community Cloud hibernates apps to conserve resources and allow the best communal use of the platform. To keep your app awake, simply visit your app. When someone visits a sleeping app, they will see the sleeping page: To wake the app up, click \"Yes, get this app back up!\" This can be done by anyone who has access to view the app, not just the app developer! You can see which of your apps are asleep from your workspace. Sleeping apps have a moon icon (bedtime) to the right.", "prev_chunk_id": "chunk_1275", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1277", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app", "title": "Still have questions?", "page_title": "Manage your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1276", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1278", "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph", "title": "Introduction", "page_title": "Connect Streamlit to TigerGraph - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a TigerGraph database from Streamlit Community Cloud. It uses the pyTigerGraph library and Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1279", "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph", "title": "Create a TigerGraph Cloud Database", "page_title": "Connect Streamlit to TigerGraph - Streamlit Docs", "breadcrumbs": "Create a TigerGraph Cloud Database", "content": "Create a TigerGraph Cloud Database First, follow the official tutorials to create a TigerGraph instance in TigerGraph Cloud, either as a blog or a video. Note your username, password, and subdomain. For this tutorial, we will be using the COVID-19 starter kit. When setting up your solution, select the “COVID-19 Analysis\" option. Once it is started, ensure your data is downloaded and queries are installed.", "prev_chunk_id": "chunk_1278", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1280", "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph", "title": "Add username and password to your local app secrets", "page_title": "Connect Streamlit to TigerGraph - Streamlit Docs", "breadcrumbs": "Add username and password to your local app secrets", "content": "Add username and password to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app’s root directory. Create this file if it doesn’t exist yet and add your TigerGraph Cloud instance username, password, graph name, and subdomain as shown below:", "prev_chunk_id": "chunk_1279", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1281", "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to TigerGraph - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1280", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1282", "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph", "title": "Add PyTigerGraph to your requirements file", "page_title": "Connect Streamlit to TigerGraph - Streamlit Docs", "breadcrumbs": "Add PyTigerGraph to your requirements file", "content": "Add PyTigerGraph to your requirements file Add the pyTigerGraph package to your requirements.txt file, preferably pinning its version (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1281", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1283", "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to TigerGraph - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt the name of your graph and query. See st.cache_data above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With st.cache_data, it only runs when the query changes or after 10 minutes (that's what ttl is for). Watch out: If your database updates more frequently, you should adapt ttl or remove caching so viewers always see the latest data. Learn more in Caching. If everything worked out (and you used the example data we created above), your app should look like this:", "prev_chunk_id": "chunk_1282", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1284", "url": "https://docs.streamlit.io/develop/tutorials/databases/tigergraph", "title": "Still have questions?", "page_title": "Connect Streamlit to TigerGraph - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1283", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1285", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Introduction", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction The advent of large language models like GPT has revolutionized the ease of developing chat-based applications. Streamlit offers several Chat elements, enabling you to build Graphical User Interfaces (GUIs) for conversational agents or chatbots. Leveraging session state along with these elements allows you to construct anything from a basic chatbot to a more advanced, ChatGPT-like experience using purely Python code. In this tutorial, we'll start by walking through Streamlit's chat elements, st.chat_message and st.chat_input. Then we'll proceed to construct three distinct applications, each showcasing an increasing level of complexity and functionality: - First, we'llBuild a bot that mirrors your inputto get a feel for the chat elements and how they work. We'll also introducesession stateand how it can be used to store the chat history. This section will serve as a foundation for the rest of the tutorial. - Next, you'll learn how toBuild a simple chatbot GUI with streaming. - Finally, we'llBuild a ChatGPT-like appthat leverages session state to remember conversational context, all within less than 50 lines of code. Here's a sneak peek of the LLM-powered chatbot GUI with streaming we'll build in this tutorial: Play around with the above demo to get a feel for what we'll build in this tutorial. A few things to note: - There's a chat input at the bottom of the screen that's always visible. It contains some placeholder text. You can type in a message and press Enter or click the run button to send it. - When you enter a message, it appears as a chat message in the container above. The container is scrollable, so you can scroll up to see previous messages. A default avatar is displayed to your messages' left. - The assistant's responses are streamed to the frontend and are displayed with a different default", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1286", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Introduction", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Introduction", "content": "avatar. Before we start building, let's take a closer look at the chat elements we'll use.", "prev_chunk_id": "chunk_1285", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1287", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Chat elements", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Chat elements", "content": "Chat elements Streamlit offers several commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately. st.chat_message lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. st.chat_input lets you display a chat input widget so the user can type in a message. For an overview of the API, check out this video tutorial by Chanin Nantasenamat (@dataprofessor), a Senior Developer Advocate at Streamlit.", "prev_chunk_id": "chunk_1286", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1288", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "st.chat_message", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "st.chat_message", "content": "st.chat_message st.chat_message lets you insert a multi-element chat message container into your app. The returned container can contain any Streamlit element, including charts, tables, text, and more. To add elements to the returned container, you can use with notation. st.chat_message's first parameter is the name of the message author, which can be either \"user\" or \"assistant\" to enable preset styling and avatars, like in the demo above. You can also pass in a custom string to use as the author name. Currently, the name is not shown in the UI but is only set as an accessibility label. For accessibility reasons, you should not use an empty string. Here's an minimal example of how to use st.chat_message to display a welcome message: Notice the message is displayed with a default avatar and styling since we passed in \"user\" as the author name. You can also pass in \"assistant\" as the author name to use a different default avatar and styling, or pass in a custom name and avatar. See the API reference for more details. While we've used the preferred with notation in the above examples, you can also just call methods directly in the returned objects. The below example is equivalent to the one above: So far, we've displayed predefined messages. But what if we want to display messages based on user input?", "prev_chunk_id": "chunk_1287", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1289", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "st.chat_input", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "st.chat_input", "content": "st.chat_input st.chat_input lets you display a chat input widget so the user can type in a message. The returned value is the user's input, which is None if the user hasn't sent a message yet. You can also pass in a default prompt to display in the input widget. Here's an example of how to use st.chat_input to display a chat input widget and show the user's input: Pretty straightforward, right? Now let's combine st.chat_message and st.chat_input to build a bot the mirrors or echoes your input.", "prev_chunk_id": "chunk_1288", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1290", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Build a bot that mirrors your input", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Build a bot that mirrors your input", "content": "Build a bot that mirrors your input In this section, we'll build a bot that mirrors or echoes your input. More specifically, the bot will respond to your input with the same message. We'll use st.chat_message to display the user's input and st.chat_input to accept user input. We'll also use session state to store the chat history so we can display it in the chat message container. First, let's think about the different components we'll need to build our bot: - Two chat message containers to display messages from the user and the bot, respectively. - A chat input widget so the user can type in a message. - A way to store the chat history so we can display it in the chat message containers. We can use a list to store the messages, and append to it every time the user or bot sends a message. Each entry in the list will be a dictionary with the following keys:role(the author of the message), andcontent(the message content). In the above snippet, we've added a title to our app and a for loop to iterate through the chat history and display each message in the chat message container (with the author role and message content). We've also added a check to see if the messages key is in st.session_state. If it's not, we initialize it to an empty list. This is because we'll be adding messages to the list later on, and we don't want to overwrite the list every time the app reruns. Now let's accept user input with st.chat_input, display the user's message in the chat message container, and add it to the chat history. We used the := operator to assign the user's input to the prompt variable and checked if it's not None in the same", "prev_chunk_id": "chunk_1289", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1291", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Build a bot that mirrors your input", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Build a bot that mirrors your input", "content": "line. If the user has sent a message, we display the message in the chat message container and append it to the chat history. All that's left to do is add the chatbot's responses within the if block. We'll use the same logic as before to display the bot's response (which is just the user's prompt) in the chat message container and add it to the history. Putting it all together, here's the full code for our simple chatbot GUI and the result: While the above example is very simple, it's a good starting point for building more complex conversational apps. Notice how the bot responds instantly to your input. In the next section, we'll add a delay to simulate the bot \"thinking\" before responding.", "prev_chunk_id": "chunk_1290", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1292", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Build a simple chatbot GUI with streaming", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Build a simple chatbot GUI with streaming", "content": "Build a simple chatbot GUI with streaming In this section, we'll build a simple chatbot GUI that responds to user input with a random message from a list of pre-determind responses. In the next section, we'll convert this simple toy example into a ChatGPT-like experience using OpenAI. Just like previously, we still require the same components to build our chatbot. Two chat message containers to display messages from the user and the bot, respectively. A chat input widget so the user can type in a message. And a way to store the chat history so we can display it in the chat message containers. Let's just copy the code from the previous section and add a few tweaks to it. The only difference so far is we've changed the title of our app and added imports for random and time. We'll use random to randomly select a response from a list of responses and time to add a delay to simulate the chatbot \"thinking\" before responding. All that's left to do is add the chatbot's responses within the if block. We'll use a list of responses and randomly select one to display. We'll also add a delay to simulate the chatbot \"thinking\" before responding (or stream its response). Let's make a helper function for this and insert it at the top of our app. Back to writing the response in our chat interface, we'll use st.write_stream to write out the streamed response with a typewriter effect. Above, we've added a placeholder to display the chatbot's response. We've also added a for loop to iterate through the response and display it one word at a time. We've added a delay of 0.05 seconds between each word to simulate the chatbot \"thinking\" before responding. Finally, we append the chatbot's response to the", "prev_chunk_id": "chunk_1291", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1293", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Build a simple chatbot GUI with streaming", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Build a simple chatbot GUI with streaming", "content": "chat history. As you've probably guessed, this is a naive implementation of streaming. We'll see how to implement streaming with OpenAI in the next section. Putting it all together, here's the full code for our simple chatbot GUI and the result: Play around with the above demo to get a feel for what we've built. It's a very simple chatbot GUI, but it has all the components of a more sophisticated chatbot. In the next section, we'll see how to build a ChatGPT-like app using OpenAI.", "prev_chunk_id": "chunk_1292", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1294", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Build a ChatGPT-like app", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Build a ChatGPT-like app", "content": "Build a ChatGPT-like app Now that you've understood the basics of Streamlit's chat elements, let's make a few tweaks to it to build our own ChatGPT-like app. You'll need to install the OpenAI Python library and get an API key to follow along.", "prev_chunk_id": "chunk_1293", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1295", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Install dependencies", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Install dependencies", "content": "Install dependencies First let's install the dependencies we'll need for this section:", "prev_chunk_id": "chunk_1294", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1296", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Add OpenAI API key to Streamlit secrets", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Add OpenAI API key to Streamlit secrets", "content": "Add OpenAI API key to Streamlit secrets Next, let's add our OpenAI API key to Streamlit secrets. We do this by creating .streamlit/secrets.toml file in our project directory and adding the following lines to it:", "prev_chunk_id": "chunk_1295", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1297", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Write the app", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Write the app", "content": "Write the app Now let's write the app. We'll use the same code as before, but we'll replace the list of responses with a call to the OpenAI API. We'll also add a few more tweaks to make the app more ChatGPT-like. All that's changed is that we've added a default model to st.session_state and set our OpenAI API key from Streamlit secrets. Here's where it gets interesting. We can replace our emulated stream with the model's responses from OpenAI: Above, we've replaced the list of responses with a call to OpenAI().chat.completions.create. We've set stream=True to stream the responses to the frontend. In the API call, we pass the model name we hardcoded in session state and pass the chat history as a list of messages. We also pass the role and content of each message in the chat history. Finally, OpenAI returns a stream of responses (split into chunks of tokens), which we iterate through and display each chunk. Putting it all together, here's the full code for our ChatGPT-like app and the result: Congratulations! You've built your own ChatGPT-like app in less than 50 lines of code. We're very excited to see what you'll build with Streamlit's chat elements. Experiment with different models and tweak the code to build your own conversational apps. If you build something cool, let us know on the Forum or check out some other Generative AI apps for inspiration. 🎈", "prev_chunk_id": "chunk_1296", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1298", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps", "title": "Still have questions?", "page_title": "Build a basic LLM chat app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1297", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1299", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Introduction", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a remote TiDB database from Streamlit Community Cloud. It uses st.connection and Streamlit's Secrets management. The below example code will only work on Streamlit version >= 1.28, when st.connection was added. TiDB is an open-source, MySQL-compatible database that supports Hybrid Transactional and Analytical Processing (HTAP) workloads. TiDB introducs a built-in vector search to the SQL database family, enabling support for your AI applications without requiring a new database or additional technical stacks. TiDB Cloud is a fully managed cloud database service that simplifies the deployment and management of TiDB databases for developers.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1300", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Sign in to TiDB Cloud and create a cluster", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Sign in to TiDB Cloud and create a cluster", "content": "Sign in to TiDB Cloud and create a cluster First, head over to TiDB Cloud and sign up for a free account, using either Google, GitHub, Microsoft or E-mail: Once you've signed in, you will already have a TiDB cluster: You can create more clusters if you want to. Click the cluster name to enter cluster overview page: Then click Connect to easily get the connection arguments to access the cluster. On the popup, click Generate Password to set the password.", "prev_chunk_id": "chunk_1299", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1301", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Create a TiDB database", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Create a TiDB database", "content": "Create a TiDB database Once your TiDB cluster is up and running, connect to it with the mysql client(or with SQL Editor tab on the console) and enter the following commands to create a database and a table with some example values:", "prev_chunk_id": "chunk_1300", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1302", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Add username and password to your local app secrets", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Add username and password to your local app secrets", "content": "Add username and password to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Learn more about Streamlit secrets management here. Create this file if it doesn't exist yet and add host, username and password of your TiDB cluster as shown below:", "prev_chunk_id": "chunk_1301", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1303", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1302", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1304", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Add dependencies to your requirements file", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Add dependencies to your requirements file", "content": "Add dependencies to your requirements file Add the mysqlclient and SQLAlchemy packages to your requirements.txt file, preferably pinning its version (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1303", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1305", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt query to use the name of your table. See st.connection above? This handles secrets retrieval, setup, query caching and retries. By default, query() results are cached without expiring. In this case, we set ttl=600 to ensure the query result is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. If everything worked out (and you used the example table we created above), your app should look like this:", "prev_chunk_id": "chunk_1304", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1306", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Connect with PyMySQL", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Connect with PyMySQL", "content": "Connect with PyMySQL Other than mysqlclient, PyMySQL is another popular MySQL Python client. To use PyMySQL, first you need to adapt your requirements file: Then adapt your secrets file:", "prev_chunk_id": "chunk_1305", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1307", "url": "https://docs.streamlit.io/develop/tutorials/databases/tidb", "title": "Still have questions?", "page_title": "Connect Streamlit to TiDB - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1306", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1308", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Introduction", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access data on Tableau from Streamlit Community Cloud. It uses the tableauserverclient library and Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1309", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Create a Tableau site", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Create a Tableau site", "content": "Create a Tableau site For simplicity, we are using the cloud version of Tableau here but this guide works equally well for self-hosted deployments. First, sign up for Tableau Online or log in. Create a workbook or run one of the example workbooks under \"Dashboard Starters\".", "prev_chunk_id": "chunk_1308", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1310", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Create personal access tokens", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Create personal access tokens", "content": "Create personal access tokens While the Tableau API allows authentication via username and password, you should use personal access tokens for a production app. Go to your Tableau Online homepage, create an access token and note down the token name and secret.", "prev_chunk_id": "chunk_1309", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1311", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Add token to your local app secrets", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Add token to your local app secrets", "content": "Add token to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add your token, the site name you created during setup, and the URL of your Tableau server like below:", "prev_chunk_id": "chunk_1310", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1312", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1311", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1313", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Add tableauserverclient to your requirements file", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Add tableauserverclient to your requirements file", "content": "Add tableauserverclient to your requirements file Add the tableauserverclient package to your requirements.txt file, preferably pinning its version (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1312", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1314", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Note that this code just shows a few options of data you can get – explore the tableauserverclient library to find more! See st.cache_data above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With st.cache_data, it only runs when the query changes or after 10 minutes (that's what ttl is for). Watch out: If your database updates more frequently, you should adapt ttl or remove caching so viewers always see the latest data. Learn more in Caching. If everything worked out, your app should look like this (can differ based on your workbooks):", "prev_chunk_id": "chunk_1313", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1315", "url": "https://docs.streamlit.io/develop/tutorials/databases/tableau", "title": "Still have questions?", "page_title": "Connect Streamlit to Tableau - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1314", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1316", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Introduction", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a Supabase instance from Streamlit Community Cloud. It uses st.connection, Streamlit Supabase Connector (a community-built connection developed by @SiddhantSadangi) and Streamlit's Secrets management. Supabase is the open source Firebase alternative and is based on PostgreSQL.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1317", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Sign in to Supabase and create a project", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Sign in to Supabase and create a project", "content": "Sign in to Supabase and create a project First, head over to Supabase and sign up for a free account using your GitHub. Once you're signed in, you can create a project. Your screen should look like this once your project has been created:", "prev_chunk_id": "chunk_1316", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1318", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Create a Supabase database", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Create a Supabase database", "content": "Create a Supabase database Now that you have a project, you can create a database and populate it with some sample data. To do so, click on the SQL editor button on the same project page, followed by the New query button in the SQL editor. In the SQL editor, enter the following queries to create a database and a table with some example values: Click Run to execute the queries. To verify that the queries were executed successfully, click on the Table Editor button on the left menu, followed by your newly created table mytable. With your Supabase database created, you can now connect to it from Streamlit!", "prev_chunk_id": "chunk_1317", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1319", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Add Supabase Project URL and API key to your local app secrets", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Add Supabase Project URL and API key to your local app secrets", "content": "Add Supabase Project URL and API key to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the SUPABASE_URL and SUPABASE_KEY here: Replace xxxx above with your Project URL and API key from Step 1.", "prev_chunk_id": "chunk_1318", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1320", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1319", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1321", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Add st-supabase-connection to your requirements file", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Add st-supabase-connection to your requirements file", "content": "Add st-supabase-connection to your requirements file Add the st-supabase-connection community-built connection library to your requirements.txt file, preferably pinning its version (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1320", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1322", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. See st.connection above? This handles secrets retrieval, setup, query caching and retries. By default, query() results are cached without expiring. In this case, we set ttl=\"10m\" to ensure the query result is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. If everything worked out (and you used the example table we created above), your app should look like this: As Supabase uses PostgresSQL under the hood, you can also connect to Supabase by using the connection string Supabase provides under Settings > Databases. From there, you can refer to the PostgresSQL tutorial to connect to your database.", "prev_chunk_id": "chunk_1321", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1323", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Using the Supabase Python Client Library", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Using the Supabase Python Client Library", "content": "Using the Supabase Python Client Library If you prefer to use the Supabase Python Client Library directly, you can do so by following the steps below. - Add your Supabase Project URL and API key to your local app secrets:Your local Streamlit app will read secrets from a file.streamlit/secrets.tomlin your app's root directory. Create this file if it doesn't exist yet and add the SUPABASE_URL and SUPABASE_KEY here:# .streamlit/secrets.toml SUPABASE_URL = \"xxxx\" SUPABASE_KEY = \"xxxx\" - Addsupabaseto your requirements file:Add thesupabasePython Client Library to yourrequirements.txtfile, preferably pinning its version (replacex.x.xwith the version you want installed):# requirements.txt supabase==x.x.x - Write your Streamlit app:Copy the code below to your Streamlit app and run it.# streamlit_app.py import streamlit as st from supabase import create_client, Client # Initialize connection. # Uses st.cache_resource to only run once. @st.cache_resource def init_connection(): url = st.secrets[\"SUPABASE_URL\"] key = st.secrets[\"SUPABASE_KEY\"] return create_client(url, key) supabase = init_connection() # Perform query. # Uses st.cache_data to only rerun when the query changes or after 10 min. @st.cache_data(ttl=600) def run_query(): return supabase.table(\"mytable\").select(\"*\").execute() rows = run_query() # Print results. for row in rows.data: st.write(f\"{row['name']} has a :{row['pet']}:\")Seest.cache_dataabove? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). Withst.cache_data, it only runs when the query changes or after 10 minutes (that's whatttlis for). Watch out: If your database updates more frequently, you should adaptttlor remove caching so viewers always see the latest data. Learn more inCaching.", "prev_chunk_id": "chunk_1322", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1324", "url": "https://docs.streamlit.io/develop/tutorials/databases/supabase", "title": "Still have questions?", "page_title": "Connect Streamlit to Supabase - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1323", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1325", "url": "https://docs.streamlit.io/develop/concepts/design/timezone-handling", "title": "Working with timezones", "page_title": "Working with timezones - Streamlit Docs", "breadcrumbs": "Working with timezones", "content": "Working with timezones In general, working with timezones can be tricky. Your Streamlit app users are not necessarily in the same timezone as the server running your app. It is especially true of public apps, where anyone in the world (in any timezone) can access your app. As such, it is crucial to understand how Streamlit handles timezones, so you can avoid unexpected behavior when displaying datetime information.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1326", "url": "https://docs.streamlit.io/develop/concepts/design/timezone-handling", "title": "How Streamlit handles timezones", "page_title": "Working with timezones - Streamlit Docs", "breadcrumbs": "How Streamlit handles timezones", "content": "How Streamlit handles timezones Streamlit always shows datetime information on the frontend with the same information as its corresponding datetime instance in the backend. I.e., date or time information does not automatically adjust to the users' timezone. We distinguish between the following two cases:", "prev_chunk_id": "chunk_1325", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1327", "url": "https://docs.streamlit.io/develop/concepts/design/timezone-handling", "title": "datetime instance without a timezone (naive)", "page_title": "Working with timezones - Streamlit Docs", "breadcrumbs": "datetime instance without a timezone (naive)", "content": "datetime instance without a timezone (naive) When you provide a datetime instance without specifying a timezone, the frontend shows the datetime instance without timezone information. For example (this also applies to other widgets like st.dataframe): Users of the above app always see the output as 2020-01-10 10:30:00.", "prev_chunk_id": "chunk_1326", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1328", "url": "https://docs.streamlit.io/develop/concepts/design/timezone-handling", "title": "datetime instance with a timezone", "page_title": "Working with timezones - Streamlit Docs", "breadcrumbs": "datetime instance with a timezone", "content": "datetime instance with a timezone When you provide a datetime instance and specify a timezone, the frontend shows the datetime instance in that same timezone. For example (this also applies to other widgets like st.dataframe): Users of the above app always see the output as 2020-01-10 10:30:00-05:00. In both cases, neither the date nor time information automatically adjusts to the users' timezone on the frontend. What users see is identical to the corresponding datetime instance in the backend. It is currently not possible to automatically adjust the date or time information to the timezone of the users viewing the app.", "prev_chunk_id": "chunk_1327", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1329", "url": "https://docs.streamlit.io/develop/concepts/design/timezone-handling", "title": "Still have questions?", "page_title": "Working with timezones - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1328", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1330", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/enable-camera", "title": "Enabling camera or microphone access in your browser", "page_title": "Enabling camera or microphone access in your browser - Streamlit Docs", "breadcrumbs": "Enabling camera or microphone access in your browser", "content": "Enabling camera or microphone access in your browser Streamlit apps may include a widget to upload images from your camera or record sound with your microphone. To safeguard the users' privacy and security, browsers require users to explicitly allow access to their camera or microphone before those devices can be used. To learn how to enable camera access, please check the documentation for your browser: - Chrome - Safari - Firefox", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1331", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/enable-camera", "title": "Still have questions?", "page_title": "Enabling camera or microphone access in your browser - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1330", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1332", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Using custom Python classes in your Streamlit app", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Using custom Python classes in your Streamlit app", "content": "Using custom Python classes in your Streamlit app If you are building a complex Streamlit app or working with existing code, you may have custom Python classes defined in your script. Common examples include the following: - Defining a@dataclassto store related data within your app. - Defining anEnumclass to represent a fixed set of options or values. - Defining custom interfaces to external services or databases not covered byst.connection. Because Streamlit reruns your script after every user interaction, custom classes may be redefined multiple times within the same Streamlit session. This may result in unwanted effects, especially with class and instance comparisons. Read on to understand this common pitfall and how to avoid it. We begin by covering some general-purpose patterns you can use for different types of custom classes, and follow with a few more technical details explaining why this matters. Finally, we go into more detail about Using Enum classes specifically, and describe a configuration option which can make them more convenient.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1333", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Pattern 1: Define your class in a separate module", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Pattern 1: Define your class in a separate module", "content": "Pattern 1: Define your class in a separate module This is the recommended, general solution. If possible, move class definitions into their own module file and import them into your app script. As long as you are not editing the files that define your app, Streamlit will not re-import those classes with each rerun. Therefore, if a class is defined in an external file and imported into your script, the class will not be redefined during the session, unless you are actively editing your app.", "prev_chunk_id": "chunk_1332", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1334", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Example: Move your class definition", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Example: Move your class definition", "content": "Example: Move your class definition Try running the following Streamlit app where MyClass is defined within the page's script. isinstance() will return True on the first script run then return False on each rerun thereafter. If you move the class definition out of app.py into another file, you can make isinstance() consistently return True. Consider the following file structure: Streamlit only reloads code in imported modules when it detects the code has changed. Thus, if you are actively editing your app code, you may need to start a new session or restart your Streamlit server to avoid an undesirable class redefinition.", "prev_chunk_id": "chunk_1333", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1335", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Pattern 2: Force your class to compare internal values", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Pattern 2: Force your class to compare internal values", "content": "Pattern 2: Force your class to compare internal values For classes that store data (like dataclasses), you may be more interested in comparing the internally stored values rather than the class itself. If you define a custom __eq__ method, you can force comparisons to be made on the internally stored values.", "prev_chunk_id": "chunk_1334", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1336", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Example: Define __eq__", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Example: Define __eq__", "content": "Example: Define __eq__ Try running the following Streamlit app and observe how the comparison is True on the first run then False on every rerun thereafter. Since MyDataclass gets redefined with each rerun, the instance stored in Session State will not be equal to any instance defined in a later script run. You can fix this by forcing a comparison of internal values as follows: The default Python __eq__ implementation for a regular class or @dataclass depends on the in-memory ID of the class or class instance. To avoid problems in Streamlit, your custom __eq__ method should not depend the type() of self and other.", "prev_chunk_id": "chunk_1335", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1337", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Pattern 3: Store your class as serialized data", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Pattern 3: Store your class as serialized data", "content": "Pattern 3: Store your class as serialized data Another option for classes that store data is to define serialization and deserialization methods like to_str and from_str for your class. You can use these to store class instance data in st.session_state rather than storing the class instance itself. Similar to pattern 2, this is a way to force comparison of the internal data and bypass the changing in-memory IDs.", "prev_chunk_id": "chunk_1336", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1338", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Example: Save your class instance as a string", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Example: Save your class instance as a string", "content": "Example: Save your class instance as a string Using the same example from pattern 2, this can be done as follows:", "prev_chunk_id": "chunk_1337", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1339", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Pattern 4: Use caching to preserve your class", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Pattern 4: Use caching to preserve your class", "content": "Pattern 4: Use caching to preserve your class For classes that are used as resources (database connections, state managers, APIs), consider using the cached singleton pattern. Use @st.cache_resource to decorate a @staticmethod of your class to generate a single, cached instance of the class. For example: When you use one of Streamlit's caching decorators on a function, Streamlit doesn't use the function object to look up cached values. Instead, Streamlit's caching decorators index return values using the function's qualified name and module. So, even though Streamlit redefines MyResource with each script run, st.cache_resource is unaffected by this. get_resource_manager() will return its cached value with each rerun, until the value expires.", "prev_chunk_id": "chunk_1338", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1340", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Understanding how Python defines and compares classes", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Understanding how Python defines and compares classes", "content": "Understanding how Python defines and compares classes So what's really happening here? We'll consider a simple example to illustrate why this is a pitfall. Feel free to skip this section if you don't want to deal more details. You can jump ahead to learn about Using Enum classes.", "prev_chunk_id": "chunk_1339", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1341", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Example: What happens when you define the same class twice?", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Example: What happens when you define the same class twice?", "content": "Example: What happens when you define the same class twice? Set aside Streamlit for a moment and think about this simple Python script: In this example, the dataclass Student is defined twice. All three Marshalls have the same internal values. If you compare Marshall_A and Marshall_B they will be equal because they were both created from the first definition of Student. However, if you compare Marshall_A and Marshall_C they will not be equal because Marshall_C was created from the second definition of Student. Even though both Student dataclasses are defined exactly the same, they have different in-memory IDs and are therefore different.", "prev_chunk_id": "chunk_1340", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1342", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "What's happening in Streamlit?", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "What's happening in Streamlit?", "content": "What's happening in Streamlit? In Streamlit, you probably don't have the same class written twice in your page script. However, the rerun logic of Streamlit creates the same effect. Let's use the above example for an analogy. If you define a class in one script run and save an instance in Session State, then a later rerun will redefine the class and you may end up comparing a Mashall_C in your rerun to a Marshall_A in Session State. Since widgets rely on Session State under the hood, this is where things can get confusing.", "prev_chunk_id": "chunk_1341", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1343", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "How Streamlit widgets store options", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "How Streamlit widgets store options", "content": "How Streamlit widgets store options Several Streamlit UI elements, such as st.selectbox or st.radio, accept multiple-choice options via an options argument. The user of your application can typically select one or more of these options. The selected value is returned by the widget function. For example: When you call a function like st.selectbox and pass an Iterable to options, the Iterable and current selection are saved into a hidden portion of Session State called the Widget Metadata. When the user of your application interacts with the st.selectbox widget, the broswer sends the index of their selection to your Streamlit server. This index is used to determine which values from the original options list, saved in the Widget Metadata from the previous page execution, are returned to your application. The key detail is that the value returned by st.selectbox (or similar widget function) is from an Iterable saved in Session State during a previous execution of the page, NOT the values passed to options on the current execution. There are a number of architectural reasons why Streamlit is designed this way, which we won't go into here. However, this is how we end up comparing instances of different classes when we think we are comparing instances of the same class.", "prev_chunk_id": "chunk_1342", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1344", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "A pathological example", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "A pathological example", "content": "A pathological example The above explanation might be a bit confusing, so here's a pathological example to illustrate the idea. As a final note, we used @dataclass in the example for this section to illustrate a point, but in fact it is possible to encounter these same problems with classes, in general. Any class which checks class identity inside of a comparison operator—such as __eq__ or __gt__—can exhibit these issues.", "prev_chunk_id": "chunk_1343", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1345", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Using Enum classes in Streamlit", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Using Enum classes in Streamlit", "content": "Using Enum classes in Streamlit The Enum class from the Python standard library is a powerful way to define custom symbolic names that can be used as options for st.multiselect or st.selectbox in place of str values. For example, you might add the following to your streamlit page: If you're using the latest version of Streamlit, this Streamlit page will work as it appears it should. When a user picks both Color.RED and Color.GREEN, they are shown the special message. However, if you've read the rest of this page you might notice something tricky going on. Specifically, the Enum class Color gets redefined every time this script is run. In Python, if you define two Enum classes with the same class name, members, and values, the classes and their members are still considered unique from each other. This should cause the above if condition to always evaluate to False. In any script rerun, the Color values returned by st.multiselect would be of a different class than the Color defined in that script run. If you run the snippet above with Streamlit version 1.28.0 or less, you will not be able see the special message. Thankfully, as of version 1.29.0, Streamlit introduced a configuration option to greatly simplify the problem. That's where the enabled-by-default enumCoercion configuration option comes in.", "prev_chunk_id": "chunk_1344", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1346", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Understanding the enumCoercion configuration option", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Understanding the enumCoercion configuration option", "content": "Understanding the enumCoercion configuration option When enumCoercion is enabled, Streamlit tries to recognize when you are using an element like st.multiselect or st.selectbox with a set of Enum members as options. If Streamlit detects this, it will convert the widget's returned values to members of the Enum class defined in the latest script run. This is something we call automatic Enum coercion. This behavior is configurable via the enumCoercion setting in your Streamlit config.toml file. It is enabled by default, and may be disabled or set to a stricter set of matching criteria. If you find that you still encounter issues with enumCoercion enabled, consider using the custom class patterns described above, such as moving your Enum class definition to a separate module file.", "prev_chunk_id": "chunk_1345", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1347", "url": "https://docs.streamlit.io/develop/concepts/design/custom-classes", "title": "Still have questions?", "page_title": "Using custom Python classes in your Streamlit app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1346", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1348", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "Multithreading in Streamlit", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "Multithreading in Streamlit", "content": "Multithreading in Streamlit Multithreading is a type of concurrency, which improves the efficiency of computer programs. It's a way for processors to multitask. Streamlit uses threads within its architecture, which can make it difficult for app developers to include their own multithreaded processes. Streamlit does not officially support multithreading in app code, but this guide provides information on how it can be accomplished.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1349", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "Prerequisites", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - You should have a basic understanding of Streamlit'sarchitecture.", "prev_chunk_id": "chunk_1348", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1350", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "When to use multithreading", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "When to use multithreading", "content": "When to use multithreading Multithreading is just one type of concurrency. Multiprocessing and coroutines are other forms of concurrency. You need to understand how your code is bottlenecked to choose the correct kind of concurrency. Multiprocessing is inherently parallel, meaning that resources are split and multiple tasks are performed simultaneously. Therefore, multiprocessing is helpful with compute-bound operations. In contrast, multithreading and coroutines are not inherently parallel and instead allow resource switching. This makes them good choices when your code is stuck waiting for something, like an IO operation. AsyncIO uses coroutines and may be preferable with very slow IO operations. Threading may be preferable with faster IO operations. For a helpful guide to using AsyncIO with Streamlit, see this Medium article by Sehmi-Conscious Thoughts. Don't forget that Streamlit has fragments and caching, too! Use caching to avoid unnecessarily repeating computations or IO operations. Use fragments to isolate a bit of code you want to update separately from the rest of the app. You can set fragments to rerun at a specified interval, so they can be used to stream updates to a chart or table.", "prev_chunk_id": "chunk_1349", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1351", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "Threads created by Streamlit", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "Threads created by Streamlit", "content": "Threads created by Streamlit Streamlit creates two types of threads in Python: - Theserver threadruns the Tornado web (HTTP + WebSocket) server. - Ascript threadruns page code — one thread for each script run in a session. When a user connects to your app, this creates a new session and runs a script thread to initialize the app for that user. As the script thread runs, it renders elements in the user's browser tab and reports state back to the server. When the user interacts with the app, another script thread runs, re-rendering the elements in the browser tab and updating state on the server. This is a simplifed illustration to show how Streamlit works:", "prev_chunk_id": "chunk_1350", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1352", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "streamlit.errors.NoSessionContext", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "streamlit.errors.NoSessionContext", "content": "streamlit.errors.NoSessionContext Many Streamlit commands, including st.session_state, expect to be called from a script thread. When Streamlit is running as expected, such commands use the ScriptRunContext attached to the script thread to ensure they work within the intended session and update the correct user's view. When those Streamlit commands can't find any ScriptRunContext, they raise a streamlit.errors.NoSessionContext exception. Depending on your logger settings, you may also see a console message identifying a thread by name and warning, \"missing ScriptRunContext!\"", "prev_chunk_id": "chunk_1351", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1353", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "Creating custom threads", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "Creating custom threads", "content": "Creating custom threads When you work with IO-heavy operations like remote query or data loading, you may need to mitigate delays. A general programming strategy is to create threads and let them work concurrently. However, if you do this in a Streamlit app, these custom threads may have difficulty interacting with your Streamlit server. This section introduces two patterns to let you create custom threads in your Streamlit app. These are only patterns to provide a starting point rather than complete solutions.", "prev_chunk_id": "chunk_1352", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1354", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "Option 1: Do not use Streamlit commands within a custom thread", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "Option 1: Do not use Streamlit commands within a custom thread", "content": "Option 1: Do not use Streamlit commands within a custom thread If you don't call Streamlit commands from a custom thread, you can avoid the problem entirely. Luckily Python threading provides ways to start a thread and collect its result from another thread. In the following example, five custom threads are created from the script thread. After the threads are finished running, their results are displayed in the app. If you want to display results in your app as various custom threads finish running, use containers. In the following example, five custom threads are created similarly to the previous example. However, five containers are initialized before running the custom threads and a while loop is used to display results as they become available. Since the Streamlit write command is called outside of the custom threads, this does not raise an exception.", "prev_chunk_id": "chunk_1353", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1355", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "Option 2: Expose ScriptRunContext to the thread", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "Option 2: Expose ScriptRunContext to the thread", "content": "Option 2: Expose ScriptRunContext to the thread If you want to call Streamlit commands from within your custom threads, you must attach the correct ScriptRunContext to the thread. In the following example, a custom thread with ScriptRunContext attached can call st.write without a warning.", "prev_chunk_id": "chunk_1354", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1356", "url": "https://docs.streamlit.io/develop/concepts/design/multithreading", "title": "Still have questions?", "page_title": "Threading in Streamlit - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1355", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1357", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Summary", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary Buttons created with st.button do not retain state. They return True on the script rerun resulting from their click and immediately return to False on the next script rerun. If a displayed element is nested inside if st.button('Click me'):, the element will be visible when the button is clicked and disappear as soon as the user takes their next action. This is because the script reruns and the button return value becomes False. In this guide, we will illustrate the use of buttons and explain common misconceptions. Read on to see a variety of examples that expand on st.button using st.session_state. Anti-patterns are included at the end. Go ahead and pull up your favorite code editor so you can streamlit run the examples as you read. Check out Streamlit's Basic concepts if you haven't run your own Streamlit scripts yet.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1358", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "When to use if st.button()", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "When to use if st.button()", "content": "When to use if st.button() When code is conditioned on a button's value, it will execute once in response to the button being clicked and not again (until the button is clicked again). Good to nest inside buttons: - Transient messages that immediately disappear. - Once-per-click processes that saves data to session state, a file, or a database. Bad to nest inside buttons: - Displayed items that should persist as the user continues. - Other widgets which cause the script to rerun when used. - Processes that neither modify session state nor write to a file/database.* * This can be appropriate when disposable results are desired. If you have a \"Validate\" button, that could be a process conditioned directly on a button. It could be used to create an alert to say 'Valid' or 'Invalid' with no need to keep that info.", "prev_chunk_id": "chunk_1357", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1359", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Show a temporary message with a button", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Show a temporary message with a button", "content": "Show a temporary message with a button If you want to give the user a quick button to check if an entry is valid, but not keep that check displayed as the user continues. In this example, a user can click a button to check if their animal string is in the animal_shelter list. When the user clicks \"Check availability\" they will see \"We have that animal!\" or \"We don't have that animal.\" If they change the animal in st.text_input, the script reruns and the message disappears until they click \"Check availability\" again. Note: The above example uses magic to render the message on the frontend.", "prev_chunk_id": "chunk_1358", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1360", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Stateful button", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Stateful button", "content": "Stateful button If you want a clicked button to continue to be True, create a value in st.session_state and use the button to set that value to True in a callback.", "prev_chunk_id": "chunk_1359", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1361", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Toggle button", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Toggle button", "content": "Toggle button If you want a button to work like a toggle switch, consider using st.checkbox. Otherwise, you can use a button with a callback function to reverse a boolean value saved in st.session_state. In this example, we use st.button to toggle another widget on and off. By displaying st.slider conditionally on a value in st.session_state, the user can interact with the slider without it disappearing. Alternatively, you can use the value in st.session_state on the slider's disabled parameter.", "prev_chunk_id": "chunk_1360", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1362", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Buttons to continue or control stages of a process", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Buttons to continue or control stages of a process", "content": "Buttons to continue or control stages of a process Another alternative to nesting content inside a button is to use a value in st.session_state that designates the \"step\" or \"stage\" of a process. In this example, we have four stages in our script: - Before the user begins. - User enters their name. - User chooses a color. - User gets a thank-you message. A button at the beginning advances the stage from 0 to 1. A button at the end resets the stage from 3 to 0. The other widgets used in stage 1 and 2 have callbacks to set the stage. If you have a process with dependant steps and want to keep previous stages visible, such a callback forces a user to retrace subsequent stages if they change an earlier widget.", "prev_chunk_id": "chunk_1361", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1363", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Buttons to modify st.session_state", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Buttons to modify st.session_state", "content": "Buttons to modify st.session_state If you modify st.session_state inside of a button, you must consider where that button is within the script.", "prev_chunk_id": "chunk_1362", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1364", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "A slight problem", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "A slight problem", "content": "A slight problem In this example, we access st.session_state.name both before and after the buttons which modify it. When a button (\"Jane\" or \"John\") is clicked, the script reruns. The info displayed before the buttons lags behind the info written after the button. The data in st.session_state before the button is not updated. When the script executes the button function, that is when the conditional code to update st.session_state creates the change. Thus, this change is reflected after the button.", "prev_chunk_id": "chunk_1363", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1365", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Logic used in a callback", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Logic used in a callback", "content": "Logic used in a callback Callbacks are a clean way to modify st.session_state. Callbacks are executed as a prefix to the script rerunning, so the position of the button relative to accessing data is not important.", "prev_chunk_id": "chunk_1364", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1366", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Logic nested in a button with a rerun", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Logic nested in a button with a rerun", "content": "Logic nested in a button with a rerun Although callbacks are often preferred to avoid extra reruns, our first 'John Doe'/'Jane Doe' example can be modified by adding st.rerun instead. If you need to acces data in st.session_state before the button that modifies it, you can include st.rerun to rerun the script after the change has been committed. This means the script will rerun twice when a button is clicked.", "prev_chunk_id": "chunk_1365", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1367", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Buttons to modify or reset other widgets", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Buttons to modify or reset other widgets", "content": "Buttons to modify or reset other widgets When a button is used to modify or reset another widget, it is the same as the above examples to modify st.session_state. However, an extra consideration exists: you cannot modify a key-value pair in st.session_state if the widget with that key has already been rendered on the page for the current script run. If you assign a key to a button, you can condition code on a button's state by using its value in st.session_state. This means that logic depending on your button can be in your script before that button. In the following example, we use the .get() method on st.session_state because the keys for the buttons will not exist when the script runs for the first time. The .get() method will return False if it can't find the key. Otherwise, it will return the value of the key. By using st.container you can have widgets appear in different orders in your script and frontend view (webpage).", "prev_chunk_id": "chunk_1366", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1368", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Option 1: Use a key for the button and put the logic before the widget", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Option 1: Use a key for the button and put the logic before the widget", "content": "Option 1: Use a key for the button and put the logic before the widget If you assign a key to a button, you can condition code on a button's state by using its value in st.session_state. This means that logic depending on your button can be in your script before that button. In the following example, we use the .get() method on st.session_state because the keys for the buttons will not exist when the script runs for the first time. The .get() method will return False if it can't find the key. Otherwise, it will return the value of the key.", "prev_chunk_id": "chunk_1367", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1369", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Option 3: Use containers", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Option 3: Use containers", "content": "Option 3: Use containers By using st.container you can have widgets appear in different orders in your script and frontend view (webpage).", "prev_chunk_id": "chunk_1368", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1370", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Buttons to add other widgets dynamically", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Buttons to add other widgets dynamically", "content": "Buttons to add other widgets dynamically When dynamically adding widgets to the page, make sure to use an index to keep the keys unique and avoid a DuplicateWidgetID error. In this example, we define a function display_input_row which renders a row of widgets. That function accepts an index as a parameter. The widgets rendered by display_input_row use index within their keys so that display_input_row can be executed multiple times on a single script rerun without repeating any widget keys.", "prev_chunk_id": "chunk_1369", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1371", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Buttons to handle expensive or file-writing processes", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Buttons to handle expensive or file-writing processes", "content": "Buttons to handle expensive or file-writing processes When you have expensive processes, set them to run upon clicking a button and save the results into st.session_state. This allows you to keep accessing the results of the process without re-executing it unnecessarily. This is especially helpful for processes that save to disk or write to a database. In this example, we have an expensive_process that depends on two parameters: option and add. Functionally, add changes the output, but option does not—option is there to provide a parameter Astute observers may think, \"This feels a little like caching.\" We are only saving results relative to one parameter, but the pattern could easily be expanded to save results relative to both parameters. In that sense, yes, it has some similarities to caching, but also some important differences. When you save results in st.session_state, the results are only available to the current user in their current session. If you use st.cache_data instead, the results are available to all users across all sessions. Furthermore, if you want to update a saved result, you have to clear all saved results for that function to do so.", "prev_chunk_id": "chunk_1370", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1372", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Anti-patterns", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Anti-patterns", "content": "Anti-patterns Here are some simplified examples of how buttons can go wrong. Be on the lookout for these common mistakes.", "prev_chunk_id": "chunk_1371", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1373", "url": "https://docs.streamlit.io/develop/concepts/design/buttons", "title": "Still have questions?", "page_title": "Button behavior and examples - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1372", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1374", "url": "https://docs.streamlit.io/develop/concepts/design/animate", "title": "Animate and update elements", "page_title": "Animate and update elements - Streamlit Docs", "breadcrumbs": "Animate and update elements", "content": "Animate and update elements Sometimes you display a chart or dataframe and want to modify it live as the app runs (for example, in a loop). Some elements have built-in methods to allow you to update them in-place without rerunning the app. Updatable elements include the following: - st.emptycontainers can be written to in sequence and will always show the last thing written. They can also be cleared with an additional.empty()called like a method. - st.dataframe,st.table, and many chart elements can be updated with the.add_rows()method which appends data. - st.progresselements can be updated with additional.progress()calls. They can also be cleared with a.empty()method call. - st.statuscontainers have an.update()method to change their labels, expanded state, and status. - st.toastmessages can be updated in place with additional.toast()calls.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1375", "url": "https://docs.streamlit.io/develop/concepts/design/animate", "title": "st.empty containers", "page_title": "Animate and update elements - Streamlit Docs", "breadcrumbs": "st.empty containers", "content": "st.empty containers st.empty can hold a single element. When you write any element to an st.empty container, Streamlit discards its previous content displays the new element. You can also st.empty containers by calling .empty() as a method. If you want to update a set of elements, use a plain container (st.container()) inside st.empty and write contents to the plain container. Rewrite the plain container and its contents as often as desired to update your app's display.", "prev_chunk_id": "chunk_1374", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1376", "url": "https://docs.streamlit.io/develop/concepts/design/animate", "title": "The .add_rows() method", "page_title": "Animate and update elements - Streamlit Docs", "breadcrumbs": "The .add_rows() method", "content": "The .add_rows() method st.dataframe, st.table, and all chart functions can be mutated using the .add_rows() method on their output. In the following example, we use my_data_element = st.line_chart(df). You can try the example with st.table, st.dataframe, and most of the other simple charts by just swapping out st.line_chart. Note that st.dataframe only shows the first ten rows by default and enables scrolling for additional rows. This means adding rows is not as visually apparent as it is with st.table or the chart elements.", "prev_chunk_id": "chunk_1375", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1377", "url": "https://docs.streamlit.io/develop/concepts/design/animate", "title": "Still have questions?", "page_title": "Animate and update elements - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1376", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1378", "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet", "title": "Introduction", "page_title": "Connect Streamlit to a public Google Sheet - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a public Google Sheet from Streamlit. It uses st.connection, Streamlit GSheetsConnection, and Streamlit's Secrets management. This method requires you to enable link sharing for your Google Sheet. While the sharing link will not appear in your code (and actually acts as sort of a password!), someone with the link can get all the data in the Sheet. If you don't want this, follow the (more complicated) guide to Connect Streamlit to a private Google Sheet.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1379", "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet", "title": "Prerequisites", "page_title": "Connect Streamlit to a public Google Sheet - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites This tutorial requires streamlit>=1.28 and st-gsheets-connection in your Python environment.", "prev_chunk_id": "chunk_1378", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1380", "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet", "title": "Create a Google Sheet and turn on link sharing", "page_title": "Connect Streamlit to a public Google Sheet - Streamlit Docs", "breadcrumbs": "Create a Google Sheet and turn on link sharing", "content": "Create a Google Sheet and turn on link sharing If you already have a Sheet that you want to access, you can skip to the next step. See Google's documentation on how to share spreadsheets for more information. Create a spreadsheet with this example data and create a share link. The link should have \"Anyone with the link\" set as a \"Viewer.\"", "prev_chunk_id": "chunk_1379", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1381", "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet", "title": "Add the Sheets URL to your local app secrets", "page_title": "Connect Streamlit to a public Google Sheet - Streamlit Docs", "breadcrumbs": "Add the Sheets URL to your local app secrets", "content": "Add the Sheets URL to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the share link of your Google Sheet to it as shown below:", "prev_chunk_id": "chunk_1380", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1382", "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to a public Google Sheet - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. See st.connection above? This handles secrets retrieval, setup, query caching and retries. By default, .read() results are cached without expiring. You can pass optional parameters to .read() to customize your connection. For example, you can specify the name of a worksheet, cache expiration time, or pass-through parameters for pandas.read_csv like this: In this case, we set ttl=\"10m\" to ensure the query result is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. We've declared optional parameters usecols=[0,1] and nrows=3 for pandas to use under the hood. If everything worked out (and you used the example table we created above), your app should look like this:", "prev_chunk_id": "chunk_1381", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1383", "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet", "title": "Connecting to a Google Sheet from Community Cloud", "page_title": "Connect Streamlit to a public Google Sheet - Streamlit Docs", "breadcrumbs": "Connecting to a Google Sheet from Community Cloud", "content": "Connecting to a Google Sheet from Community Cloud This tutorial assumes a local Streamlit app, however you can also connect to Google Sheets from apps hosted in Community Cloud. The main additional steps are: - Include information about dependenciesusing arequirements.txtfile withst-gsheets-connectionand any other dependencies. - Add your secretsto your Community Cloud app.", "prev_chunk_id": "chunk_1382", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1384", "url": "https://docs.streamlit.io/develop/tutorials/databases/public-gsheet", "title": "Still have questions?", "page_title": "Connect Streamlit to a public Google Sheet - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1383", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1385", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Introduction", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a private Google Sheet from Streamlit Community Cloud. It uses st.connection, Streamlit GSheetsConnection, and Streamlit's Secrets management. If you are fine with enabling link sharing for your Google Sheet (i.e. everyone with the link can view it), the guide Connect Streamlit to a public Google Sheet shows a simpler method of doing this. If your Sheet contains sensitive information and you cannot enable link sharing, keep on reading.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1386", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Prerequisites", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites This tutorial requires streamlit>=1.28 and st-gsheets-connection in your Python environment.", "prev_chunk_id": "chunk_1385", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1387", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Create a Google Sheet", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Create a Google Sheet", "content": "Create a Google Sheet If you already have a Sheet that you want to use, you can skip to the next step. Create a spreadsheet with this example data.", "prev_chunk_id": "chunk_1386", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1388", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Enable the Sheets API", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Enable the Sheets API", "content": "Enable the Sheets API Programmatic access to Google Sheets is controlled through Google Cloud Platform. Create an account or sign in and head over to the APIs & Services dashboard (select or create a project if asked). As shown below, search for the Sheets API and enable it:", "prev_chunk_id": "chunk_1387", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1389", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Create a service account & key file", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Create a service account & key file", "content": "Create a service account & key file To use the Sheets API from Streamlit Community Cloud, you need a Google Cloud Platform service account (a special account type for programmatic data access). Go to the Service Accounts page and create an account with the Viewer permission (this will let the account access data but not change it): After clicking \"DONE\", you should be back on the service accounts overview. First, note down the email address of the account you just created (important for next step!). Then, create a JSON key file for the new account and download it:", "prev_chunk_id": "chunk_1388", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1390", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Share the Google Sheet with the service account", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Share the Google Sheet with the service account", "content": "Share the Google Sheet with the service account By default, the service account you just created cannot access your Google Sheet. To give it access, click on the \"Share\" button in the Google Sheet, add the email of the service account (noted down in step 2), and choose the correct permission (if you just want to read the data, \"Viewer\" is enough):", "prev_chunk_id": "chunk_1389", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1391", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Add the key file to your local app secrets", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Add the key file to your local app secrets", "content": "Add the key file to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the URL of your Google Sheet plus the content of the key file you downloaded to it as shown below:", "prev_chunk_id": "chunk_1390", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1392", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. See st.connection above? This handles secrets retrieval, setup, query caching and retries. By default, .read() results are cached without expiring. You can pass optional parameters to .read() to customize your connection. For example, you can specify the name of a worksheet, cache expiration time, or pass-through parameters for pandas.read_csv like this: In this case, we set ttl=\"10m\" to ensure the query result is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. We've declared optional parameters usecols=[0,1] and nrows=3 for pandas to use under the hood. If everything worked out (and you used the example table we created above), your app should look like this:", "prev_chunk_id": "chunk_1391", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1393", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Connecting to a Google Sheet from Community Cloud", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Connecting to a Google Sheet from Community Cloud", "content": "Connecting to a Google Sheet from Community Cloud This tutorial assumes a local Streamlit app, however you can also connect to Google Sheets from apps hosted in Community Cloud. The main additional steps are: - Include information about dependenciesusing arequirements.txtfile withst-gsheets-connectionand any other dependencies. - Add your secretsto your Community Cloud app.", "prev_chunk_id": "chunk_1392", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1394", "url": "https://docs.streamlit.io/develop/tutorials/databases/private-gsheet", "title": "Still have questions?", "page_title": "Connect Streamlit to a private Google Sheet - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1393", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1395", "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql", "title": "Introduction", "page_title": "Connect Streamlit to PostgreSQL - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a remote PostgreSQL database from Streamlit Community Cloud. It uses st.connection and Streamlit's Secrets management. The below example code will only work on Streamlit version >= 1.28, when st.connection was added.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1396", "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql", "title": "Create a PostgreSQL database", "page_title": "Connect Streamlit to PostgreSQL - Streamlit Docs", "breadcrumbs": "Create a PostgreSQL database", "content": "Create a PostgreSQL database First, follow this tutorial to install PostgreSQL and create a database (note down the database name, username, and password!). Open the SQL Shell (psql) and enter the following two commands to create a table with some example values:", "prev_chunk_id": "chunk_1395", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1397", "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql", "title": "Add username and password to your local app secrets", "page_title": "Connect Streamlit to PostgreSQL - Streamlit Docs", "breadcrumbs": "Add username and password to your local app secrets", "content": "Add username and password to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the name, user, and password of your database as shown below:", "prev_chunk_id": "chunk_1396", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1398", "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to PostgreSQL - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1397", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1399", "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql", "title": "Add dependencies to your requirements file", "page_title": "Connect Streamlit to PostgreSQL - Streamlit Docs", "breadcrumbs": "Add dependencies to your requirements file", "content": "Add dependencies to your requirements file Add the psycopg2-binary and SQLAlchemy packages to your requirements.txt file, preferably pinning its version (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1398", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1400", "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to PostgreSQL - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt query to use the name of your table. See st.connection above? This handles secrets retrieval, setup, query caching and retries. By default, query() results are cached without expiring. In this case, we set ttl=\"10m\" to ensure the query result is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. If everything worked out (and you used the example table we created above), your app should look like this:", "prev_chunk_id": "chunk_1399", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1401", "url": "https://docs.streamlit.io/develop/tutorials/databases/postgresql", "title": "Still have questions?", "page_title": "Connect Streamlit to PostgreSQL - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1400", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1402", "url": "https://docs.streamlit.io/develop/tutorials/databases/neon", "title": "Introduction", "page_title": "Connect Streamlit to Neon - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a Neon database from Streamlit. Neon is a fully managed serverless PostgreSQL database that separates storage and compute to offer features such as instant branching and automatic scaling.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1403", "url": "https://docs.streamlit.io/develop/tutorials/databases/neon", "title": "Prerequisites", "page_title": "Connect Streamlit to Neon - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - The following packages must be installed in your Python environment:streamlit>=1.28 psycopg2-binary>=2.9.6 sqlalchemy>=2.0.0push_pinNoteYou may usepsycopg2instead ofpsycopg2-binary. However, building Psycopg requires a few prerequisites (like a C compiler). To usepsycopg2on Community Cloud, you must includelibpq-devin apackages.txtfile in the root of your repository.psycopg2-binaryis a stand-alone package that is practical for testing and development. - You must have a Neon account. - You should have a basic understanding ofst.connectionandSecrets management.", "prev_chunk_id": "chunk_1402", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1404", "url": "https://docs.streamlit.io/develop/tutorials/databases/neon", "title": "Create a Neon project", "page_title": "Connect Streamlit to Neon - Streamlit Docs", "breadcrumbs": "Create a Neon project", "content": "Create a Neon project If you already have a Neon project that you want to use, you can skip to the next step. - Log in to the Neon console and navigate to theProjectssection. - If you see a prompt to enter your project name, skip to the next step. Otherwise, click the \"New Project\" button to create a new project. - Enter \"Streamlit-Neon\" for your project name, accept the othe default settings, and click \"Create Project.\"After Neon creates your project with a ready-to-useneondbdatabase, you will be redirected to your project's Quickstart. - Click on \"SQL Editor\" from the left sidebar. - Replace the text in the input area with the following code and click \"Run\" to add sample data to your project.CREATE TABLE home ( id SERIAL PRIMARY KEY, name VARCHAR(100), pet VARCHAR(100) ); INSERT INTO home (name, pet) VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');", "prev_chunk_id": "chunk_1403", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1405", "url": "https://docs.streamlit.io/develop/tutorials/databases/neon", "title": "Add the Neon connection string to your local app secrets", "page_title": "Connect Streamlit to Neon - Streamlit Docs", "breadcrumbs": "Add the Neon connection string to your local app secrets", "content": "Add the Neon connection string to your local app secrets - Within your Neon project, click \"Dashboard\" in the left sidebar. - Within the \"Connection Details\" tile, locate your database connection string. It should look similar to this:postgresql://neondb_owner:xxxxxxxxxxxx@ep-adjective-noun-xxxxxxxx.us-east-2.aws.neon.tech/neondb?sslmode=require - If you do not already have a.streamlit/secrets.tomlfile in your app's root directory, create an empty secrets file. - Copy your connection string and add it to your app's.streamlit/secrets.tomlfile as follows:# .streamlit/secrets.toml [connections.neon] url=\"postgresql://neondb_owner:xxxxxxxxxxxx@ep-adjective-noun-xxxxxxxx.us-east-2.aws.neon.tech/neondb?sslmode=require\"priority_highImportantAdd this file to.gitignoreand don't commit it to your GitHub repo!", "prev_chunk_id": "chunk_1404", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1406", "url": "https://docs.streamlit.io/develop/tutorials/databases/neon", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to Neon - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app - Copy the code below to your Streamlit app and save it.# streamlit_app.py import streamlit as st # Initialize connection. conn = st.connection(\"neon\", type=\"sql\") # Perform query. df = conn.query('SELECT * FROM home;', ttl=\"10m\") # Print results. for row in df.itertuples(): st.write(f\"{row.name} has a :{row.pet}:\")Thest.connectionobject above handles secrets retrieval, setup, query caching and retries.By default,query()results are cached without expiring. Setting thettlparameter to\"10m\"ensures the query result is cached for no longer than 10 minutes. You can also setttl=0to disable caching. Learn more inCaching. - Run your Streamlit app.streamlit run streamlit_app.pyIf everything worked out (and you used the example table we created above), your app should look like this:", "prev_chunk_id": "chunk_1405", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1407", "url": "https://docs.streamlit.io/develop/tutorials/databases/neon", "title": "Connecting to a Neon database from Community Cloud", "page_title": "Connect Streamlit to Neon - Streamlit Docs", "breadcrumbs": "Connecting to a Neon database from Community Cloud", "content": "Connecting to a Neon database from Community Cloud This tutorial assumes a local Streamlit app, but you can also connect to a Neon database from apps hosted on Community Cloud. The additional steps are: - Add arequirements.txtfile to your repo. Include all the packages listed inPrequisitesand any other dependencies. - Add your secretsto your app in Community Cloud.", "prev_chunk_id": "chunk_1406", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1408", "url": "https://docs.streamlit.io/develop/tutorials/databases/neon", "title": "Still have questions?", "page_title": "Connect Streamlit to Neon - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1407", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1409", "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb", "title": "Introduction", "page_title": "Connect Streamlit to MongoDB - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a remote MongoDB database from Streamlit Community Cloud. It uses the PyMongo library and Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1410", "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb", "title": "Create a MongoDB Database", "page_title": "Connect Streamlit to MongoDB - Streamlit Docs", "breadcrumbs": "Create a MongoDB Database", "content": "Create a MongoDB Database First, follow the official tutorials to install MongoDB, set up authentication (note down the username and password!), and connect to the MongoDB instance. Once you are connected, open the mongo shell and enter the following two commands to create a collection with some example values:", "prev_chunk_id": "chunk_1409", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1411", "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb", "title": "Add username and password to your local app secrets", "page_title": "Connect Streamlit to MongoDB - Streamlit Docs", "breadcrumbs": "Add username and password to your local app secrets", "content": "Add username and password to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the database information as shown below:", "prev_chunk_id": "chunk_1410", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1412", "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to MongoDB - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1411", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1413", "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb", "title": "Add PyMongo to your requirements file", "page_title": "Connect Streamlit to MongoDB - Streamlit Docs", "breadcrumbs": "Add PyMongo to your requirements file", "content": "Add PyMongo to your requirements file Add the PyMongo package to your requirements.txt file, preferably pinning its version (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1412", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1414", "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to MongoDB - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt the name of your database and collection. See st.cache_data above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With st.cache_data, it only runs when the query changes or after 10 minutes (that's what ttl is for). Watch out: If your database updates more frequently, you should adapt ttl or remove caching so viewers always see the latest data. Learn more in Caching. If everything worked out (and you used the example data we created above), your app should look like this:", "prev_chunk_id": "chunk_1413", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1415", "url": "https://docs.streamlit.io/develop/tutorials/databases/mongodb", "title": "Still have questions?", "page_title": "Connect Streamlit to MongoDB - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1414", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1416", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Introduction", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a remote Microsoft SQL Server database from Streamlit Community Cloud. It uses the pyodbc library and Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1417", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Create an SQL Server database", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Create an SQL Server database", "content": "Create an SQL Server database First, follow the Microsoft documentation to install SQL Server and the sqlcmd Utility. They have detailed installation guides on how to: - Install SQL Server on Windows - Install on Red Hat Enterprise Linux - Install on SUSE Linux Enterprise Server - Install on Ubuntu - Run on Docker - Provision a SQL VM in Azure Once you have SQL Server installed, note down your SQL Server name, username, and password during setup.", "prev_chunk_id": "chunk_1416", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1418", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Connect locally", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Connect locally", "content": "Connect locally If you are connecting locally, use sqlcmd to connect to your new local SQL Server instance. - In your terminal, run the following command:sqlcmd -S localhost -U SA -P '<YourPassword>'As you are connecting locally, the SQL Server name islocalhost, the username isSA, and the password is the one you provided during the SA account setup. - You should see asqlcmdcommand prompt1>, if successful. - If you run into a connection failure, review Microsoft's connection troubleshooting recommendations for your OS (Linux&Windows). By now, you have SQL Server running and have connected to it with sqlcmd! 🥳 Let's put it to use by creating a database containing a table with some example values. - From thesqlcmdcommand prompt, run the following Transact-SQL command to create a test databasemydb:CREATE DATABASE mydb - To execute the above command, typeGOon a new line:GO Next create a new table, mytable, in the mydb database with three columns and two rows. - Switch to the newmydbdatabase:USE mydb - Create a new table with the following schema:CREATE TABLE mytable (name varchar(80), pet varchar(80)) - Insert some data into the table:INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird') - TypeGOto execute the above commands:GO To end your sqlcmd session, type QUIT on a new line. Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the SQL Server name, database name, username, and password as shown below:", "prev_chunk_id": "chunk_1417", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1419", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Create a SQL Server database", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Create a SQL Server database", "content": "Create a SQL Server database By now, you have SQL Server running and have connected to it with sqlcmd! 🥳 Let's put it to use by creating a database containing a table with some example values. - From thesqlcmdcommand prompt, run the following Transact-SQL command to create a test databasemydb:CREATE DATABASE mydb - To execute the above command, typeGOon a new line:GO", "prev_chunk_id": "chunk_1418", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1420", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Insert some data", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Insert some data", "content": "Insert some data Next create a new table, mytable, in the mydb database with three columns and two rows. - Switch to the newmydbdatabase:USE mydb - Create a new table with the following schema:CREATE TABLE mytable (name varchar(80), pet varchar(80)) - Insert some data into the table:INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird') - TypeGOto execute the above commands:GO To end your sqlcmd session, type QUIT on a new line.", "prev_chunk_id": "chunk_1419", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1421", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Add username and password to your local app secrets", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Add username and password to your local app secrets", "content": "Add username and password to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the SQL Server name, database name, username, and password as shown below:", "prev_chunk_id": "chunk_1420", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1422", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Copy your app secrets to Streamlit Community Cloud", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Copy your app secrets to Streamlit Community Cloud", "content": "Copy your app secrets to Streamlit Community Cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1421", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1423", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Add pyodbc to your requirements file", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Add pyodbc to your requirements file", "content": "Add pyodbc to your requirements file To connect to SQL Server locally with Streamlit, you need to pip install pyodbc, in addition to the Microsoft ODBC driver you installed during the SQL Server installation. On Streamlit Cloud, we have built-in support for SQL Server. On popular demand, we directly added SQL Server tools including the ODBC drivers and the executables sqlcmd and bcp to the container image for Cloud apps, so you don't need to install them. All you need to do is add the pyodbc Python package to your requirements.txt file, and you're ready to go! 🎈 Replace x.x.x ☝️ with the version of pyodbc you want installed on Cloud.", "prev_chunk_id": "chunk_1422", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1424", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt query to use the name of your table. See st.cache_data above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With st.cache_data, it only runs when the query changes or after 10 minutes (that's what ttl is for). Watch out: If your database updates more frequently, you should adapt ttl or remove caching so viewers always see the latest data. Learn more in Caching. If everything worked out (and you used the example table we created above), your app should look like this:", "prev_chunk_id": "chunk_1423", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1425", "url": "https://docs.streamlit.io/develop/tutorials/databases/mssql", "title": "Still have questions?", "page_title": "Connect Streamlit to Microsoft SQL Server - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1424", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1426", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Introduction", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access files on Google Cloud Storage from Streamlit Community Cloud. It uses Streamlit FilesConnection, the gcsfs library and Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1427", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Create a Google Cloud Storage bucket and add a file", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Create a Google Cloud Storage bucket and add a file", "content": "Create a Google Cloud Storage bucket and add a file First, sign up for Google Cloud Platform or log in. Go to the Google Cloud Storage console and create a new bucket. Navigate to the upload section of your new bucket: And upload the following CSV file, which contains some example data:", "prev_chunk_id": "chunk_1426", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1428", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Enable the Google Cloud Storage API", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Enable the Google Cloud Storage API", "content": "Enable the Google Cloud Storage API The Google Cloud Storage API is enabled by default when you create a project through the Google Cloud Console or CLI. Feel free to skip to the next step. If you do need to enable the API for programmatic access in your project, head over to the APIs & Services dashboard (select or create a project if asked). Search for the Cloud Storage API and enable it. The screenshot below has a blue \"Manage\" button and indicates the \"API is enabled\" which means no further action needs to be taken. This is very likely what you have since the API is enabled by default. However, if that is not what you see and you have an \"Enable\" button, you'll need to enable the API:", "prev_chunk_id": "chunk_1427", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1429", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Create a service account and key file", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Create a service account and key file", "content": "Create a service account and key file To use the Google Cloud Storage API from Streamlit, you need a Google Cloud Platform service account (a special type for programmatic data access). Go to the Service Accounts page and create an account with Viewer permission. After clicking DONE, you should be back on the service accounts overview. Create a JSON key file for the new account and download it:", "prev_chunk_id": "chunk_1428", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1430", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Add the key to your local app secrets", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Add the key to your local app secrets", "content": "Add the key to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the access key to it as shown below:", "prev_chunk_id": "chunk_1429", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1431", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1430", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1432", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Add FilesConnection and gcsfs to your requirements file", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Add FilesConnection and gcsfs to your requirements file", "content": "Add FilesConnection and gcsfs to your requirements file Add the FilesConnection and gcsfs packages to your requirements.txt file, preferably pinning the versions (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1431", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1433", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt the name of your bucket and file. Note that Streamlit automatically turns the access keys from your secrets file into environment variables. See st.connection above? This handles secrets retrieval, setup, result caching and retries. By default, read() results are cached without expiring. In this case, we set ttl=600 to ensure the file contents is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. If everything worked out (and you used the example file given above), your app should look like this:", "prev_chunk_id": "chunk_1432", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1434", "url": "https://docs.streamlit.io/develop/tutorials/databases/gcs", "title": "Still have questions?", "page_title": "Connect Streamlit to Google Cloud Storage - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1433", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1435", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Validate and edit chat responses", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Validate and edit chat responses", "content": "Validate and edit chat responses As you train LLM models, you may want users to correct or improve chat responses. With Streamlit, you can build a chat app that lets users improve chat responses. This tutorial uses Streamlit's chat commands to build a simple chat app that lets users modify chat responses to improve them.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1436", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Applied concepts", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Usest.chat_inputandst.chat_messageto create a chat interface. - Use Session State to manage stages of a process.", "prev_chunk_id": "chunk_1435", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1437", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Prerequisites", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.24.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding ofSession State.", "prev_chunk_id": "chunk_1436", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1438", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Summary", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, you'll build a chat interface. To avoid API calls, the app will include a generator function to simulate a chat stream object. When the simulated chat assistant responds, a function validates the response and highlights possible \"errors\" for the user to review. The user must accept, correct, or rewrite the response before proceeding. Here's a look at what you'll build:", "prev_chunk_id": "chunk_1437", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1439", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Initialize your app", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st import lorem from random import randint import timeYou'll uselorem,random, andtimeto build a simulated chat response stream. - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_1438", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1440", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Build a function to simulate a chat response stream", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Build a function to simulate a chat response stream", "content": "Build a function to simulate a chat response stream To begin, you'll define a function to stream a random chat response. The simulated chat stream will use lorem to generate three to nine random sentences. You can skip this section if you just want to copy the function. - Define a function for your simulated chat stream:def chat_stream():For this example, the chat stream does not have any arguments. The streamed response will be random and independent of the user's prompt. - Create a loop that executes three to nine times:for i in range(randint(3, 9)): - Within the loop, yield a random sentence fromloremwith a space at the end:yield lorem.sentence() + \" \" - To create a streaming effect, add a small delay withtime.sleep(0.2)between yields:time.sleep(0.2) You now have a complete generator function to simulate a chat stream object.", "prev_chunk_id": "chunk_1439", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1441", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Create a validation function", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Create a validation function", "content": "Create a validation function The app will validate the streamed responses to assist users in identifying possible errors. To validate a response, you'll first create a list of its sentences. Any sentence with fewer than six words will be marked as a potential error. This is an arbitrary standard for the sake of illustration. - Define a function that accepts a string response and breaks it into sentences:def validate(response): response_sentences = response.split(\". \") - Use list comprehension to clean the list of sentences. For each sentence, strip any leading and trailing spaces and periods, and then restore a period to the end:response_sentences = [ sentence.strip(\". \") + \".\" for sentence in response_sentences if sentence.strip(\". \") != \"\" ]Because the user will be modifying responses, whitespaces and punctuation may vary. The codesentence.strip(\". \") + \".\"removes leading and trailing spaces and periods. It also ensures that each sentence ends with a single period. Furthermore, the codeif sentence.strip(\". \") != \"\"discards any empty sentences. This simple example doesn't address other punctuation that may terminate a sentence. - Create a Boolean list of sentence validations, usingTruefor an approved sentence andFalsefor an unapproved sentence:validation_list = [ True if sentence.count(\" \") > 4 else False for sentence in response_sentences ]As stated previously, a \"good\" sentence has at least six words (i.e., at least five spaces). This code uses list comprehension to count the spaces in each sentence and saves a Boolean value. - Return the sentence and validation lists as a tuple:return response_sentences, validation_list", "prev_chunk_id": "chunk_1440", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1442", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Create a helper function to highlight text", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Create a helper function to highlight text", "content": "Create a helper function to highlight text To show your validation results to your user, you can highlight sentences that are marked as errors. Create a helper function to add text and background color to the detected errors. - Define a function that accepts the lists of sentences and their validations. Include parameters for the text and background colors of the highlight:def add_highlights(response_sentences, validation_list, bg=\"red\", text=\"red\"):For convenience, use a default of\"red\"for the highlight colors. You'll use this function to highlight all errors in red when summarizing the validation. If the user chooses to step through the errors individually, you'll highlight all the errors in gray (except the one in focus). - Use list comprehension to return a modified list of sentences that include the Markdown highlights where errors were detected:return [ f\":{text}[:{bg}-background[\" + sentence + \"]]\" if not is_valid else sentence for sentence, is_valid in zip(response_sentences, validation_list) ]", "prev_chunk_id": "chunk_1441", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1443", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Initialize and display your chat history", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Initialize and display your chat history", "content": "Initialize and display your chat history Your app will use Session State to track the stages of the validation and correction process. - Initialize Session State:if \"stage\" not in st.session_state: st.session_state.stage = \"user\" st.session_state.history = [] st.session_state.pending = None st.session_state.validation = {}st.session_state.stagetracks where the user is in the multistage process.\"user\"means that the app is waiting for the user to enter a new prompt. The other values are\"validate\",\"correct\", and\"rewrite\", which will be defined later.st.session_state.historystores the conversation history as a list of messages. Each message is a dictionary of message attributes (\"role\"and\"content\").st.session_state.pendingstores the next response before it is approved.st.session_state.validationstores the validation information for the pending response. This is a dictionary with the keys\"sentences\"and\"valid\"to store the lists of sentences and their validations, respectively. - Iterate through the messages in your chat history and display their contents in chat message containers:for message in st.session_state.history: with st.chat_message(message[\"role\"]): st.write(message[\"content\"])", "prev_chunk_id": "chunk_1442", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1444", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Define the \"user\" stage", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Define the \"user\" stage", "content": "Define the \"user\" stage When st.session_state.stage is \"user\", the app is waiting for a new prompt. - Start a conditional block for the\"user\"stage:if st.session_state.stage == \"user\": - Display a chat input widget, and start a nested conditional block from its output:if user_input := st.chat_input(\"Enter a prompt\"):This nested block won't be executed until a user submits a prompt. When the app first loads (or returns to the\"user\"stage after finalizing a response), this is effectively the end of the script.The:=notation is shorthand to assign a variable within an expression. - Append the user prompt to the chat history and display it in a chat message container:st.session_state.history.append({\"role\": \"user\", \"content\": user_input}) with st.chat_message(\"user\"): st.write(user_input) - Following the user's chat message container, display the chat response in another chat message container. Save the complete streamed response as a pending message in Session State:with st.chat_message(\"assistant\"): response = st.write_stream(chat_stream()) st.session_state.pending = response - Update the stage to\"validate\", and rerun the app:st.session_state.stage = \"validate\" st.rerun()When a user submits a new prompt, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and continue in the\"validate\"stage.", "prev_chunk_id": "chunk_1443", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1445", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Define the \"validate\" stage", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Define the \"validate\" stage", "content": "Define the \"validate\" stage When st.session_state.stage is \"validate\", the app will validate the pending response and display the results to the user. The user will then choose how to proceed (accept, correct, or rewrite the response). - Start a conditional block for the\"validate\"stage:elif st.session_state.stage == \"validate\":You can useiforeliffor each of the stages. Everywhere you update the stage in Session State, you will immediately rerun the app. Therefore, you'll never execute two different stages in the same script run. - For visual consistency, display a disabled chat input:st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True)For the user's clarity, use placeholder text to direct them to review the pending response. - Parse the response and highlight any errors using your helper functions:response_sentences, validation_list = validate(st.session_state.pending) highlighted_sentences = add_highlights(response_sentences, validation_list) - Join the highlighted sentences into a single string, and display them in a chat message container. To separate the response from the buttons that follow, add a divider:with st.chat_message(\"assistant\"): st.markdown(\" \".join(highlighted_sentences)) st.divider() - To display buttons in a row, create three columns:cols = st.columns(3) - In the first column, start a conditional block, and display a primary-type button labeled \"Correct errors.\" Disable the button if there are no detected errors:if cols[0].button( \"Correct errors\", type=\"primary\", disabled=all(validation_list) ): - Within the conditional block, save the validation information into Session State, update the stage, and then rerun the app:st.session_state.validation = { \"sentences\": response_sentences, \"valid\": validation_list, } st.session_state.stage = \"correct\" st.rerun()If the user clicks the \"Correct errors\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and enter the\"correct\"stage. - In the second column, start a conditional block, and display a button labeled \"Accept:\"if cols[1].button(\"Accept\"): - Within the conditional block, save the pending message into the chat history, and clear the pending and validation information", "prev_chunk_id": "chunk_1444", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1446", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Define the \"validate\" stage", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Define the \"validate\" stage", "content": "from Session State:st.session_state.history.append( {\"role\": \"assistant\", \"content\": st.session_state.pending} ) st.session_state.pending = None st.session_state.validation = {} - Update the stage to\"user\", and rerun the app:st.session_state.stage = \"user\" st.rerun()If the user clicks the \"Accept\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and return to the\"user\"stage. - In the third column, start a conditional block, and display a tertiary-type button labeled \"Rewrite answer:\"if cols[2].button(\"Rewrite answer\", type=\"tertiary\"): - Within the conditional block, update the stage to\"rewrite\"and rerun the app:st.session_state.stage = \"rewrite\" st.rerun()If the user clicks the \"Rewrite answer\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and enter the\"rewrite\"stage.You don't need to save any information intost.session_state.validationbecause the\"rewrite\"stage does not use this information.", "prev_chunk_id": "chunk_1445", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1447", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Define the \"correct\" stage", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Define the \"correct\" stage", "content": "Define the \"correct\" stage When st.session_state.stage is \"correct\", the user can correct or accept the errors identified in st.session_state.validation. With each script run, the app focuses the user on the first error in the list. When the user addresses an error, the error is removed from the list, and the next error is highlighted in the next script run. This continues until all errors are removed. Then, the user can accept the result, return to the \"validate\" stage, or go to the \"rewrite\" stage. - Start a conditional block for the\"correct\"stage:elif st.session_state.stage == \"correct\": - For visual consistency, display a disabled chat input:st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True) - For coding convenience, retrieve the validation information from Session State and save it into variables:response_sentences = st.session_state.validation[\"sentences\"] validation_list = st.session_state.validation[\"valid\"] - Use your helper function to highlight the sentences with errors. Use gray for the highlight:highlighted_sentences = add_highlights( response_sentences, validation_list, \"gray\", \"gray\" )In a following step, to focus the user on one error, you'll change the highlight color for one sentence. - Check whether there are any errors invalidation_list. If there are errors, get the index of the first one, and replace the Markdown highlight for the associated sentence:if not all(validation_list): focus = validation_list.index(False) highlighted_sentences[focus] = \":red[:red\" + highlighted_sentences[focus][11:]highlighted_sentences[focus]begins with\":gray[:gray-background[\". Therefore,highlighted_sentences[focus][11:]removes the first eleven characters so you can prepend\":red[:red\"instead. - Set a fallback value forfocusfor when there are no errors:else: focus = None - In a chat message container, display the highlighted response. To separate the response from the buttons that follow, add a divider:with st.chat_message(\"assistant\"): st.markdown(\" \".join(highlighted_sentences)) st.divider() - Start a conditional block: if there are errors, display a text input prefilled with the first error. This is the error you highlighted in red:if focus is not None: new_sentence = st.text_input( \"Replacement text:\", value=response_sentences[focus] )value=response_sentences[focus]prefills the text input", "prev_chunk_id": "chunk_1446", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1448", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Define the \"correct\" stage", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Define the \"correct\" stage", "content": "with the sentence associated tofocus. The user can edit it or replace the text entirely. You'll also add a button so they can choose to remove it instead. - To display buttons in a row, create two columns:cols = st.columns(2) - In the first column, start a conditional block, and display a primary-type button labeled \"Update.\" Disable the button if the text input is empty:if cols[0].button( \"Update\", type=\"primary\", disabled=len(new_sentence.strip()) < 1 ): - Within the conditional block, update the sentence and its validation:st.session_state.validation[\"sentences\"][focus] = ( new_sentence.strip(\". \") + \".\" ) st.session_state.validation[\"valid\"][focus] = True - Update the complete response inst.session_state.pendingwith the new, resultant response, and rerun the app:st.session_state.pending = \" \".join( st.session_state.validation[\"sentences\"] ) st.rerun()If the user clicks the \"Update\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and continue in the\"correct\"stage with the next error highlighted. - In the second column, start a conditional block, and display a button labeled \"Remove.\" Within the conditional block, pop the sentence and validation information out of their lists in Session State:if cols[1].button(\"Remove\"): st.session_state.validation[\"sentences\"].pop(focus) st.session_state.validation[\"valid\"].pop(focus) - Update the complete response inst.session_state.pendingwith the new, resultant response, and rerun the app:st.session_state.pending = \" \".join( st.session_state.validation[\"sentences\"] ) st.rerun()If the user clicks the \"Remove\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and continue in the\"correct\"stage with the next error highlighted. - Start anelseblock for when there are no errors. To display buttons in a row, create two columns:else: cols = st.columns(2)After a user has resolved all the errors, they need to confirm the final result. Instead of \"Update\" and \"Remove\" buttons, you'll display \"Accept\" and \"Re-validate\" buttons. - In the first column, start a conditional block, and display a primary-type button labeled", "prev_chunk_id": "chunk_1447", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1449", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Define the \"correct\" stage", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Define the \"correct\" stage", "content": "\"Accept.\" Within the conditional block, save the pending message into the chat history, and clear the pending and validation information from Session State:if cols[0].button(\"Accept\", type=\"primary\"): st.session_state.history.append( {\"role\": \"assistant\", \"content\": st.session_state.pending} ) st.session_state.pending = None st.session_state.validation = {} - Update the stage to\"user\", and rerun the app:st.session_state.stage = \"user\" st.rerun()If the user clicks the \"Accept\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and return to the\"user\"stage. - In the second column, start a conditional block, and display a button labeled \"Re-validate:\"if cols[1].button(\"Re-validate\"): - Within the conditional block, clear the validation information from Session State, update the stage to\"validate\", and rerun the app:st.session_state.validation = {} st.session_state.stage = \"validate\" st.rerun()If the user clicks the \"Re-validate\" button, the app will rerun and execute this conditional block. At the end of this block, the app will rerun again and enter the\"validate\"stage.", "prev_chunk_id": "chunk_1448", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1450", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Define the \"rewrite\" stage", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Define the \"rewrite\" stage", "content": "Define the \"rewrite\" stage When st.session_state.stage is \"rewrite\", the user can freely edit the response in a text area. - Start a conditional block for the\"rewrite\"stage:elif st.session_state.stage == \"rewrite\": - For visual consistency, display a disabled chat input:st.chat_input(\"Accept, correct, or rewrite the answer above.\", disabled=True) - To let the user edit the pending response, in a chat message container, display a text area input:with st.chat_message(\"assistant\"): new = st.text_area(\"Rewrite the answer\", value=st.session_state.pending)value=st.session_state.pendingprefills the text area input with the pending response. The user can edit it or replace the text entirely. - Start a conditional block, and display a primary-type button labeled \"Update.\" Disable the button if text area input is empty:if st.button( \"Update\", type=\"primary\", disabled=new is None or new.strip(\". \") == \"\" ): - Within the conditional block, add the new response to the chat history, and clear the pending and validation information from Session State:st.session_state.history.append({\"role\": \"assistant\", \"content\": new}) st.session_state.pending = None st.session_state.validation = {} - Update the stage to\"user\", and rerun the app:st.session_state.stage = \"user\" st.rerun()If the user clicks the \"Update\" button, the app will rerun and execute this block. At the end of this block, the app will rerun again and return to the\"user\"stage. - Save your file and go to your browser to try your new app.", "prev_chunk_id": "chunk_1449", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1451", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Improve the example", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Improve the example", "content": "Improve the example Now that you have a working app, you can iteratively improve it. Because there are some common elements between stages, you might want to introduce additional functions to reduce duplicate code. You can use callbacks with the buttons so the app doesn't rerun twice in a row. Alternatively, you can handle more edge cases. The example includes some protection against saving an empty response, but it isn't comprehensive. If every sentence in a response is marked as an error, a user can remove each of them in the \"correct\" stage and accept the empty result. If the response is empty in the \"correct\" stage, consider disabling the \"Accept\" button or changing it to \"Rewrite.\" To see another edge case, try this in the running example: - Submit a prompt. - Select \"Rewrite answer.\" - In the text area, highlight all text, and pressDelete. Do not click or tab outside of the text area. - Immediately click the \"Update\" button. When you click a button with an unsubmitted value in another widget, Streamlit will update that widget's value and the button's value in succession before triggering the rerun. Because there isn't a rerun between updating the text area and updating the button, the \"Update\" button doesn't get disabled as expected. To correct this, you can add an extra check for an empty text area within the \"rewrite\" stage: Now, if you repeat the listed steps, when the app reruns, the conditional block won't be executed even though the button triggered the rerun. The button will be disabled and the user can proceed as if they had just clicked or tabbed out of the text area.", "prev_chunk_id": "chunk_1450", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1452", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/validate-and-edit-chat-responses", "title": "Still have questions?", "page_title": "Validate and edit chat responses - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1451", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1453", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Collect user feedback about LLM responses", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Collect user feedback about LLM responses", "content": "Collect user feedback about LLM responses A common task in a chat app is to collect user feedback about an LLM's responses. Streamlit includes st.feedback to conveniently collect user sentiment by displaying a group of selectable sentiment icons. This tutorial uses Streamlit's chat commands and st.feedback to build a simple chat app that collects user feedback about each response.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1454", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Applied concepts", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Usest.chat_inputandst.chat_messageto create a chat interface. - Usest.feedbackto collect user sentiment about chat responses.", "prev_chunk_id": "chunk_1453", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1455", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Prerequisites", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.42.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding ofSession State.", "prev_chunk_id": "chunk_1454", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1456", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Summary", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, you'll build a chat interface. To avoid API calls, the chat app will echo the user's prompt within a fixed response. Each chat response will be followed by a feedback widget where the user can vote \"thumb up\" or \"thumb down.\" In the following code, a user can't change their feedback after it's given. If you want to let users change their rating, see the optional instructions at the end of this tutorial. Here's a look at what you'll build:", "prev_chunk_id": "chunk_1455", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1457", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Initialize your app", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st import timeYou'll usetimeto build a simulated chat response stream. - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_1456", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1458", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Build a function to simulate a chat response stream", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Build a function to simulate a chat response stream", "content": "Build a function to simulate a chat response stream To begin, you'll define a function to stream a fixed chat response. You can skip this section if you just want to copy the function. - Define a function which accepts a prompt and formulates a response:def chat_stream(prompt): response = f'You said, \"{prompt}\" ...interesting.' - Loop through the characters and yield each one at 0.02-second intervals:for char in response: yield char time.sleep(.02) You now have a complete generator function to simulate a chat stream object.", "prev_chunk_id": "chunk_1457", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1459", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Initialize and render your chat history", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Initialize and render your chat history", "content": "Initialize and render your chat history To make your chat app stateful, you'll save the conversation history into Session State as a list of messages. Each message is a dictionary of message attributes. The dictionary keys include the following: - \"role\": Indicates the source of the message (either\"user\"or\"assistant\"). - \"content\": The body of the message as a string. - \"feedback\": An integer that indicates a user's feedback. This is only included when the message role is\"assistant\"because users do not leave feedback on their own prompts. - Initialize the chat history in Session State:if \"history\" not in st.session_state: st.session_state.history = [] - Iterate through the messages in your chat history and render their contents in chat message containers:for i, message in enumerate(st.session_state.history): with st.chat_message(message[\"role\"]): st.write(message[\"content\"])In a later step, you'll need a unique key for each assistant message. You can use the index of the message in your chat history to create a unique key. Therefore, useenumerate()to get an index along with each message dictionary. - For each assistant message, check whether feedback has been saved:if message[\"role\"] == \"assistant\": feedback = message.get(\"feedback\", None)If no feedback is saved for the current message, the.get()method will return the specified default ofNone. - Save the feedback value into Session State under a unique key for that message:st.session_state[f\"feedback_{i}\"] = feedbackBecause the message index within the ordered chat history is unique, you can use the index as the key. For readability, you can add a prefix, \"feedback_\", to the index. In the next step, to make the feedback widget show this value, you'll assign the same key to the widget. - Add a feedback widget to the chat message container:st.feedback( \"thumbs\", key=f\"feedback_{i}\", disabled=feedback is not None, )The code you've written so far will show the chat history. If a user has already rated a message in the chat", "prev_chunk_id": "chunk_1458", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1460", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Initialize and render your chat history", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Initialize and render your chat history", "content": "history, the feedback widget will show the rating and be disabled. The user won't be able to change their rating.All unrated messages include an enabled feedback widget. However, if a user interacts with one of those widgets, there is no code to save that information into the chat history yet. To solve this, use a callback as shown in the following steps. - At the top of your app, after the definition ofchat_stream()and before you initialize your chat history, define a function to use as a callback:def save_feedback(index): st.session_state.history[index][\"feedback\"] = st.session_state[f\"feedback_{index}\"]Thesave_feedback()function accepts an index and uses the index to get the associated widget value from Session State. Then, this value is saved into chat history. - Add the callback and index argument to yourst.feedbackwidget:st.feedback( \"thumbs\", key=f\"feedback_{i}\", disabled=feedback is not None, + on_change=save_feedback, + args=[i], )When a user interacts with the feedback widget, the callback will update the chat history before the app reruns.", "prev_chunk_id": "chunk_1459", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1461", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Add chat input", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Add chat input", "content": "Add chat input - Accept the user's prompt from anst.chat_inputwidget, display it in a chat message container, and then save it to the chat history:if prompt := st.chat_input(\"Say something\"): with st.chat_message(\"user\"): st.write(prompt) st.session_state.history.append({\"role\": \"user\", \"content\": prompt})Thest.chat_inputwidget acts like a button. When a user enters a prompt and clicks the send icon, it triggers a rerun. During the rerun, the previous code displays the chat history. When this conditional block is executed, the user's new prompt is displayed and then added to the history. On the next rerun, this prompt will be displayed as part of the history.The:=notation is shorthand to assign a variable within an expression. The following code is equivalent to the previous code in this step:prompt = st.chat_input(\"Say something\") if prompt: with st.chat_message(\"user\"): st.write(prompt) st.session_state.history.append({\"role\": \"user\", \"content\": prompt}) - In another chat message container, process the prompt, display the response, add a feedback widget, and append the response to the chat history:with st.chat_message(\"assistant\"): response = st.write_stream(chat_stream(prompt)) st.feedback( \"thumbs\", key=f\"feedback_{len(st.session_state.history)}\", on_change=save_feedback, args=[len(st.session_state.history)], ) st.session_state.history.append({\"role\": \"assistant\", \"content\": response})This is the same pattern used for the user's prompt. Within the body of the conditional block, the response is displayed and then added to the history. On the next rerun, this response will be displayed as a part of the chat history.When Streamlit executes thest.feedbackcommand, the response is not yet added to the chat history. Use an index equal to the length of the chat history because that is the index that the response will have when it's added to the chat history on the next line. - Save your file and go to your browser to try your new app.", "prev_chunk_id": "chunk_1460", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1462", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Optional: Change the feedback behavior", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Optional: Change the feedback behavior", "content": "Optional: Change the feedback behavior Your app currently allows users to rate any response once. They can submit their rating at any time, but can't change it. If you want users to rate only the most recent response, you can remove the widgets from the chat history: Or, if you want to allow users to change their responses, you can just remove the disabled parameter:", "prev_chunk_id": "chunk_1461", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1463", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback", "title": "Still have questions?", "page_title": "Collect user feedback about LLM responses - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1462", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1464", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "OpenAI, LangChain, and Streamlit in 18 lines of code", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "OpenAI, LangChain, and Streamlit in 18 lines of code", "content": "OpenAI, LangChain, and Streamlit in 18 lines of code In this tutorial, you will build a Streamlit LLM app that can generate text from a user-provided prompt. This Python app will use the LangChain framework and Streamlit. Optionally, you can deploy your app to Streamlit Community Cloud when you're done. This tutorial is adapted from a blog post by Chanin Nantesanamat: LangChain tutorial #1: Build an LLM-powered app in 18 lines of code.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1465", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "Objectives", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "Objectives", "content": "Objectives - Get an OpenAI key from the end user. - Validate the user's OpenAI key. - Get a text prompt from the user. - Authenticate OpenAI with the user's key. - Send the user's prompt to OpenAI's API. - Get a response and display it. Bonus: Deploy the app on Streamlit Community Cloud!", "prev_chunk_id": "chunk_1464", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1466", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "Prerequisites", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - Python 3.9+ - Streamlit - LangChain - OpenAI API key", "prev_chunk_id": "chunk_1465", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1467", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "Setup coding environment", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "Setup coding environment", "content": "Setup coding environment In your IDE (integrated coding environment), open the terminal and install the following two Python libraries: Create a requirements.txt file located in the root of your working directory and save these dependencies. This is necessary for deploying the app to the Streamlit Community Cloud later.", "prev_chunk_id": "chunk_1466", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1468", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "Building the app", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "Building the app", "content": "Building the app The app is only 18 lines of code: To start, create a new Python file and save it as streamlit_app.py in the root of your working directory. - Import the necessary Python libraries.import streamlit as st from langchain_openai.chat_models import ChatOpenAI - Create the app's title usingst.title.st.title(\"🦜🔗 Quickstart App\") - Add a text input box for the user to enter their OpenAI API key.openai_api_key = st.sidebar.text_input(\"OpenAI API Key\", type=\"password\") - Define a function to authenticate to OpenAI API with the user's key, send a prompt, and get an AI-generated response. This function accepts the user's prompt as an argument and displays the AI-generated response in a blue box usingst.info.def generate_response(input_text): model = ChatOpenAI(temperature=0.7, api_key=openai_api_key) st.info(model.invoke(input_text)) - Finally, usest.form()to create a text box (st.text_area()) for user input. When the user clicksSubmit, thegenerate-response()function is called with the user's input as an argument.with st.form(\"my_form\"): text = st.text_area( \"Enter text:\", \"What are the three key pieces of advice for learning how to code?\", ) submitted = st.form_submit_button(\"Submit\") if not openai_api_key.startswith(\"sk-\"): st.warning(\"Please enter your OpenAI API key!\", icon=\"⚠\") if submitted and openai_api_key.startswith(\"sk-\"): generate_response(text) - Remember to save your file! - Return to your computer's terminal to run the app.streamlit run streamlit_app.py", "prev_chunk_id": "chunk_1467", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1469", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "Deploying the app", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "Deploying the app", "content": "Deploying the app To deploy the app to the Streamlit Cloud, follow these steps: - Create a GitHub repository for the app. Your repository should contain two files:your-repository/ ├── streamlit_app.py └── requirements.txt - Go toStreamlit Community Cloud, click theNew appbutton from your workspace, then specify the repository, branch, and main file path. Optionally, you can customize your app's URL by choosing a custom subdomain. - Click theDeploy!button. Your app will now be deployed to Streamlit Community Cloud and can be accessed from around the world! 🌎", "prev_chunk_id": "chunk_1468", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1470", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "Conclusion", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "Conclusion", "content": "Conclusion Congratulations on building an LLM-powered Streamlit app in 18 lines of code! 🥳 You can use this app to generate text from any prompt that you provide. The app is limited by the capabilities of the OpenAI LLM, but it can still be used to generate some creative and interesting text. We hope you found this tutorial helpful! Check out more examples to see the power of Streamlit and LLM. 💖 Happy Streamlit-ing! 🎈", "prev_chunk_id": "chunk_1469", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1471", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart", "title": "Still have questions?", "page_title": "Build an LLM app using LangChain - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1470", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1472", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Introduction", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access a BigQuery database from Streamlit Community Cloud. It uses the google-cloud-bigquery library and Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1473", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Create a BigQuery database", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Create a BigQuery database", "content": "Create a BigQuery database For this example, we will use one of the sample datasets from BigQuery (namely the shakespeare table). If you want to create a new dataset instead, follow Google's quickstart guide.", "prev_chunk_id": "chunk_1472", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1474", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Enable the BigQuery API", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Enable the BigQuery API", "content": "Enable the BigQuery API Programmatic access to BigQuery is controlled through Google Cloud Platform. Create an account or sign in and head over to the APIs & Services dashboard (select or create a project if asked). As shown below, search for the BigQuery API and enable it:", "prev_chunk_id": "chunk_1473", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1475", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Create a service account & key file", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Create a service account & key file", "content": "Create a service account & key file To use the BigQuery API from Streamlit Community Cloud, you need a Google Cloud Platform service account (a special account type for programmatic data access). Go to the Service Accounts page and create an account with the Viewer permission (this will let the account access data but not change it): After clicking DONE, you should be back on the service accounts overview. Create a JSON key file for the new account and download it:", "prev_chunk_id": "chunk_1474", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1476", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Add the key file to your local app secrets", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Add the key file to your local app secrets", "content": "Add the key file to your local app secrets Your local Streamlit app will read secrets from a file .streamlit/secrets.toml in your app's root directory. Create this file if it doesn't exist yet and add the content of the key file you just downloaded to it as shown below:", "prev_chunk_id": "chunk_1475", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1477", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud As the secrets.toml file above is not committed to GitHub, you need to pass its content to your deployed app (on Streamlit Community Cloud) separately. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1476", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1478", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Add google-cloud-bigquery to your requirements file", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Add google-cloud-bigquery to your requirements file", "content": "Add google-cloud-bigquery to your requirements file Add the google-cloud-bigquery package to your requirements.txt file, preferably pinning its version (replace x.x.x with the version want installed):", "prev_chunk_id": "chunk_1477", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1479", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt the query if you don't use the sample table. See st.cache_data above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With st.cache_data, it only runs when the query changes or after 10 minutes (that's what ttl is for). Watch out: If your database updates more frequently, you should adapt ttl or remove caching so viewers always see the latest data. Learn more in Caching. Alternatively, you can use pandas to read from BigQuery right into a dataframe! Follow all the above steps, install the pandas-gbq library (don't forget to add it to requirements.txt!), and call pandas.read_gbq(query, credentials=credentials). More info in the pandas docs. If everything worked out (and you used the sample table), your app should look like this:", "prev_chunk_id": "chunk_1478", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1480", "url": "https://docs.streamlit.io/develop/tutorials/databases/bigquery", "title": "Still have questions?", "page_title": "Connect Streamlit to Google BigQuery - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1479", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1481", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Introduction", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Introduction", "content": "Introduction This guide explains how to securely access files on AWS S3 from Streamlit Community Cloud. It uses Streamlit FilesConnection, the s3fs library and optionally Streamlit's Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1482", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Create an S3 bucket and add a file", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Create an S3 bucket and add a file", "content": "Create an S3 bucket and add a file First, sign up for AWS or log in. Go to the S3 console and create a new bucket: Navigate to the upload section of your new bucket: And note down the \"AWS Region\" for later. In this example, it's us-east-1, but it may differ for you. Next, upload the following CSV file, which contains some example data:", "prev_chunk_id": "chunk_1481", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1483", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Create access keys", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Create access keys", "content": "Create access keys Go to the AWS console, create access keys as shown below and copy the \"Access Key ID\" and \"Secret Access Key\":", "prev_chunk_id": "chunk_1482", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1484", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Set up your AWS credentials locally", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Set up your AWS credentials locally", "content": "Set up your AWS credentials locally Streamlit FilesConnection and s3fs will read and use your existing AWS credentials and configuration if available - such as from an ~/.aws/credentials file or environment variables. If you don't already have this set up, or plan to host the app on Streamlit Community Cloud, you should specify the credentials from a file .streamlit/secrets.toml in your app's root directory or your home directory. Create this file if it doesn't exist yet and add to it the access key ID, access key secret, and the AWS default region you noted down earlier, as shown below:", "prev_chunk_id": "chunk_1483", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1485", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Copy your app secrets to the cloud", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Copy your app secrets to the cloud", "content": "Copy your app secrets to the cloud To host your app on Streamlit Community Cloud, you will need to pass your credentials to your deployed app via secrets. Go to the app dashboard and in the app's dropdown menu, click on Edit Secrets. Copy the content of secrets.toml above into the text area. More information is available at Secrets management.", "prev_chunk_id": "chunk_1484", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1486", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Add FilesConnection and s3fs to your requirements file", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Add FilesConnection and s3fs to your requirements file", "content": "Add FilesConnection and s3fs to your requirements file Add the FilesConnection and s3fs packages to your requirements.txt file, preferably pinning the versions (replace x.x.x with the version you want installed):", "prev_chunk_id": "chunk_1485", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1487", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Write your Streamlit app", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Write your Streamlit app", "content": "Write your Streamlit app Copy the code below to your Streamlit app and run it. Make sure to adapt the name of your bucket and file. Note that Streamlit automatically turns the access keys from your secrets file into environment variables, where s3fs searches for them by default. See st.connection above? This handles secrets retrieval, setup, result caching and retries. By default, read() results are cached without expiring. In this case, we set ttl=600 to ensure the file contents is cached for no longer than 10 minutes. You can also set ttl=0 to disable caching. Learn more in Caching. If everything worked out (and you used the example file given above), your app should look like this:", "prev_chunk_id": "chunk_1486", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1488", "url": "https://docs.streamlit.io/develop/tutorials/databases/aws-s3", "title": "Still have questions?", "page_title": "Connect Streamlit to AWS S3 - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1487", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1489", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/create-anchor-link", "title": "Overview", "page_title": "How do I create an anchor link? - Streamlit Docs", "breadcrumbs": "Overview", "content": "Overview Have you wanted to create anchors so that users of your app can directly navigate to specific sections by specifying #anchor in the URL? If so, let's find out how.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1490", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/create-anchor-link", "title": "Solution", "page_title": "How do I create an anchor link? - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution Anchors are automatically added to header text. For example, if you define a header text via the st.header() command as follows: Then you can create a link to this header using:", "prev_chunk_id": "chunk_1489", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1491", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/create-anchor-link", "title": "Examples", "page_title": "How do I create an anchor link? - Streamlit Docs", "breadcrumbs": "Examples", "content": "Examples - Demo app:https://dataprofessor-streamlit-anchor-app-80kk8w.streamlit.app/ - GitHub repo:https://github.com/dataprofessor/streamlit/blob/main/anchor_app.py", "prev_chunk_id": "chunk_1490", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1492", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit/create-anchor-link", "title": "Still have questions?", "page_title": "How do I create an anchor link? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1491", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1493", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app", "title": "Prep and deploy your app on Community Cloud", "page_title": "Prep and deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Prep and deploy your app on Community Cloud", "content": "Prep and deploy your app on Community Cloud Streamlit Community Cloud lets you deploy your apps in just one click, and most apps will be deployed in only a few minutes. If you don't have an app ready to deploy, you can fork or clone one from our App gallery—you can find apps for machine learning, data visualization, data exploration, A/B testing, and more. You can also Deploy an app from a template. After you've deployed your app, check out how you can Edit your app with GitHub Codespaces. The pages that follow explain how to organize your app and provide complete information for Community Cloud to run it correctly. When your app has everything it needs, deploying is easy. Just go to your workspace and click \"Create app\" in the upper-right corner. Follow the prompts to fill in your app's information, and then click \"Deploy.\"", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1494", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app", "title": "Summary", "page_title": "Prep and deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary The pages that follow explain how to organize your app and provide complete information for Community Cloud to run it correctly. When your app has everything it needs, deploying is easy. Just go to your workspace and click \"Create app\" in the upper-right corner. Follow the prompts to fill in your app's information, and then click \"Deploy.\"", "prev_chunk_id": "chunk_1493", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1495", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app", "title": "Still have questions?", "page_title": "Prep and deploy your app on Community Cloud - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1494", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1496", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started", "title": "Get started with Streamlit Community Cloud", "page_title": "Get started with Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Get started with Streamlit Community Cloud", "content": "Get started with Streamlit Community Cloud Welcome to Streamlit Community Cloud, where you can share your Streamlit apps with the world! Whether you've already created your first Streamlit app or you're just getting started, you're in the right place. First things first, you need to create your Streamlit Community Cloud account to start deploying apps. If you're looking for help to build your first Streamlit app, read our Get started docs for the Streamlit library. If you want to fork an app and start with an example, check out our App gallery. Either way, it only takes a few minutes to create your first app. If you're looking for more detailed instructions than the quickstart, try the following:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1497", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started", "title": "Quickstart", "page_title": "Get started with Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Quickstart", "content": "Quickstart Create your account and deploy an example app as fast as possible. Jump right into coding with GitHub Codespaces.", "prev_chunk_id": "chunk_1496", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1498", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started", "title": "Trust and Security", "page_title": "Get started with Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Trust and Security", "content": "Trust and Security Security first! If you want to read up on how we handle your data before you get started, we've got you covered.", "prev_chunk_id": "chunk_1497", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1499", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started", "title": "Still have questions?", "page_title": "Get started with Streamlit Community Cloud - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1498", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1500", "url": "https://docs.streamlit.io/deploy/concepts/dependencies", "title": "Managing dependencies when deploying your app", "page_title": "Managing dependencies when deploying your app - Streamlit Docs", "breadcrumbs": "Managing dependencies when deploying your app", "content": "Managing dependencies when deploying your app Before you began developing your app, you set up and configured your development environment by installing Python and Streamlit. When you deploy your app, you need to set up and configure your deployment environment in the same way. When you deploy your app to a cloud service, your app's Python server will be running on a remote machine. This remote machine will not have access all the files and programs on your personal computer. All Streamlit apps have at least two dependencies: Python and Streamlit. Your app may have additional dependencies in the form of Python packages or software that must be installed to properly execute your script. If you are using a service like Streamlit Community Cloud which is designed for Streamlit apps, we'll take care of Python and Streamlit for you!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1501", "url": "https://docs.streamlit.io/deploy/concepts/dependencies", "title": "Install Python and other software", "page_title": "Managing dependencies when deploying your app - Streamlit Docs", "breadcrumbs": "Install Python and other software", "content": "Install Python and other software If you are using Streamlit Community Cloud, Python is already installed. You can just pick the version in the deployment dialog. If you need to install Python yourself or you have other non-Python software to install, follow your platform's instructions to install additional software. You will commonly use a package management tool to do this. For example, Streamlit Community Cloud uses Advanced Package Tool (apt) for Debian-based Linux systems. For more information about installing non-Python depencies on Streamlit Community Cloud, see apt-get dependencies.", "prev_chunk_id": "chunk_1500", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1502", "url": "https://docs.streamlit.io/deploy/concepts/dependencies", "title": "Install Python packages", "page_title": "Managing dependencies when deploying your app - Streamlit Docs", "breadcrumbs": "Install Python packages", "content": "Install Python packages Once you have Python installed in your deployment environment, you'll need to install all the necessary Python packages, including Streamlit! With each import of an installed package, you add a Python dependency to your script. You need to install those dependencies in your deployment environment through a Python package manager. If you are using Streamlit Community Cloud, you'll have the latest version of Streamlit and all of its dependencies installed by default. So, if you're making a simple app and don't need additional dependencies, you won't have to do anything at all!", "prev_chunk_id": "chunk_1501", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1503", "url": "https://docs.streamlit.io/deploy/concepts/dependencies", "title": "pip and requirements.txt", "page_title": "Managing dependencies when deploying your app - Streamlit Docs", "breadcrumbs": "pip and requirements.txt", "content": "pip and requirements.txt Since pip comes by default with Python, the most common way to configure your Python environment is with a requirements.txt file. Each line of a requirements.txt file is a package to pip install. You should not include built-in Python libraries like math, random, or distutils in your requirements.txt file. These are a part of Python and aren't installed separately. If you have a script like the following, you would only need to install Streamlit. No extra dependencies would be needed since pandas and numpy are installed as direct dependencies of streamlit. Similarly, math and random are built into Python. However, it's a best practice accurately record packages you use, so the recommended requirements.txt file would be: If you needed to specify certain versions, another valid example would be: A requirements.txt file is commonly saved in the root of your repository or file directory. If you are using Streamlit Community Cloud, see Add Python dependencies for more information. Otherwise, check your platform's documentation.", "prev_chunk_id": "chunk_1502", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1504", "url": "https://docs.streamlit.io/deploy/concepts/dependencies", "title": "Still have questions?", "page_title": "Managing dependencies when deploying your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1503", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1505", "url": "https://docs.streamlit.io/develop/quick-reference/cheat-sheet", "title": "Streamlit API cheat sheet", "page_title": "Streamlit API cheat sheet - Streamlit Docs", "breadcrumbs": "Streamlit API cheat sheet", "content": "Streamlit API cheat sheet This is a summary of the docs for the latest version of Streamlit, v1.48.0.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1506", "url": "https://docs.streamlit.io/develop/quick-reference/cheat-sheet", "title": "Pre-release features", "page_title": "Streamlit API cheat sheet - Streamlit Docs", "breadcrumbs": "Pre-release features", "content": "Pre-release features Learn more about experimental features", "prev_chunk_id": "chunk_1505", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1507", "url": "https://docs.streamlit.io/develop/quick-reference/cheat-sheet", "title": "Display charts", "page_title": "Streamlit API cheat sheet - Streamlit Docs", "breadcrumbs": "Display charts", "content": "Display charts To use newer versions of Bokeh, see our custom component streamlit-bokeh.", "prev_chunk_id": "chunk_1506", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1508", "url": "https://docs.streamlit.io/develop/quick-reference/cheat-sheet", "title": "Build chat-based apps", "page_title": "Streamlit API cheat sheet - Streamlit Docs", "breadcrumbs": "Build chat-based apps", "content": "Build chat-based apps Learn how to Build a basic LLM chat app", "prev_chunk_id": "chunk_1507", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1509", "url": "https://docs.streamlit.io/develop/quick-reference/cheat-sheet", "title": "Still have questions?", "page_title": "Streamlit API cheat sheet - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1508", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1510", "url": "https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest", "title": "Get AppTest script elements", "page_title": "st.testing.v1.AppTest - Streamlit Docs", "breadcrumbs": "Get AppTest script elements", "content": "Get AppTest script elements The main value of AppTest is providing an API to programmatically inspect and interact with the elements and widgets produced by a running Streamlit app. Using the AppTest.<element type> properties or AppTest.get() method returns a collection of all the elements or widgets of the specified type that would have been displayed by running the app. Note that you can also retrieve elements within a specific container in the same way - first retrieve the container, then retrieve the elements just in that container.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1511", "url": "https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest", "title": "Still have questions?", "page_title": "st.testing.v1.AppTest - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1510", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1512", "url": "https://docs.streamlit.io/develop/api-reference/configuration/st.set_page_config", "title": "Still have questions?", "page_title": "st.set_page_config - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1513", "url": "https://docs.streamlit.io/develop/api-reference/configuration/st.set_option", "title": "Still have questions?", "page_title": "st.set_option - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1514", "url": "https://docs.streamlit.io/develop/api-reference/configuration/st.get_option", "title": "Still have questions?", "page_title": "st.get_option - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1515", "url": "https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.iframe", "title": "Still have questions?", "page_title": "st.components.v1.iframe - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1516", "url": "https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.html", "title": "Still have questions?", "page_title": "st.components.v1.html - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1517", "url": "https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.declare_component", "title": "Still have questions?", "page_title": "st.components.v1.declare_component - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1518", "url": "https://docs.streamlit.io/develop/api-reference/connections/secrets.toml", "title": "secrets.toml", "page_title": "secrets.toml - Streamlit Docs", "breadcrumbs": "secrets.toml", "content": "secrets.toml secrets.toml is an optional file you can define for your working directory or global development environment. When secrets.toml is defined both globally and in your working directory, Streamlit combines the secrets and gives precendence to the working-directory secrets. For more information, see Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1519", "url": "https://docs.streamlit.io/develop/api-reference/connections/secrets.toml", "title": "File location", "page_title": "secrets.toml - Streamlit Docs", "breadcrumbs": "File location", "content": "File location To define your secrets locally or per-project, add .streamlit/secrets.toml to your working directory. Your working directory is wherever you call streamlit run. If you haven't previously created the .streamlit directory, you will need to add it. To define your configuration globally, you must first locate your global .streamlit directory. Streamlit adds this hidden directory to your OS user profile during installation. For MacOS/Linux, this will be ~/.streamlit/secrets.toml. For Windows, this will be %userprofile%/.streamlit/secrets.toml. Optionally, you can change where Streamlit searches for secrets through the configuration option, secrets.files.", "prev_chunk_id": "chunk_1518", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1520", "url": "https://docs.streamlit.io/develop/api-reference/connections/secrets.toml", "title": "File format", "page_title": "secrets.toml - Streamlit Docs", "breadcrumbs": "File format", "content": "File format secrets.toml is a TOML file.", "prev_chunk_id": "chunk_1519", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1521", "url": "https://docs.streamlit.io/develop/api-reference/connections/secrets.toml", "title": "Example", "page_title": "secrets.toml - Streamlit Docs", "breadcrumbs": "Example", "content": "Example In your Streamlit app, the following values would be true:", "prev_chunk_id": "chunk_1520", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1522", "url": "https://docs.streamlit.io/develop/api-reference/connections/secrets.toml", "title": "Still have questions?", "page_title": "secrets.toml - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1521", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1523", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.secrets", "title": "st.secrets", "page_title": "st.secrets - Streamlit Docs", "breadcrumbs": "st.secrets", "content": "st.secrets st.secrets provides a dictionary-like interface to access secrets stored in a secrets.toml file. It behaves similarly to st.session_state. st.secrets can be used with both key and attribute notation. For example, st.secrets.your_key and st.secrets[\"your_key\"] refer to the same value. For more information about using st.secrets, see Secrets management.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1524", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.secrets", "title": "secrets.toml", "page_title": "st.secrets - Streamlit Docs", "breadcrumbs": "secrets.toml", "content": "secrets.toml By default, secrets can be saved globally or per-project. When both types of secrets are saved, Streamlit will combine the saved values but give precedence to per-project secrets if there are duplicate keys. For information on how to format and locate your secrets.toml file for your development environment, see secrets.toml.", "prev_chunk_id": "chunk_1523", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1525", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.secrets", "title": "Configure secrets locations", "page_title": "st.secrets - Streamlit Docs", "breadcrumbs": "Configure secrets locations", "content": "Configure secrets locations You can configure where Streamlit searches for secrets through the configuration option, secrets.files. With this option, you can list additional secrets locations and change the order of precedence. You can specify other TOML files or include Kubernetes style secret files.", "prev_chunk_id": "chunk_1524", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1526", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.secrets", "title": "Example", "page_title": "st.secrets - Streamlit Docs", "breadcrumbs": "Example", "content": "Example In your Streamlit app, the following values would be true:", "prev_chunk_id": "chunk_1525", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1527", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.secrets", "title": "Still have questions?", "page_title": "st.secrets - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1526", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1528", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.baseconnection", "title": "Still have questions?", "page_title": "st.connections.BaseConnection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1529", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.sqlconnection", "title": "Still have questions?", "page_title": "st.connections.SQLConnection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1530", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowflakeconnection", "title": "Still have questions?", "page_title": "st.connections.SnowflakeConnection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1531", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Streamlit trust and security", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Streamlit trust and security", "content": "Streamlit trust and security Streamlit is a framework that turns Python scripts into interactive apps, giving data scientists the ability to quickly create data and model-based apps for the entire company. A simple Streamlit app is: When you streamlit run my_app.py, you start a web server that runs the interactive application on your local computer at http://localhost:8501. This is great for local development. When you want to share with your colleagues, Streamlit Community Cloud enables you to deploy and run these applications in the cloud. Streamlit Community Cloud handles the details of containerization and provides you an interface for easily managing your deployed apps. This document provides an overview of the security safeguards we've implemented to protect you and your data. Security, however, is a shared responsibility and you are ultimately responsible for making appropriate use of Streamlit and the Streamlit Community Cloud, including implementation of appropriate user-configurable security safeguards and best practices.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1532", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Authentication", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Authentication", "content": "Authentication You must authenticate through GitHub to deploy or administer an app. Authentication through Google or single-use emailed links are required to view a private app when you don't have push or admin permissions on the associated GitHub repository. The single-use emailed links are valid for 15 minutes once requested.", "prev_chunk_id": "chunk_1531", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1533", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Permissions", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Permissions", "content": "Permissions Streamlit Community Cloud inherits the permissions you have assigned in GitHub. Users with write access to a GitHub repository for a given app will be able to make changes in the Streamlit administrative console. However, only users with admin access to a repository are able to deploy and delete apps.", "prev_chunk_id": "chunk_1532", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1534", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Data hosting", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Data hosting", "content": "Data hosting Our physical infrastructure is hosted and managed within secure data centers maintained by infrastructure-as-a-service cloud providers. Streamlit leverages many of these platforms' built-in security, privacy, and redundancy features. Our cloud providers continually monitor their data centers for risk and undergo assessments to ensure compliance with industry standards.", "prev_chunk_id": "chunk_1533", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1535", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Data deletion", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Data deletion", "content": "Data deletion Community Cloud users have the option to delete any apps they’ve deployed as well as their entire account. When a user deletes their application from the admin console, we delete their source code, including any files copied from their GitHub repository or created within our system from the running app. However, we keep a record representing the application in our database. This record contains the coordinates of the application: the GitHub organization or user, the GitHub repository, the branch, and the path of the main module file. When a user deletes their account, we perform a hard deletion of their data and a hard deletion of all the apps that belong to the GitHub identity associated with their account. In this case, we do not maintain the records of application coordinates described above. When an account is deleted, we also delete any HubSpot contact associated with the Community Cloud account.", "prev_chunk_id": "chunk_1534", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1536", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Virtual private cloud", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Virtual private cloud", "content": "Virtual private cloud All of our servers are within a virtual private cloud (VPC) with firewalls and network access control lists (ACLs) to allow external access to a select few API endpoints; all other internal services are only accessible within the VPC.", "prev_chunk_id": "chunk_1535", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1537", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Encryption", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Encryption", "content": "Encryption Streamlit apps are served entirely over HTTPS. We use only strong cipher suites and HTTP Strict Transport Security (HSTS) to ensure browsers interact with Streamlit apps over HTTPS. All data sent to or from Streamlit over the public internet is encrypted in transit using 256-bit encryption. Our API and application endpoints use Transport Layer Security (TLS) 1.2 (or better). We also encrypt data at rest on disk using AES-256.", "prev_chunk_id": "chunk_1536", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1538", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Permissions and authentication", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Permissions and authentication", "content": "Permissions and authentication Access to Community Cloud user account data is limited to authorized personnel. We run a zero-trust corporate network, utilize single sign-on and multi-factor authentication (MFA), and enforce strong password policies to ensure access to cloud-related services is protected.", "prev_chunk_id": "chunk_1537", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1539", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Incident response", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Incident response", "content": "Incident response Our internal protocol for handling security events includes detection, analysis, response, escalation, and mitigation. Security advisories are made available at https://streamlit.io/advisories.", "prev_chunk_id": "chunk_1538", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1540", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Penetration testing", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Penetration testing", "content": "Penetration testing Streamlit uses third-party security tools to scan for vulnerabilities on a regular basis. Our security teams conduct periodic, intensive penetration tests on the Streamlit platform. Our product development team responds to any identified issues or potential vulnerabilities to ensure the quality, security, and availability of Streamlit applications.", "prev_chunk_id": "chunk_1539", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1541", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Vulnerability management", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Vulnerability management", "content": "Vulnerability management We keep our systems up-to-date with the latest security patches and continuously monitor for new vulnerabilities. This includes automated scanning of our code repositories for vulnerable dependencies. If you discover a vulnerability in one of our products or websites, please report the issue to HackerOne.", "prev_chunk_id": "chunk_1540", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1542", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/trust-and-security?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Still have questions?", "page_title": "Streamlit Trust and Security - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1541", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1543", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Quickstart", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Quickstart", "content": "Quickstart This is a concise set of steps to create your Streamlit Community Cloud account, deploy a sample app, and start editing it with GitHub Codespaces. For other options and complete explanations, start with Create your account. You will sign in to your GitHub account during this process. Community Cloud will use the email from your GitHub account to create your Community Cloud account. For other sign-in options, see Create your account.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1544", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Prerequisites", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - You must have a GitHub account.", "prev_chunk_id": "chunk_1543", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1545", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Sign up for Streamlit Community Cloud", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Sign up for Streamlit Community Cloud", "content": "Sign up for Streamlit Community Cloud - Go toshare.streamlit.io. - Click \"Continue to sign-in.\" - Click \"Continue with GitHub.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Fill in your account information, and click \"I accept\" at the bottom.", "prev_chunk_id": "chunk_1544", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1546", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Add access to your public repositories", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Add access to your public repositories", "content": "Add access to your public repositories - In the upper-left corner, click \"Workspaceswarning.\" - From the drop down, click \"Connect GitHub account.\" - Enter your GitHub credentials and follow GitHub's authentication prompts. - Click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_1545", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1547", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Optional: Add access to private repositories", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Optional: Add access to private repositories", "content": "Optional: Add access to private repositories - In the upper-left corner, click on your GitHub username. - From the drop down, click \"Settings.\" - On the left side of the dialog, select \"Linked accounts.\" - Under \"Source control,\" click \"Connect herearrow_forward.\" - Click \"Authorize streamlit.\"", "prev_chunk_id": "chunk_1546", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1548", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Create a new app from a template", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Create a new app from a template", "content": "Create a new app from a template - In the upper-right corner, click \"Create app.\" - When asked \"Do you already have an app?\" click \"Nope, create one from a template.\" - From the list of templates on the left, select \"Blank app.\" - At the bottom, select the option to \"Open GitHub Codespaces...\" - At the bottom, click \"Deploy.\"", "prev_chunk_id": "chunk_1547", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1549", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Edit your app in GitHub Codespaces", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Edit your app in GitHub Codespaces", "content": "Edit your app in GitHub Codespaces - Wait for GitHub to set up your codespace.It can take several minutes to fully initialize your codespace. After the Visual Studio Code editor appears in your codespace, it can take several minutes to install Python and start the Streamlit server. When complete, a split screen view displays a code editor on the left and a running app on the right. The code editor opens two tabs by default: the repository's readme file and the app's entrypoint file. - Go to the app's entrypoint file (streamlit_app.py) in the left pane, and change line 3 by adding \"Streamlit\" insidest.title.-st.title(\"🎈 My new app\") +st.title(\"🎈 My new Streamlit app\")Files are automatically saved in your codespace with each edit. - A moment after typing a change, your app on the right side will display a rerun prompt. Click \"Always rerun.\"If the rerun prompt disappears before you click it, you can hover over the overflow menu icon (more_vert) to bring it back. - Optional: Continue to make edits and observe the changes within seconds.", "prev_chunk_id": "chunk_1548", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1550", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Publish your changes", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Publish your changes", "content": "Publish your changes - In the left navigation bar, click the source control icon. - In the source control sidebar on the left, enter a name for your commit. - Click \"checkCommit.\" - To stage and commit all your changes, in the confirmation dialog, click \"Yes.\" Your changes are committed locally in your codespace. - To push your commit to GitHub, in the source control sidebar on the left, click \"cached1arrow_upward.\" - To push commits to \"origin/main,\" in the confirmation dialog, click \"OK.\"Your changes are now saved to your GitHub repository. Community Cloud will immediately reflect the changes in your deployed app. - Optional: To see your updated, published app, return to the \"My apps\" section of your workspace atshare.streamlit.io, and click on your app.", "prev_chunk_id": "chunk_1549", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1551", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Stop or delete your codespace", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Stop or delete your codespace", "content": "Stop or delete your codespace When you stop interacting with your codespace, GitHub will generally stop your codespace for you. However, the surest way to avoid undesired use of your capacity is to stop or delete your codespace when you are done. - Go togithub.com/codespaces. At the bottom of the page, all your codespaces are listed. Click the overflow menu icon (more_horiz) for your codespace. - If you want to return to your work later, click \"Stop codespace.\" Otherwise, click \"Delete.\" - Congratulations! You just deployed an app to Streamlit Community Cloud. 🎉 Return to your workspace atshare.streamlit.io/anddeploy another Streamlit app.", "prev_chunk_id": "chunk_1550", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1552", "url": "https://docs.streamlit.io/deploy/streamlit-community-cloud/get-started/quickstart?slug=deploy&slug=streamlit-community-cloud&slug=get-started", "title": "Still have questions?", "page_title": "Quickstart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1551", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1553", "url": "https://docs.streamlit.io/develop/api-reference/connections/st.connection", "title": "Still have questions?", "page_title": "st.connection - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1554", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params", "title": "st.query_params", "page_title": "st.query_params - Streamlit Docs", "breadcrumbs": "st.query_params", "content": "st.query_params st.query_params provides a dictionary-like interface to access query parameters in your app's URL and is available as of Streamlit 1.30.0. It behaves similarly to st.session_state with the notable exception that keys may be repeated in an app's URL. Handling of repeated keys requires special consideration as explained below. st.query_params can be used with both key and attribute notation. For example, st.query_params.my_key and st.query_params[\"my_key\"]. All keys and values will be set and returned as strings. When you write to st.query_params, key-value pair prefixed with ? is added to the end of your app's URL. Each additional pair is prefixed with & instead of ?. Query parameters are cleared when navigating between pages in a multipage app. For example, consider the following URL: The parameters in the URL above will be accessible in st.query_params as: This means you can use those parameters in your app like this:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1555", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params", "title": "Repeated keys", "page_title": "st.query_params - Streamlit Docs", "breadcrumbs": "Repeated keys", "content": "Repeated keys When a key is repeated in your app's URL (?a=1&a=2&a=3), dict-like methods will return only the last value. In this example, st.query_params[\"a\"] returns \"3\". To get all keys as a list, use the .get_all() method shown below. To set the value of a repeated key, assign the values as a list. For example, st.query_params.a = [\"1\", \"2\", \"3\"] produces the repeated key given at the beginning of this paragraph.", "prev_chunk_id": "chunk_1554", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1556", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params", "title": "Limitation", "page_title": "st.query_params - Streamlit Docs", "breadcrumbs": "Limitation", "content": "Limitation st.query_params can't get or set embedding settings as described in Embed your app. st.query_params.embed and st.query_params.embed_options will raise an AttributeError or StreamlitAPIException when trying to get or set their values, respectively.", "prev_chunk_id": "chunk_1555", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1557", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params", "title": "Still have questions?", "page_title": "st.query_params - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1556", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1558", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Session State", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Session State", "content": "Session State Session State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks. Session state also persists across apps inside a multipage app. Check out this Session State basics tutorial video by Streamlit Developer Advocate Dr. Marisa Smith to get started:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1559", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Initialize values in Session State", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Initialize values in Session State", "content": "Initialize values in Session State The Session State API follows a field-based API, which is very similar to Python dictionaries:", "prev_chunk_id": "chunk_1558", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1560", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Reads and updates", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Reads and updates", "content": "Reads and updates Read the value of an item in Session State and display it by passing to st.write : Update an item in Session State by assigning it a value: Curious about what is in Session State? Use st.write or magic: Streamlit throws a handy exception if an uninitialized variable is accessed:", "prev_chunk_id": "chunk_1559", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1561", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Delete items", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Delete items", "content": "Delete items Delete items in Session State using the syntax to delete items in any Python dictionary: Session State can also be cleared by going to Settings → Clear Cache, followed by Rerunning the app.", "prev_chunk_id": "chunk_1560", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1562", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Session State and Widget State association", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Session State and Widget State association", "content": "Session State and Widget State association Every widget with a key is automatically added to Session State:", "prev_chunk_id": "chunk_1561", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1563", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Use Callbacks to update Session State", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Use Callbacks to update Session State", "content": "Use Callbacks to update Session State A callback is a python function which gets called when an input widget changes. Order of execution: When updating Session state in response to events, a callback function gets executed first, and then the app is executed from top to bottom. Callbacks can be used with widgets using the parameters on_change (or on_click), args, and kwargs: Parameters - on_changeoron_click- The function name to be used as a callback - args(tuple) - List of arguments to be passed to the callback function - kwargs(dict) - Named arguments to be passed to the callback function Widgets which support the on_change event: - st.checkbox - st.color_picker - st.date_input - st.data_editor - st.file_uploader - st.multiselect - st.number_input - st.radio - st.select_slider - st.selectbox - st.slider - st.text_area - st.text_input - st.time_input - st.toggle Widgets which support the on_click event: - st.button - st.download_button - st.form_submit_button To add a callback, define a callback function above the widget declaration and pass it to the widget via the on_change (or on_click ) parameter.", "prev_chunk_id": "chunk_1562", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1564", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Forms and Callbacks", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Forms and Callbacks", "content": "Forms and Callbacks Widgets inside a form can have their values be accessed and set via the Session State API. st.form_submit_button can have a callback associated with it. The callback gets executed upon clicking on the submit button. For example:", "prev_chunk_id": "chunk_1563", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1565", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Serializable Session State", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Serializable Session State", "content": "Serializable Session State Serialization refers to the process of converting an object or data structure into a format that can be persisted and shared, and allowing you to recover the data’s original structure. Python’s built-in pickle module serializes Python objects to a byte stream (\"pickling\") and deserializes the stream into an object (\"unpickling\"). By default, Streamlit’s Session State allows you to persist any Python object for the duration of the session, irrespective of the object’s pickle-serializability. This property lets you store Python primitives such as integers, floating-point numbers, complex numbers and booleans, dataframes, and even lambdas returned by functions. However, some execution environments may require serializing all data in Session State, so it may be useful to detect incompatibility during development, or when the execution environment will stop supporting it in the future. To that end, Streamlit provides a runner.enforceSerializableSessionState configuration option that, when set to true, only allows pickle-serializable objects in Session State. To enable the option, either create a global or project config file with the following or use it as a command-line flag: By \"pickle-serializable\", we mean calling pickle.dumps(obj) should not raise a PicklingError exception. When the config option is enabled, adding unserializable data to session state should result in an exception. E.g.,", "prev_chunk_id": "chunk_1564", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1566", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Caveats and limitations", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Caveats and limitations", "content": "Caveats and limitations - Only thest.form_submit_buttonhas a callback in forms. Other widgets inside a form are not allowed to have callbacks. - on_changeandon_clickevents are only supported on input type widgets. - Modifying the value of a widget via the Session state API, after instantiating it, is not allowed and will raise aStreamlitAPIException. For example:slider = st.slider( label='My Slider', min_value=1, max_value=10, value=5, key='my_slider') st.session_state.my_slider = 7 # Throws an exception! - Setting the widget state via the Session State API and using thevalueparameter in the widget declaration is not recommended, and will throw a warning on the first run. For example:st.session_state.my_slider = 7 slider = st.slider( label='Choose a Value', min_value=1, max_value=10, value=5, key='my_slider') - Setting the state of button-like widgets:st.button,st.download_button, andst.file_uploadervia the Session State API is not allowed. Such type of widgets are by defaultFalseand have ephemeralTruestates which are only valid for a single run. For example:if 'my_button' not in st.session_state: st.session_state.my_button = True st.button('My button', key='my_button') # Throws an exception!", "prev_chunk_id": "chunk_1565", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1567", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state", "title": "Still have questions?", "page_title": "Session State - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1566", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1568", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource", "title": "Example", "page_title": "st.cache_resource - Streamlit Docs", "breadcrumbs": "Example", "content": "Example In the example below, pressing the \"Clear All\" button will clear all cache_resource caches. i.e. Clears cached global resources from all functions decorated with @st.cache_resource.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1569", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource", "title": "Static elements", "page_title": "st.cache_resource - Streamlit Docs", "breadcrumbs": "Static elements", "content": "Static elements Since version 1.16.0, cached functions can contain Streamlit commands! For example, you can do this: As we know, Streamlit only runs this function if it hasn’t been cached before. On this first run, the st.success message will appear in the app. But what happens on subsequent runs? It still shows up! Streamlit realizes that there is an st. command inside the cached function, saves it during the first run, and replays it on subsequent runs. Replaying static elements works for both caching decorators. You can also use this functionality to cache entire parts of your UI:", "prev_chunk_id": "chunk_1568", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1570", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource", "title": "Input widgets", "page_title": "st.cache_resource - Streamlit Docs", "breadcrumbs": "Input widgets", "content": "Input widgets You can also use interactive input widgets like st.slider or st.text_input in cached functions. Widget replay is an experimental feature at the moment. To enable it, you need to set the experimental_allow_widgets parameter: Streamlit treats the checkbox like an additional input parameter to the cached function. If you uncheck it, Streamlit will see if it has already cached the function for this checkbox state. If yes, it will return the cached value. If not, it will rerun the function using the new slider value. Using widgets in cached functions is extremely powerful because it lets you cache entire parts of your app. But it can be dangerous! Since Streamlit treats the widget value as an additional input parameter, it can easily lead to excessive memory usage. Imagine your cached function has five sliders and returns a 100 MB DataFrame. Then we’ll add 100 MB to the cache for every permutation of these five slider values – even if the sliders do not influence the returned data! These additions can make your cache explode very quickly. Please be aware of this limitation if you use widgets in cached functions. We recommend using this feature only for isolated parts of your UI where the widgets directly influence the cached return value.", "prev_chunk_id": "chunk_1569", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1571", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource", "title": "Still have questions?", "page_title": "st.cache_resource - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1570", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1572", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data", "title": "Example", "page_title": "st.cache_data - Streamlit Docs", "breadcrumbs": "Example", "content": "Example In the example below, pressing the \"Clear All\" button will clear memoized values from all functions decorated with @st.cache_data.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1573", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data", "title": "Static elements", "page_title": "st.cache_data - Streamlit Docs", "breadcrumbs": "Static elements", "content": "Static elements Since version 1.16.0, cached functions can contain Streamlit commands! For example, you can do this: As we know, Streamlit only runs this function if it hasn’t been cached before. On this first run, the st.success message will appear in the app. But what happens on subsequent runs? It still shows up! Streamlit realizes that there is an st. command inside the cached function, saves it during the first run, and replays it on subsequent runs. Replaying static elements works for both caching decorators. You can also use this functionality to cache entire parts of your UI:", "prev_chunk_id": "chunk_1572", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1574", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data", "title": "Input widgets", "page_title": "st.cache_data - Streamlit Docs", "breadcrumbs": "Input widgets", "content": "Input widgets You can also use interactive input widgets like st.slider or st.text_input in cached functions. Widget replay is an experimental feature at the moment. To enable it, you need to set the experimental_allow_widgets parameter: Streamlit treats the slider like an additional input parameter to the cached function. If you change the slider position, Streamlit will see if it has already cached the function for this slider value. If yes, it will return the cached value. If not, it will rerun the function using the new slider value. Using widgets in cached functions is extremely powerful because it lets you cache entire parts of your app. But it can be dangerous! Since Streamlit treats the widget value as an additional input parameter, it can easily lead to excessive memory usage. Imagine your cached function has five sliders and returns a 100 MB DataFrame. Then we’ll add 100 MB to the cache for every permutation of these five slider values – even if the sliders do not influence the returned data! These additions can make your cache explode very quickly. Please be aware of this limitation if you use widgets in cached functions. We recommend using this feature only for isolated parts of your UI where the widgets directly influence the cached return value.", "prev_chunk_id": "chunk_1573", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1575", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data", "title": "Still have questions?", "page_title": "st.cache_data - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1574", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1576", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.stop", "title": "Still have questions?", "page_title": "st.stop - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1577", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.rerun", "title": "Caveats for st.rerun", "page_title": "st.rerun - Streamlit Docs", "breadcrumbs": "Caveats for st.rerun", "content": "Caveats for st.rerun st.rerun is one of the tools to control the logic of your app. While it is great for prototyping, there can be adverse side effects: - Additional script runs may be inefficient and slower. - Excessive reruns may complicate your app's logic and be harder to follow. - If misused, infinite looping may crash your app. In many cases where st.rerun works, callbacks may be a cleaner alternative. Containers may also be helpful.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1578", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.rerun", "title": "Still have questions?", "page_title": "st.rerun - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1577", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1579", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.fragment", "title": "Still have questions?", "page_title": "st.fragment - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1580", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.form", "title": "Still have questions?", "page_title": "st.form - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1581", "url": "https://docs.streamlit.io/develop/api-reference/navigation/st.switch_page", "title": "Still have questions?", "page_title": "st.switch_page - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1582", "url": "https://docs.streamlit.io/develop/api-reference/navigation/st.page", "title": "Still have questions?", "page_title": "st.Page - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1583", "url": "https://docs.streamlit.io/develop/api-reference/user/st.user", "title": "Community Cloud", "page_title": "st.user - Streamlit Docs", "breadcrumbs": "Community Cloud", "content": "Community Cloud Starting from Streamlit version 1.42.0, you can't use st.user to retrieve a user's Community Cloud account email. To access user information, you must set up an identity provider and configure authentication ([auth]) in your app's secrets. Remember to update your identity provider's configuration and your app's secrets to allow your new domain. A list of IP addresses used by Community Cloud is available if needed. An authentication-configured app counts as your single allowed private app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1584", "url": "https://docs.streamlit.io/develop/api-reference/user/st.user", "title": "Still have questions?", "page_title": "st.user - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1583", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1585", "url": "https://docs.streamlit.io/develop/api-reference/user/st.logout", "title": "Still have questions?", "page_title": "st.logout - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1586", "url": "https://docs.streamlit.io/develop/api-reference/user/st.login", "title": "Still have questions?", "page_title": "st.login - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1587", "url": "https://docs.streamlit.io/develop/api-reference/status/st.exception", "title": "Still have questions?", "page_title": "st.exception - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1588", "url": "https://docs.streamlit.io/develop/api-reference/status/st.error", "title": "Still have questions?", "page_title": "st.error - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1589", "url": "https://docs.streamlit.io/develop/api-reference/status/st.warning", "title": "Still have questions?", "page_title": "st.warning - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1590", "url": "https://docs.streamlit.io/develop/api-reference/status/st.info", "title": "Still have questions?", "page_title": "st.info - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1591", "url": "https://docs.streamlit.io/develop/api-reference/status/st.success", "title": "Still have questions?", "page_title": "st.success - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1592", "url": "https://docs.streamlit.io/develop/api-reference/status/st.snow", "title": "Still have questions?", "page_title": "st.snow - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1593", "url": "https://docs.streamlit.io/develop/api-reference/status/st.balloons", "title": "Still have questions?", "page_title": "st.balloons - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1594", "url": "https://docs.streamlit.io/develop/api-reference/status/st.toast", "title": "Still have questions?", "page_title": "st.toast - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1595", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.experimental_rerun", "title": "Still have questions?", "page_title": "st.experimental_rerun - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1596", "url": "https://docs.streamlit.io/develop/api-reference/status/st.spinner", "title": "Still have questions?", "page_title": "st.spinner - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1597", "url": "https://docs.streamlit.io/develop/api-reference/status/st.progress", "title": "Still have questions?", "page_title": "st.progress - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1598", "url": "https://docs.streamlit.io/develop/api-reference/status/st.status", "title": "Still have questions?", "page_title": "st.status - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1599", "url": "https://docs.streamlit.io/develop/api-reference/chat/st.chat_message", "title": "Still have questions?", "page_title": "st.chat_message - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1600", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.tabs", "title": "Still have questions?", "page_title": "st.tabs - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1601", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.sidebar", "title": "Add widgets to sidebar", "page_title": "st.sidebar - Streamlit Docs", "breadcrumbs": "Add widgets to sidebar", "content": "Add widgets to sidebar Not only can you add interactivity to your app with widgets, you can organize them into a sidebar. Elements can be passed to st.sidebar using object notation and with notation. The following two snippets are equivalent: Each element that's passed to st.sidebar is pinned to the left, allowing users to focus on the content in your app. Here's an example of how you'd add a selectbox and a radio button to your sidebar: Here's an example of how you'd add st.echo and st.spinner to your sidebar:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1602", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.sidebar", "title": "Still have questions?", "page_title": "st.sidebar - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1601", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1603", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.popover", "title": "Still have questions?", "page_title": "st.popover - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1604", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.expander", "title": "Still have questions?", "page_title": "st.expander - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1605", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.empty", "title": "Still have questions?", "page_title": "st.empty - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1606", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.columns", "title": "Still have questions?", "page_title": "st.columns - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1607", "url": "https://docs.streamlit.io/develop/api-reference/media/st.video", "title": "Still have questions?", "page_title": "st.video - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1608", "url": "https://docs.streamlit.io/develop/api-reference/media/st.audio", "title": "Still have questions?", "page_title": "st.audio - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1609", "url": "https://docs.streamlit.io/develop/api-reference/media/st.logo", "title": "Still have questions?", "page_title": "st.logo - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1610", "url": "https://docs.streamlit.io/develop/api-reference/media/st.image", "title": "Still have questions?", "page_title": "st.image - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1611", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input", "title": "Image processing examples", "page_title": "st.camera_input - Streamlit Docs", "breadcrumbs": "Image processing examples", "content": "Image processing examples You can use the output of st.camera_input for various downstream tasks, including image processing. Below, we demonstrate how to use the st.camera_input widget with popular image and data processing libraries such as Pillow, NumPy, OpenCV, TensorFlow, torchvision, and PyTorch. While we provide examples for the most popular use-cases and libraries, you are welcome to adapt these examples to your own needs and favorite libraries.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1612", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input", "title": "Pillow (PIL) and NumPy", "page_title": "st.camera_input - Streamlit Docs", "breadcrumbs": "Pillow (PIL) and NumPy", "content": "Pillow (PIL) and NumPy Ensure you have installed Pillow and NumPy. To read the image file buffer as a PIL Image and convert it to a NumPy array:", "prev_chunk_id": "chunk_1611", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1613", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input", "title": "OpenCV (cv2)", "page_title": "st.camera_input - Streamlit Docs", "breadcrumbs": "OpenCV (cv2)", "content": "OpenCV (cv2) Ensure you have installed OpenCV and NumPy. To read the image file buffer with OpenCV:", "prev_chunk_id": "chunk_1612", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1614", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input", "title": "TensorFlow", "page_title": "st.camera_input - Streamlit Docs", "breadcrumbs": "TensorFlow", "content": "TensorFlow Ensure you have installed TensorFlow. To read the image file buffer as a 3 dimensional uint8 tensor with TensorFlow:", "prev_chunk_id": "chunk_1613", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1615", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input", "title": "Torchvision", "page_title": "st.camera_input - Streamlit Docs", "breadcrumbs": "Torchvision", "content": "Torchvision Ensure you have installed Torchvision (it is not bundled with PyTorch) and PyTorch. To read the image file buffer as a 3 dimensional uint8 tensor with torchvision.io:", "prev_chunk_id": "chunk_1614", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1616", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input", "title": "PyTorch", "page_title": "st.camera_input - Streamlit Docs", "breadcrumbs": "PyTorch", "content": "PyTorch Ensure you have installed PyTorch and NumPy. To read the image file buffer as a 3 dimensional uint8 tensor with PyTorch:", "prev_chunk_id": "chunk_1615", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1617", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input", "title": "Still have questions?", "page_title": "st.camera_input - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1616", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1618", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.file_uploader", "title": "Still have questions?", "page_title": "st.file_uploader - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1619", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.audio_input", "title": "Still have questions?", "page_title": "st.audio_input - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1620", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.text_input", "title": "Still have questions?", "page_title": "st.text_input - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1621", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.text_area", "title": "Still have questions?", "page_title": "st.text_area - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1622", "url": "https://docs.streamlit.io/develop/api-reference/chat/st.chat_input", "title": "Still have questions?", "page_title": "st.chat_input - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1623", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.time_input", "title": "Still have questions?", "page_title": "st.time_input - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1624", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.date_input", "title": "Still have questions?", "page_title": "st.date_input - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1625", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.slider", "title": "Featured videos", "page_title": "st.slider - Streamlit Docs", "breadcrumbs": "Featured videos", "content": "Featured videos Check out our video on how to use one of Streamlit's core functions, the slider! In the video below, we'll take it a step further and make a double-ended slider.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1626", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.slider", "title": "Still have questions?", "page_title": "st.slider - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1625", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1627", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.number_input", "title": "Still have questions?", "page_title": "st.number_input - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1628", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.toggle", "title": "Still have questions?", "page_title": "st.toggle - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1629", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.select_slider", "title": "Featured videos", "page_title": "st.select_slider - Streamlit Docs", "breadcrumbs": "Featured videos", "content": "Featured videos Check out our video on how to use one of Streamlit's core functions, the select slider! 🎈 In the video below, we'll take it a step further and make a double-ended slider.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1630", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.select_slider", "title": "Still have questions?", "page_title": "st.select_slider - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1629", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1631", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.selectbox", "title": "Still have questions?", "page_title": "st.selectbox - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1632", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.segmented_control", "title": "Still have questions?", "page_title": "st.segmented_control - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1633", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.radio", "title": "Featured videos", "page_title": "st.radio - Streamlit Docs", "breadcrumbs": "Featured videos", "content": "Featured videos Check out our video on how to use one of Streamlit's core functions, the radio button! 🔘 In the video below, we'll take it a step further and learn how to combine a button, checkbox and radio button!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1634", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.radio", "title": "Still have questions?", "page_title": "st.radio - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1633", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1635", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.pills", "title": "Still have questions?", "page_title": "st.pills - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1636", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.multiselect", "title": "Still have questions?", "page_title": "st.multiselect - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1637", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.feedback", "title": "Still have questions?", "page_title": "st.feedback - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1638", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.color_picker", "title": "Still have questions?", "page_title": "st.color_picker - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1639", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.checkbox", "title": "Featured videos", "page_title": "st.checkbox - Streamlit Docs", "breadcrumbs": "Featured videos", "content": "Featured videos Check out our video on how to use one of Streamlit's core functions, the checkbox! ☑ In the video below, we'll take it a step further and learn how to combine a button, checkbox and radio button!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1640", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.checkbox", "title": "Still have questions?", "page_title": "st.checkbox - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1639", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1641", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.page_link", "title": "Still have questions?", "page_title": "st.page_link - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1642", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.link_button", "title": "Still have questions?", "page_title": "st.link_button - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1643", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.form_submit_button", "title": "Still have questions?", "page_title": "st.form_submit_button - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1644", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.download_button", "title": "Still have questions?", "page_title": "st.download_button - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1645", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.button", "title": "Advanced functionality", "page_title": "st.button - Streamlit Docs", "breadcrumbs": "Advanced functionality", "content": "Advanced functionality Although a button is the simplest of input widgets, it's very common for buttons to be deeply tied to the use of st.session_state. Check out our advanced guide on Button behavior and examples.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1646", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.button", "title": "Featured videos", "page_title": "st.button - Streamlit Docs", "breadcrumbs": "Featured videos", "content": "Featured videos Check out our video on how to use one of Streamlit's core functions, the button! In the video below, we'll take it a step further and learn how to combine a button, checkbox and radio button!", "prev_chunk_id": "chunk_1645", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1647", "url": "https://docs.streamlit.io/develop/api-reference/widgets/st.button", "title": "Still have questions?", "page_title": "st.button - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1646", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1648", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.graphviz_chart", "title": "Still have questions?", "page_title": "st.graphviz_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1649", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart", "title": "Still have questions?", "page_title": "st.pydeck_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1650", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.bokeh_chart", "title": "Still have questions?", "page_title": "st.bokeh_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1651", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart", "title": "Theming", "page_title": "st.plotly_chart - Streamlit Docs", "breadcrumbs": "Theming", "content": "Theming Plotly charts are displayed using the Streamlit theme by default. This theme is sleek, user-friendly, and incorporates Streamlit's color palette. The added benefit is that your charts better integrate with the rest of your app's design. The Streamlit theme is available from Streamlit 1.16.0 through the theme=\"streamlit\" keyword argument. To disable it, and use Plotly's native theme, use theme=None instead. Let's look at an example of charts with the Streamlit theme and the native Plotly theme: Click the tabs in the interactive app below to see the charts with the Streamlit theme enabled and disabled. If you're wondering if your own customizations will still be taken into account, don't worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it! Here's an example of an Plotly chart where a custom color scale is defined and reflected: Notice how the custom color scale is still reflected in the chart, even when the Streamlit theme is enabled 👇 For many more examples of Plotly charts with and without the Streamlit theme, check out the plotly.streamlit.app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1652", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart", "title": "Still have questions?", "page_title": "st.plotly_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1651", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1653", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.vega_lite_chart", "title": "Theming", "page_title": "st.vega_lite_chart - Streamlit Docs", "breadcrumbs": "Theming", "content": "Theming Vega-Lite charts are displayed using the Streamlit theme by default. This theme is sleek, user-friendly, and incorporates Streamlit's color palette. The added benefit is that your charts better integrate with the rest of your app's design. The Streamlit theme is available from Streamlit 1.16.0 through the theme=\"streamlit\" keyword argument. To disable it, and use Vega-Lite's native theme, use theme=None instead. Let's look at an example of charts with the Streamlit theme and the native Vega-Lite theme: Click the tabs in the interactive app below to see the charts with the Streamlit theme enabled and disabled. If you're wondering if your own customizations will still be taken into account, don't worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1654", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.vega_lite_chart", "title": "Still have questions?", "page_title": "st.vega_lite_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1653", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1655", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart", "title": "Theming", "page_title": "st.altair_chart - Streamlit Docs", "breadcrumbs": "Theming", "content": "Theming Altair charts are displayed using the Streamlit theme by default. This theme is sleek, user-friendly, and incorporates Streamlit's color palette. The added benefit is that your charts better integrate with the rest of your app's design. The Streamlit theme is available from Streamlit 1.16.0 through the theme=\"streamlit\" keyword argument. To disable it, and use Altair's native theme, use theme=None instead. Let's look at an example of charts with the Streamlit theme and the native Altair theme: Click the tabs in the interactive app below to see the charts with the Streamlit theme enabled and disabled. If you're wondering if your own customizations will still be taken into account, don't worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it! Here's an example of an Altair chart where manual color passing is done and reflected: Notice how the custom colors are still reflected in the chart, even when the Streamlit theme is enabled 👇 For many more examples of Altair charts with and without the Streamlit theme, check out the altair.streamlit.app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1656", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart", "title": "Still have questions?", "page_title": "st.altair_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1655", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1657", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.pyplot", "title": "Still have questions?", "page_title": "st.pyplot - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1658", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.map", "title": "Still have questions?", "page_title": "st.map - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1659", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.scatter_chart", "title": "Still have questions?", "page_title": "st.scatter_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1660", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.line_chart", "title": "Still have questions?", "page_title": "st.line_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1661", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart", "title": "Still have questions?", "page_title": "st.bar_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1662", "url": "https://docs.streamlit.io/develop/api-reference/charts/st.area_chart", "title": "Still have questions?", "page_title": "st.area_chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1663", "url": "https://docs.streamlit.io/develop/api-reference/data/st.json", "title": "Still have questions?", "page_title": "st.json - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1664", "url": "https://docs.streamlit.io/develop/api-reference/data/st.metric", "title": "Still have questions?", "page_title": "st.metric - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1665", "url": "https://docs.streamlit.io/develop/api-reference/data/st.table", "title": "Still have questions?", "page_title": "st.table - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1666", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Column configuration", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Column configuration", "content": "Column configuration When working with data in Streamlit, the st.column_config class is a powerful tool for configuring data display and interaction. Specifically designed for the column_config parameter in st.dataframe and st.data_editor, it provides a suite of methods to tailor your columns to various data types - from simple text and numbers to lists, URLs, images, and more. Whether it's translating temporal data into user-friendly formats or utilizing charts and progress bars for clearer data visualization, column configuration not only provides the user with an enriched data viewing experience but also ensures that you're equipped with the tools to present and interact with your data, just the way you want it.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1667", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Column", "content": "Column Configure a generic column.", "prev_chunk_id": "chunk_1666", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1668", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Text column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Text column", "content": "Text column Configure a text column.", "prev_chunk_id": "chunk_1667", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1669", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Number column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Number column", "content": "Number column Configure a number column.", "prev_chunk_id": "chunk_1668", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1670", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Checkbox column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Checkbox column", "content": "Checkbox column Configure a checkbox column.", "prev_chunk_id": "chunk_1669", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1671", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Selectbox column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Selectbox column", "content": "Selectbox column Configure a selectbox column.", "prev_chunk_id": "chunk_1670", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1672", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Datetime column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Datetime column", "content": "Datetime column Configure a datetime column.", "prev_chunk_id": "chunk_1671", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1673", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Date column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Date column", "content": "Date column Configure a date column.", "prev_chunk_id": "chunk_1672", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1674", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Time column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Time column", "content": "Time column Configure a time column.", "prev_chunk_id": "chunk_1673", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1675", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "JSON column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "JSON column", "content": "JSON column Configure a JSON column.", "prev_chunk_id": "chunk_1674", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1676", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "List column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "List column", "content": "List column Configure a list column.", "prev_chunk_id": "chunk_1675", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1677", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Link column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Link column", "content": "Link column Configure a link column.", "prev_chunk_id": "chunk_1676", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1678", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Image column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Image column", "content": "Image column Configure an image column.", "prev_chunk_id": "chunk_1677", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1679", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Area chart column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Area chart column", "content": "Area chart column Configure an area chart column.", "prev_chunk_id": "chunk_1678", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1680", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Line chart column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Line chart column", "content": "Line chart column Configure a line chart column.", "prev_chunk_id": "chunk_1679", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1681", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Bar chart column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Bar chart column", "content": "Bar chart column Configure a bar chart column.", "prev_chunk_id": "chunk_1680", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1682", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Progress column", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Progress column", "content": "Progress column Configure a progress column.", "prev_chunk_id": "chunk_1681", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1683", "url": "https://docs.streamlit.io/develop/api-reference/data/st.column_config", "title": "Still have questions?", "page_title": "st.column_config - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1682", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1684", "url": "https://docs.streamlit.io/develop/api-reference/data/st.data_editor", "title": "Configuring columns", "page_title": "st.data_editor - Streamlit Docs", "breadcrumbs": "Configuring columns", "content": "Configuring columns You can configure the display and editing behavior of columns in st.dataframe and st.data_editor via the Column configuration API. We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor columns. Additionally, you can make individual columns editable, set columns as categorical and specify which options they can take, hide the index of the dataframe, and much more.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1685", "url": "https://docs.streamlit.io/develop/api-reference/data/st.data_editor", "title": "Still have questions?", "page_title": "st.data_editor - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1684", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1686", "url": "https://docs.streamlit.io/develop/api-reference/data/st.dataframe", "title": "Interactivity", "page_title": "st.dataframe - Streamlit Docs", "breadcrumbs": "Interactivity", "content": "Interactivity Dataframes displayed with st.dataframe are interactive. End users can sort, resize, search, and copy data to their clipboard. For on overview of features, read our Dataframes guide.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1687", "url": "https://docs.streamlit.io/develop/api-reference/data/st.dataframe", "title": "Configuring columns", "page_title": "st.dataframe - Streamlit Docs", "breadcrumbs": "Configuring columns", "content": "Configuring columns You can configure the display and editing behavior of columns in st.dataframe and st.data_editor via the Column configuration API. We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor columns. Additionally, you can make individual columns editable, set columns as categorical and specify which options they can take, hide the index of the dataframe, and much more.", "prev_chunk_id": "chunk_1686", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1688", "url": "https://docs.streamlit.io/develop/api-reference/data/st.dataframe", "title": "Still have questions?", "page_title": "st.dataframe - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1687", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1689", "url": "https://docs.streamlit.io/develop/api-reference/text/st.html", "title": "Still have questions?", "page_title": "st.html - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1690", "url": "https://docs.streamlit.io/develop/api-reference/text/st.help", "title": "Still have questions?", "page_title": "st.help - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1691", "url": "https://docs.streamlit.io/develop/api-reference/text/st.divider", "title": "Still have questions?", "page_title": "st.divider - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1692", "url": "https://docs.streamlit.io/develop/api-reference/text/st.text", "title": "Still have questions?", "page_title": "st.text - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1693", "url": "https://docs.streamlit.io/develop/api-reference/text/st.latex", "title": "Still have questions?", "page_title": "st.latex - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1694", "url": "https://docs.streamlit.io/develop/api-reference/text/st.echo", "title": "Display code", "page_title": "st.echo - Streamlit Docs", "breadcrumbs": "Display code", "content": "Display code Sometimes you want your Streamlit app to contain both your usual Streamlit graphic elements and the code that generated those elements. That's where st.echo() comes in. Ok so let's say you have the following file, and you want to make its app a little bit more self-explanatory by making that middle section visible in the Streamlit app: The file above creates a Streamlit app containing the words \"Hi there, John\", and then \"Done!\". Now let's use st.echo() to make that middle section of the code visible in the app: It's that simple!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1695", "url": "https://docs.streamlit.io/develop/api-reference/text/st.echo", "title": "Still have questions?", "page_title": "st.echo - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1694", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1696", "url": "https://docs.streamlit.io/develop/api-reference/text/st.code", "title": "Still have questions?", "page_title": "st.code - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1697", "url": "https://docs.streamlit.io/develop/api-reference/text/st.caption", "title": "Still have questions?", "page_title": "st.caption - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1698", "url": "https://docs.streamlit.io/develop/api-reference/text/st.badge", "title": "Still have questions?", "page_title": "st.badge - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1699", "url": "https://docs.streamlit.io/develop/api-reference/text/st.subheader", "title": "Still have questions?", "page_title": "st.subheader - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1700", "url": "https://docs.streamlit.io/develop/api-reference/text/st.header", "title": "Still have questions?", "page_title": "st.header - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1701", "url": "https://docs.streamlit.io/develop/api-reference/data/st.experimental_data_editor", "title": "Still have questions?", "page_title": "st.experimental_data_editor - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1702", "url": "https://docs.streamlit.io/develop/api-reference/text/st.title", "title": "Still have questions?", "page_title": "st.title - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1703", "url": "https://docs.streamlit.io/develop/api-reference/text/st.markdown", "title": "Still have questions?", "page_title": "st.markdown - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1704", "url": "https://docs.streamlit.io/develop/api-reference/write-magic/magic", "title": "Magic", "page_title": "Magic - Streamlit Docs", "breadcrumbs": "Magic", "content": "Magic Magic commands are a feature in Streamlit that allows you to write almost anything (markdown, data, charts) without having to type an explicit command at all. Just put the thing you want to show on its own line of code, and it will appear in your app. Here's an example:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1705", "url": "https://docs.streamlit.io/develop/api-reference/write-magic/magic", "title": "How Magic works", "page_title": "Magic - Streamlit Docs", "breadcrumbs": "How Magic works", "content": "How Magic works Any time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write (which you'll learn about later). Also, magic is smart enough to ignore docstrings. That is, it ignores the strings at the top of files and functions. If you prefer to call Streamlit commands more explicitly, you can always turn magic off in your ~/.streamlit/config.toml with the following setting:", "prev_chunk_id": "chunk_1704", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1706", "url": "https://docs.streamlit.io/develop/api-reference/write-magic/magic", "title": "Featured video", "page_title": "Magic - Streamlit Docs", "breadcrumbs": "Featured video", "content": "Featured video Learn what the st.write and magic commands are and how to use them.", "prev_chunk_id": "chunk_1705", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1707", "url": "https://docs.streamlit.io/develop/api-reference/write-magic/magic", "title": "Still have questions?", "page_title": "Magic - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1706", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1708", "url": "https://docs.streamlit.io/develop/api-reference/write-magic/st.write_stream", "title": "Still have questions?", "page_title": "st.write_stream - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1709", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Get dataframe row-selections from users", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Get dataframe row-selections from users", "content": "Get dataframe row-selections from users Streamlit offers two commands for rendering beautiful, interactive dataframes in your app. If you need users to edit data, add rows, or delete rows, use st.data_editor. If you don't want users to change the data in your dataframe, use st.dataframe. Users can sort and search through data rendered with st.dataframe. Additionally, you can activate selections to work with users' row and column selections. This tutorial uses row selections, which were introduced in Streamlit version 1.35.0. For an older workaround using st.data_editor, see Get dataframe row-selections (streamlit<1.35.0).", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1710", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Applied concepts", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Use dataframe row selections to filter a dataframe.", "prev_chunk_id": "chunk_1709", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1711", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Prerequisites", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following version of Streamlit:streamlit>=1.35.0 - You should have a clean working directory calledyour-repository. - You should have a basic understanding of caching andst.dataframe.", "prev_chunk_id": "chunk_1710", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1712", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Summary", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, you'll build an app that displays a table of members and their activity for an imaginary organization. Within the table, a user can select one or more rows to create a filtered view. Your app will show a combined chart that compares the selected employees. Here's a look at what you'll build:", "prev_chunk_id": "chunk_1711", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1713", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Initialize your app", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import numpy as np import pandas as pd import streamlit as st from faker import FakerYou'll be using these libraries as follows:You'll generate random member names withfaker.You'll generate random activity data withnumpy.You'll manipulate the data withpandas. - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_1712", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1714", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Build a function to create random member data", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Build a function to create random member data", "content": "Build a function to create random member data To begin with, you'll define a function to randomly generate some member data. It's okay to skip this section if you just want to copy the function. - Use an@st.cache_datadecorator and start your function definition.@st.cache_data def get_profile_dataset(number_of_items: int = 20, seed: int = 0) -> pd.DataFrame:The@st.cache_datadecorator turnsget_profile_dataset()into a cached function. Streamlit saves the output of a cached function to reuse when the cached function is called again with the same inputs. This keeps your app performant when rerunning as part of Streamlit's execution model. For more information, seeCaching.Theget_profile_datasetfunction has two parameters to configure the size of the data set and the seed for random generation. This example will use the default values (20 members in the set with a seed of 0). The function will return apandas.DataFrame. - Initialize an empty list to store data.new_data = [] - Initialize the random generators.fake = Faker() random.seed(seed) Faker.seed(seed) - Iterate through a range to generate new member data as a dictionary and append it to your list.for i in range(number_of_items): profile = fake.profile() new_data.append( { \"name\": profile[\"name\"], \"daily_activity\": np.random.rand(25), \"activity\": np.random.randint(2, 90, size=12), } )Fordaily_activity, you're generating an array of length 25. These values are floats in the interval[0,1). Foractivity, you're generating an array of length 12. These values are integers in the interval[2,90). - Convert your list of dictionaries to a singlepandas.DataFrameand return it.profile_df = pd.DataFrame(new_data) return profile_df - Optional: Test out your function by calling it and displaying the data.st.dataframe(get_profile_dataset())Save yourapp.pyfile to see the preview. Delete this line before you continue.", "prev_chunk_id": "chunk_1713", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1715", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Display your data with multi-row selections enabled", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Display your data with multi-row selections enabled", "content": "Display your data with multi-row selections enabled - Define your column configuration to format your data.column_configuration = { \"name\": st.column_config.TextColumn( \"Name\", help=\"The name of the user\", max_chars=100, width=\"medium\" ), \"activity\": st.column_config.LineChartColumn( \"Activity (1 year)\", help=\"The user's activity over the last 1 year\", width=\"large\", y_min=0, y_max=100, ), \"daily_activity\": st.column_config.BarChartColumn( \"Activity (daily)\", help=\"The user's activity in the last 25 days\", width=\"medium\", y_min=0, y_max=1, ), }For each column of your dataframe, this defines nicely formatted column name, tooltip, and column width. You'll use a line chart to show yearly activity, and a bar chart to show daily activity. - Insert a header to identify the data you will display.st.header(\"All members\") - Store your data in a convenient variable.df = get_profile_dataset() - Display your dataframe with selections activated.event = st.dataframe( df, column_config=column_configuration, use_container_width=True, hide_index=True, on_select=\"rerun\", selection_mode=\"multi-row\", )By settingon_selection=\"rerun\", you've activated selections for the dataframe.selection_mode=\"multi_row\"specifies the type of selections allowed (multiple rows, no columns).eventstores the selection data from the user. Selections can be accessed from theevent.selectionattribute.", "prev_chunk_id": "chunk_1714", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1716", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Display the selected data", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Display the selected data", "content": "Display the selected data - Insert a header to identify the subset of data you will display.st.header(\"Selected members\") - Get the list of selected rows and filter your dataframe.people = event.selection.rows filtered_df = df.iloc[people]Row selections are returned by positional index. You should use pandas methods.iloc[]or.iat[]to retrieve rows. - Display the selected rows in a new dataframe.st.dataframe( filtered_df, column_config=column_configuration, use_container_width=True, )For consistency, reuse the existing column configuration. - Optional: Save your file and test it out. Try selecting some rows in your app, and then return to your code.", "prev_chunk_id": "chunk_1715", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1717", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Combine activity data for the selected rows", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Combine activity data for the selected rows", "content": "Combine activity data for the selected rows - Create an empty dictionary to store (yearly) activity data.activity_df = {} - Iterate through selected rows and save each member's activity in the dictionary indexed by their name.for person in people: activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"activity\"] - Convert the activity dictionary into apandas.DataFrame.activity_df = pd.DataFrame(activity_df) - Repeat the previous three steps similarly for daily activity.daily_activity_df = {} for person in people: daily_activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"daily_activity\"] daily_activity_df = pd.DataFrame(daily_activity_df) - Optional: Test out your combined data by displaying it.st.dataframe(activity_df) st.dataframe(daily_activity_df)Save yourapp.pyfile to see the preview. Delete these two lines before you continue.", "prev_chunk_id": "chunk_1716", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1718", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Use charts to visualize the activity comparison", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Use charts to visualize the activity comparison", "content": "Use charts to visualize the activity comparison - Start a conditional block to check if anyone is currently selected.if len(people) > 0:Since no members are selected when the app loads, this check will prevent empty charts from being displayed. - Add a header to identify your first chart.st.header(\"Daily activity comparison\") - Show the daily activity comparison in a bar chart.st.bar_chart(daily_activity_df) - Similarly, for yearly activity, add a header and line chart.st.header(\"Yearly activity comparison\") st.line_chart(activity_df) - Complete the conditional block with a default message to show when no members are selected.else: st.markdown(\"No members selected.\")", "prev_chunk_id": "chunk_1717", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1719", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Make it pretty", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Make it pretty", "content": "Make it pretty You should have a functioning app at this point. Now you can beautify it. In this section, you'll separate the selection UI from the comparison by using st.tabs. - Immediately after the column configuration definition, insert two tabs.select, compare = st.tabs([\"Select members\", \"Compare selected\"]) - Indent the code following the line in the previous step and group it into the two new tabs.with select: # Add select tab ############################################# st.header(\"All members\") df = get_profile_dataset() event = st.dataframe( df, column_config=column_configuration, use_container_width=True, hide_index=True, on_select=\"rerun\", selection_mode=\"multi-row\", ) st.header(\"Selected members\") people = event.selection.rows filtered_df = df.iloc[people] st.dataframe( filtered_df, column_config=column_configuration, use_container_width=True, ) with compare: # Add compare tab ########################################### activity_df = {} for person in people: activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"activity\"] activity_df = pd.DataFrame(activity_df) daily_activity_df = {} for person in people: daily_activity_df[df.iloc[person][\"name\"]] = df.iloc[person][\"daily_activity\"] daily_activity_df = pd.DataFrame(daily_activity_df) if len(people) > 0: st.header(\"Daily activity comparison\") st.bar_chart(daily_activity_df) st.header(\"Yearly activity comparison\") st.line_chart(activity_df) else: st.markdown(\"No members selected.\") - Save your file and try out your completed example.", "prev_chunk_id": "chunk_1718", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1720", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections", "title": "Still have questions?", "page_title": "Get dataframe row-selections from users - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1719", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1721", "url": "https://docs.streamlit.io/develop/api-reference/write-magic/st.write", "title": "Featured video", "page_title": "st.write - Streamlit Docs", "breadcrumbs": "Featured video", "content": "Featured video Learn what the st.write and magic commands are and how to use them.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1722", "url": "https://docs.streamlit.io/develop/api-reference/write-magic/st.write", "title": "Still have questions?", "page_title": "st.write - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1721", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1723", "url": "https://docs.streamlit.io/develop/api-reference/cli", "title": "Command-line interface", "page_title": "Command-line options - Streamlit Docs", "breadcrumbs": "Command-line interface", "content": "Command-line interface When you install Streamlit, a command-line (CLI) tool gets installed as well. The purpose of this tool is to run Streamlit apps, change Streamlit configuration options, and help you diagnose and fix issues.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1724", "url": "https://docs.streamlit.io/develop/api-reference/cli", "title": "Available commands", "page_title": "Command-line options - Streamlit Docs", "breadcrumbs": "Available commands", "content": "Available commands - streamlit cache clear: Clear the on-disk cache. - streamlit config show: Show all configuration options. - streamlit docs: Open the Streamlit docs. - streamlit hello: Run an example Streamlit app. - streamlit help: Show the available CLI commands. - streamlit init: Create the files for a new Streamlit app. - streamlit run: Run your Streamlit app. - streamlit version: Show the version of Streamlit.", "prev_chunk_id": "chunk_1723", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1725", "url": "https://docs.streamlit.io/develop/api-reference/cli", "title": "Run your app", "page_title": "Command-line options - Streamlit Docs", "breadcrumbs": "Run your app", "content": "Run your app The most important command is streamlit run, which is summarized for convenience here: At any time, in your terminal, you can stop the server with Ctrl+C.", "prev_chunk_id": "chunk_1724", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1726", "url": "https://docs.streamlit.io/develop/api-reference/cli", "title": "Still have questions?", "page_title": "Command-line options - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1725", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1727", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "App testing", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "App testing", "content": "App testing Streamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness. The provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. It can be used to write automated tests of an app in various scenarios. These can then be run using a tool like pytest. A typical pattern is to build a suite of tests for an app that ensure consistent functionality as the app evolves, and run the tests locally and/or in a CI environment like Github Actions.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1728", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "st.testing.v1.AppTest", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "st.testing.v1.AppTest", "content": "st.testing.v1.AppTest st.testing.v1.AppTest simulates a running Streamlit app for testing.", "prev_chunk_id": "chunk_1727", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1729", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "AppTest.from_file", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "AppTest.from_file", "content": "AppTest.from_file st.testing.v1.AppTest.from_file initializes a simulated app from a file.", "prev_chunk_id": "chunk_1728", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1730", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "AppTest.from_string", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "AppTest.from_string", "content": "AppTest.from_string st.testing.v1.AppTest.from_string initializes a simulated app from a string.", "prev_chunk_id": "chunk_1729", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1731", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "AppTest.from_function", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "AppTest.from_function", "content": "AppTest.from_function st.testing.v1.AppTest.from_function initializes a simulated app from a function.", "prev_chunk_id": "chunk_1730", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1732", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Block", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Block", "content": "Block A representation of container elements, including: - st.chat_message - st.columns - st.sidebar - st.tabs - The main body of the app.", "prev_chunk_id": "chunk_1731", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1733", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Element", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Element", "content": "Element The base class for representation of all elements, including: - st.title - st.header - st.markdown - st.dataframe", "prev_chunk_id": "chunk_1732", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1734", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Button", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Button", "content": "Button A representation of st.button and st.form_submit_button.", "prev_chunk_id": "chunk_1733", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1735", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "ChatInput", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "ChatInput", "content": "ChatInput A representation of st.chat_input.", "prev_chunk_id": "chunk_1734", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1736", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Checkbox", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Checkbox", "content": "Checkbox A representation of st.checkbox.", "prev_chunk_id": "chunk_1735", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1737", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "ColorPicker", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "ColorPicker", "content": "ColorPicker A representation of st.color_picker.", "prev_chunk_id": "chunk_1736", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1738", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "DateInput", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "DateInput", "content": "DateInput A representation of st.date_input.", "prev_chunk_id": "chunk_1737", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1739", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Multiselect", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Multiselect", "content": "Multiselect A representation of st.multiselect.", "prev_chunk_id": "chunk_1738", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1740", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "NumberInput", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "NumberInput", "content": "NumberInput A representation of st.number_input.", "prev_chunk_id": "chunk_1739", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1741", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Radio", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Radio", "content": "Radio A representation of st.radio.", "prev_chunk_id": "chunk_1740", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1742", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "SelectSlider", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "SelectSlider", "content": "SelectSlider A representation of st.select_slider.", "prev_chunk_id": "chunk_1741", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1743", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Selectbox", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Selectbox", "content": "Selectbox A representation of st.selectbox.", "prev_chunk_id": "chunk_1742", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1744", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Slider", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Slider", "content": "Slider A representation of st.slider.", "prev_chunk_id": "chunk_1743", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1745", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "TextArea", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "TextArea", "content": "TextArea A representation of st.text_area.", "prev_chunk_id": "chunk_1744", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1746", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "TextInput", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "TextInput", "content": "TextInput A representation of st.text_input.", "prev_chunk_id": "chunk_1745", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1747", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "TimeInput", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "TimeInput", "content": "TimeInput A representation of st.time_input.", "prev_chunk_id": "chunk_1746", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1748", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Toggle", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Toggle", "content": "Toggle A representation of st.toggle.", "prev_chunk_id": "chunk_1747", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1749", "url": "https://docs.streamlit.io/develop/api-reference/app-testing", "title": "Still have questions?", "page_title": "App testing - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1748", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1750", "url": "https://docs.streamlit.io/develop/api-reference/configuration", "title": "Configuration file", "page_title": "Configuration - Streamlit Docs", "breadcrumbs": "Configuration file", "content": "Configuration file Configures the default settings for your app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1751", "url": "https://docs.streamlit.io/develop/api-reference/configuration", "title": "Get config option", "page_title": "Configuration - Streamlit Docs", "breadcrumbs": "Get config option", "content": "Get config option Retrieve a single configuration option.", "prev_chunk_id": "chunk_1750", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1752", "url": "https://docs.streamlit.io/develop/api-reference/configuration", "title": "Set config option", "page_title": "Configuration - Streamlit Docs", "breadcrumbs": "Set config option", "content": "Set config option Set a single configuration option. (This is very limited.)", "prev_chunk_id": "chunk_1751", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1753", "url": "https://docs.streamlit.io/develop/api-reference/configuration", "title": "Set page title, favicon, and more", "page_title": "Configuration - Streamlit Docs", "breadcrumbs": "Set page title, favicon, and more", "content": "Set page title, favicon, and more Configures the default settings of the page.", "prev_chunk_id": "chunk_1752", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1754", "url": "https://docs.streamlit.io/develop/api-reference/configuration", "title": "Still have questions?", "page_title": "Configuration - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1753", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1755", "url": "https://docs.streamlit.io/develop/api-reference/custom-components", "title": "Declare a component", "page_title": "Custom components - Streamlit Docs", "breadcrumbs": "Declare a component", "content": "Declare a component Create and register a custom component.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1756", "url": "https://docs.streamlit.io/develop/api-reference/custom-components", "title": "HTML", "page_title": "Custom components - Streamlit Docs", "breadcrumbs": "HTML", "content": "HTML Display an HTML string in an iframe.", "prev_chunk_id": "chunk_1755", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1757", "url": "https://docs.streamlit.io/develop/api-reference/custom-components", "title": "iframe", "page_title": "Custom components - Streamlit Docs", "breadcrumbs": "iframe", "content": "iframe Load a remote URL in an iframe.", "prev_chunk_id": "chunk_1756", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1758", "url": "https://docs.streamlit.io/develop/api-reference/custom-components", "title": "Still have questions?", "page_title": "Custom components - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1757", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1759", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "Create a connection", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "Create a connection", "content": "Create a connection Connect to a data source or API", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1760", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "SnowflakeConnection", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "SnowflakeConnection", "content": "SnowflakeConnection A connection to Snowflake.", "prev_chunk_id": "chunk_1759", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1761", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "SQLConnection", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "SQLConnection", "content": "SQLConnection A connection to a SQL database using SQLAlchemy.", "prev_chunk_id": "chunk_1760", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1762", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "Connection base class", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "Connection base class", "content": "Connection base class Build your own connection with BaseConnection.", "prev_chunk_id": "chunk_1761", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1763", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "Secrets singleton", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "Secrets singleton", "content": "Secrets singleton Access secrets from a local TOML file.", "prev_chunk_id": "chunk_1762", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1764", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "Secrets file", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "Secrets file", "content": "Secrets file Save your secrets in a per-project or per-profile TOML file.", "prev_chunk_id": "chunk_1763", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1765", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "SnowparkConnection", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "SnowparkConnection", "content": "SnowparkConnection A connection to Snowflake.", "prev_chunk_id": "chunk_1764", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1766", "url": "https://docs.streamlit.io/develop/api-reference/connections", "title": "Still have questions?", "page_title": "Connections and databases - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1765", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1767", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Caching and state", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Caching and state", "content": "Caching and state Optimize performance and add statefulness to your app!", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1768", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Caching", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Caching", "content": "Caching Streamlit provides powerful cache primitives for data and global resources. They allow your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations.", "prev_chunk_id": "chunk_1767", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1769", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Cache data", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Cache data", "content": "Cache data Function decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).", "prev_chunk_id": "chunk_1768", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1770", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Cache resource", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Cache resource", "content": "Cache resource Function decorator to cache functions that return global resources (e.g. database connections, ML models).", "prev_chunk_id": "chunk_1769", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1771", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Browser and server state", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Browser and server state", "content": "Browser and server state Streamlit re-executes your script with each user interaction. Widgets have built-in statefulness between reruns, but Session State lets you do more!", "prev_chunk_id": "chunk_1770", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1772", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Context", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Context", "content": "Context st.context provides a read-only interface to access cookies, headers, locale, and other browser-session information.", "prev_chunk_id": "chunk_1771", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1773", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Session State", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Session State", "content": "Session State Save data between reruns and across pages.", "prev_chunk_id": "chunk_1772", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1774", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Query parameters", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Query parameters", "content": "Query parameters Get, set, or clear the query parameters that are shown in the browser's URL bar.", "prev_chunk_id": "chunk_1773", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1775", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Get query parameters", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Get query parameters", "content": "Get query parameters Get query parameters that are shown in the browser's URL bar.", "prev_chunk_id": "chunk_1774", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1776", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Set query parameters", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Set query parameters", "content": "Set query parameters Set query parameters that are shown in the browser's URL bar.", "prev_chunk_id": "chunk_1775", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1777", "url": "https://docs.streamlit.io/develop/api-reference/caching-and-state", "title": "Still have questions?", "page_title": "Caching and state - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1776", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1778", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Change execution", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Change execution", "content": "Change execution By default, Streamlit apps execute the script entirely, but we allow some functionality to handle control flow in your applications.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1779", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Modal dialog", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Modal dialog", "content": "Modal dialog Insert a modal dialog that can rerun independently from the rest of the script.", "prev_chunk_id": "chunk_1778", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1780", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Fragments", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Fragments", "content": "Fragments Define a fragment to rerun independently from the rest of the script.", "prev_chunk_id": "chunk_1779", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1781", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Rerun script", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Rerun script", "content": "Rerun script Rerun the script immediately.", "prev_chunk_id": "chunk_1780", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1782", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Stop execution", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Stop execution", "content": "Stop execution Stops execution immediately.", "prev_chunk_id": "chunk_1781", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1783", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Group multiple widgets", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Group multiple widgets", "content": "Group multiple widgets By default, Streamlit reruns your script everytime a user interacts with your app. However, sometimes it's a better user experience to wait until a group of related widgets is filled before actually rerunning the script. That's what st.form is for!", "prev_chunk_id": "chunk_1782", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1784", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Forms", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Forms", "content": "Forms Create a form that batches elements together with a “Submit\" button.", "prev_chunk_id": "chunk_1783", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1785", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Form submit button", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Form submit button", "content": "Form submit button Display a form submit button.", "prev_chunk_id": "chunk_1784", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1786", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Autorefresh", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Autorefresh", "content": "Autorefresh Force a refresh without tying up a script. Created by @kmcgrady.", "prev_chunk_id": "chunk_1785", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1787", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Pydantic", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Pydantic", "content": "Pydantic Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by @lukasmasuch.", "prev_chunk_id": "chunk_1786", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1788", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Streamlit Pages", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Streamlit Pages", "content": "Streamlit Pages An experimental version of Streamlit Multi-Page Apps. Created by @blackary.", "prev_chunk_id": "chunk_1787", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1789", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow", "title": "Still have questions?", "page_title": "Execution flow - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1788", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1790", "url": "https://docs.streamlit.io/develop/api-reference/navigation", "title": "Navigation", "page_title": "Navigation and pages - Streamlit Docs", "breadcrumbs": "Navigation", "content": "Navigation Configure the available pages in a multipage app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1791", "url": "https://docs.streamlit.io/develop/api-reference/navigation", "title": "Page", "page_title": "Navigation and pages - Streamlit Docs", "breadcrumbs": "Page", "content": "Page Define a page in a multipage app.", "prev_chunk_id": "chunk_1790", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1792", "url": "https://docs.streamlit.io/develop/api-reference/navigation", "title": "Page link", "page_title": "Navigation and pages - Streamlit Docs", "breadcrumbs": "Page link", "content": "Page link Display a link to another page in a multipage app.", "prev_chunk_id": "chunk_1791", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1793", "url": "https://docs.streamlit.io/develop/api-reference/navigation", "title": "Switch page", "page_title": "Navigation and pages - Streamlit Docs", "breadcrumbs": "Switch page", "content": "Switch page Programmatically navigates to a specified page.", "prev_chunk_id": "chunk_1792", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1794", "url": "https://docs.streamlit.io/develop/api-reference/navigation", "title": "Still have questions?", "page_title": "Navigation and pages - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1793", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1795", "url": "https://docs.streamlit.io/develop/api-reference/user", "title": "Authentication and user info", "page_title": "Authentication and user info - Streamlit Docs", "breadcrumbs": "Authentication and user info", "content": "Authentication and user info Streamlit provides native support for user authentication so you can personalize your apps. You can also directly read headers and cookies.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1796", "url": "https://docs.streamlit.io/develop/api-reference/user", "title": "Log in a user", "page_title": "Authentication and user info - Streamlit Docs", "breadcrumbs": "Log in a user", "content": "Log in a user st.login() starts an authentication flow with an identity provider.", "prev_chunk_id": "chunk_1795", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1797", "url": "https://docs.streamlit.io/develop/api-reference/user", "title": "Log out a user", "page_title": "Authentication and user info - Streamlit Docs", "breadcrumbs": "Log out a user", "content": "Log out a user st.logout() removes a user's identity information.", "prev_chunk_id": "chunk_1796", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1798", "url": "https://docs.streamlit.io/develop/api-reference/user", "title": "User info", "page_title": "Authentication and user info - Streamlit Docs", "breadcrumbs": "User info", "content": "User info st.user returns information about a logged-in user.", "prev_chunk_id": "chunk_1797", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1799", "url": "https://docs.streamlit.io/develop/api-reference/user", "title": "Still have questions?", "page_title": "Authentication and user info - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1798", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1800", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Display progress and status", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Display progress and status", "content": "Display progress and status Streamlit provides a few methods that allow you to add animation to your apps. These animations include progress bars, status messages (like warnings), and celebratory balloons.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1801", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Progress bar", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Progress bar", "content": "Progress bar Display a progress bar.", "prev_chunk_id": "chunk_1800", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1802", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Spinner", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Spinner", "content": "Spinner Temporarily displays a message while executing a block of code.", "prev_chunk_id": "chunk_1801", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1803", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Status container", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Status container", "content": "Status container Display output of long-running tasks in a container.", "prev_chunk_id": "chunk_1802", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1804", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Toast", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Toast", "content": "Toast Briefly displays a toast message in the bottom-right corner.", "prev_chunk_id": "chunk_1803", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1805", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Balloons", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Balloons", "content": "Balloons Display celebratory balloons!", "prev_chunk_id": "chunk_1804", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1806", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Snowflakes", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Snowflakes", "content": "Snowflakes Display celebratory snowflakes!", "prev_chunk_id": "chunk_1805", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1807", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Success box", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Success box", "content": "Success box Display a success message.", "prev_chunk_id": "chunk_1806", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1808", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Info box", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Info box", "content": "Info box Display an informational message.", "prev_chunk_id": "chunk_1807", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1809", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Warning box", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Warning box", "content": "Warning box Display warning message.", "prev_chunk_id": "chunk_1808", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1810", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Error box", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Error box", "content": "Error box Display error message.", "prev_chunk_id": "chunk_1809", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1811", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Exception output", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Exception output", "content": "Exception output Display an exception.", "prev_chunk_id": "chunk_1810", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1812", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Stqdm", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Stqdm", "content": "Stqdm The simplest way to handle a progress bar in streamlit app. Created by @Wirg.", "prev_chunk_id": "chunk_1811", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1813", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Custom notification box", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Custom notification box", "content": "Custom notification box A custom notification box with the ability to close it out. Created by @Socvest.", "prev_chunk_id": "chunk_1812", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1814", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Streamlit Extras", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1813", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1815", "url": "https://docs.streamlit.io/develop/api-reference/status", "title": "Still have questions?", "page_title": "Display progress and status - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1814", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1816", "url": "https://docs.streamlit.io/develop/api-reference/chat", "title": "Chat elements", "page_title": "Chat elements - Streamlit Docs", "breadcrumbs": "Chat elements", "content": "Chat elements Streamlit provides a few commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately. st.chat_message lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. st.chat_input lets you display a chat input widget so the user can type in a message. Remember to check out st.status to display output from long-running processes and external API calls.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1817", "url": "https://docs.streamlit.io/develop/api-reference/chat", "title": "Chat input", "page_title": "Chat elements - Streamlit Docs", "breadcrumbs": "Chat input", "content": "Chat input Display a chat input widget.", "prev_chunk_id": "chunk_1816", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1818", "url": "https://docs.streamlit.io/develop/api-reference/chat", "title": "Chat message", "page_title": "Chat elements - Streamlit Docs", "breadcrumbs": "Chat message", "content": "Chat message Insert a chat message container.", "prev_chunk_id": "chunk_1817", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1819", "url": "https://docs.streamlit.io/develop/api-reference/chat", "title": "Status container", "page_title": "Chat elements - Streamlit Docs", "breadcrumbs": "Status container", "content": "Status container Display output of long-running tasks in a container.", "prev_chunk_id": "chunk_1818", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1820", "url": "https://docs.streamlit.io/develop/api-reference/chat", "title": "st.write_stream", "page_title": "Chat elements - Streamlit Docs", "breadcrumbs": "st.write_stream", "content": "st.write_stream Write generators or streams to the app with a typewriter effect.", "prev_chunk_id": "chunk_1819", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1821", "url": "https://docs.streamlit.io/develop/api-reference/chat", "title": "Still have questions?", "page_title": "Chat elements - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1820", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1822", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Complex layouts", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Complex layouts", "content": "Complex layouts Streamlit provides several options for controlling how different elements are laid out on the screen.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1823", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Columns", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Columns", "content": "Columns Insert containers laid out as side-by-side columns.", "prev_chunk_id": "chunk_1822", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1824", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Container", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Container", "content": "Container Insert a multi-element container.", "prev_chunk_id": "chunk_1823", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1825", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Modal dialog", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Modal dialog", "content": "Modal dialog Insert a modal dialog that can rerun independently from the rest of the script.", "prev_chunk_id": "chunk_1824", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1826", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Empty", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Empty", "content": "Empty Insert a single-element container.", "prev_chunk_id": "chunk_1825", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1827", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Expander", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Expander", "content": "Expander Insert a multi-element container that can be expanded/collapsed.", "prev_chunk_id": "chunk_1826", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1828", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Popover", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Popover", "content": "Popover Insert a multi-element popover container that can be opened/closed.", "prev_chunk_id": "chunk_1827", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1829", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Sidebar", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Sidebar", "content": "Sidebar Display items in a sidebar.", "prev_chunk_id": "chunk_1828", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1830", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Tabs", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Tabs", "content": "Tabs Insert containers separated into tabs.", "prev_chunk_id": "chunk_1829", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1831", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Streamlit Elements", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Streamlit Elements", "content": "Streamlit Elements Create a draggable and resizable dashboard in Streamlit. Created by @okls.", "prev_chunk_id": "chunk_1830", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1832", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Pydantic", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Pydantic", "content": "Pydantic Auto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by @lukasmasuch.", "prev_chunk_id": "chunk_1831", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1833", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Streamlit Pages", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Streamlit Pages", "content": "Streamlit Pages An experimental version of Streamlit Multi-Page Apps. Created by @blackary.", "prev_chunk_id": "chunk_1832", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1834", "url": "https://docs.streamlit.io/develop/api-reference/layout", "title": "Still have questions?", "page_title": "Layouts and Containers - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1833", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1835", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Media elements", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Media elements", "content": "Media elements It's easy to embed images, videos, and audio files directly into your Streamlit apps.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1836", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Image", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Image", "content": "Image Display an image or list of images.", "prev_chunk_id": "chunk_1835", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1837", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Logo", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Logo", "content": "Logo Display a logo in the upper-left corner of your app and its sidebar.", "prev_chunk_id": "chunk_1836", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1838", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Audio", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Audio", "content": "Audio Display an audio player.", "prev_chunk_id": "chunk_1837", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1839", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Video", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Video", "content": "Video Display a video player.", "prev_chunk_id": "chunk_1838", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1840", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Cropper", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Cropper", "content": "Streamlit Cropper A simple image cropper for Streamlit. Created by @turner-anderson.", "prev_chunk_id": "chunk_1839", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1841", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Image Coordinates", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_1840", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1842", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Lottie", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_1841", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1843", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Webrtc", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Webrtc", "content": "Streamlit Webrtc Handling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.", "prev_chunk_id": "chunk_1842", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1844", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Drawable Canvas", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_1843", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1845", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Image Comparison", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Image Comparison", "content": "Image Comparison Compare images with a slider using JuxtaposeJS. Created by @fcakyon.", "prev_chunk_id": "chunk_1844", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1846", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Cropper", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Cropper", "content": "Streamlit Cropper A simple image cropper for Streamlit. Created by @turner-anderson.", "prev_chunk_id": "chunk_1845", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1847", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Image Coordinates", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_1846", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1848", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Lottie", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_1847", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1849", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Webrtc", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Webrtc", "content": "Streamlit Webrtc Handling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.", "prev_chunk_id": "chunk_1848", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1850", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Drawable Canvas", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_1849", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1851", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Image Comparison", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Image Comparison", "content": "Image Comparison Compare images with a slider using JuxtaposeJS. Created by @fcakyon.", "prev_chunk_id": "chunk_1850", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1852", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Cropper", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Cropper", "content": "Streamlit Cropper A simple image cropper for Streamlit. Created by @turner-anderson.", "prev_chunk_id": "chunk_1851", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1853", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Image Coordinates", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_1852", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1854", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Streamlit Lottie", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_1853", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1855", "url": "https://docs.streamlit.io/develop/api-reference/media", "title": "Still have questions?", "page_title": "Media elements - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1854", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1856", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Input widgets", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Input widgets", "content": "Input widgets With widgets, Streamlit allows you to bake interactivity directly into your apps with buttons, sliders, text inputs, and more.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1857", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Button", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Button", "content": "Button Display a button widget.", "prev_chunk_id": "chunk_1856", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1858", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Download button", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Download button", "content": "Download button Display a download button widget.", "prev_chunk_id": "chunk_1857", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1859", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Form button", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Form button", "content": "Form button Display a form submit button. For use with st.form.", "prev_chunk_id": "chunk_1858", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1860", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Link button", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Link button", "content": "Link button Display a link button.", "prev_chunk_id": "chunk_1859", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1861", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Page link", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Page link", "content": "Page link Display a link to another page in a multipage app.", "prev_chunk_id": "chunk_1860", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1862", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Checkbox", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Checkbox", "content": "Checkbox Display a checkbox widget.", "prev_chunk_id": "chunk_1861", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1863", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Color picker", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Color picker", "content": "Color picker Display a color picker widget.", "prev_chunk_id": "chunk_1862", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1864", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Feedback", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Feedback", "content": "Feedback Display a rating or sentiment button group.", "prev_chunk_id": "chunk_1863", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1865", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Multiselect", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Multiselect", "content": "Multiselect Display a multiselect widget. The multiselect widget starts as empty.", "prev_chunk_id": "chunk_1864", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1866", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Pills", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Pills", "content": "Pills Display a pill-button selection widget.", "prev_chunk_id": "chunk_1865", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1867", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Radio", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Radio", "content": "Radio Display a radio button widget.", "prev_chunk_id": "chunk_1866", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1868", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Segmented control", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Segmented control", "content": "Segmented control Display a segmented-button selection widget.", "prev_chunk_id": "chunk_1867", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1869", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Select slider", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Select slider", "content": "Select slider Display a slider widget to select items from a list.", "prev_chunk_id": "chunk_1868", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1870", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Selectbox", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Selectbox", "content": "Selectbox Display a select widget.", "prev_chunk_id": "chunk_1869", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1871", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Toggle", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Toggle", "content": "Toggle Display a toggle widget.", "prev_chunk_id": "chunk_1870", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1872", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Number input", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Number input", "content": "Number input Display a numeric input widget.", "prev_chunk_id": "chunk_1871", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1873", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Slider", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Slider", "content": "Slider Display a slider widget.", "prev_chunk_id": "chunk_1872", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1874", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Date input", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Date input", "content": "Date input Display a date input widget.", "prev_chunk_id": "chunk_1873", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1875", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Time input", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Time input", "content": "Time input Display a time input widget.", "prev_chunk_id": "chunk_1874", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1876", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Text input", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Text input", "content": "Text input Display a single-line text input widget.", "prev_chunk_id": "chunk_1875", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1877", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Text area", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Text area", "content": "Text area Display a multi-line text input widget.", "prev_chunk_id": "chunk_1876", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1878", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Chat input", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Chat input", "content": "Chat input Display a chat input widget.", "prev_chunk_id": "chunk_1877", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1879", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Audio input", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Audio input", "content": "Audio input Display a widget that allows users to record with their microphone.", "prev_chunk_id": "chunk_1878", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1880", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Data editor", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Data editor", "content": "Data editor Display a data editor widget.", "prev_chunk_id": "chunk_1879", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1881", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "File uploader", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "File uploader", "content": "File uploader Display a file uploader widget.", "prev_chunk_id": "chunk_1880", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1882", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Camera input", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Camera input", "content": "Camera input Display a widget that allows users to upload images directly from a camera.", "prev_chunk_id": "chunk_1881", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1883", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Chat", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Chat", "content": "Streamlit Chat Streamlit Component for a Chatbot UI. Created by @AI-Yash.", "prev_chunk_id": "chunk_1882", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1884", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Option Menu", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Option Menu", "content": "Streamlit Option Menu Select a single item from a list of options in a menu. Created by @victoryhb.", "prev_chunk_id": "chunk_1883", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1885", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Extras", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1884", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1886", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Elements", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Elements", "content": "Streamlit Elements Create a draggable and resizable dashboard in Streamlit. Created by @okls.", "prev_chunk_id": "chunk_1885", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1887", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Tags", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_1886", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1888", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Stqdm", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Stqdm", "content": "Stqdm The simplest way to handle a progress bar in streamlit app. Created by @Wirg.", "prev_chunk_id": "chunk_1887", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1889", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Timeline", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Timeline", "content": "Timeline Display a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.", "prev_chunk_id": "chunk_1888", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1890", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Camera input live", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Camera input live", "content": "Camera input live Alternative for st.camera_input which returns the webcam images live. Created by @blackary.", "prev_chunk_id": "chunk_1889", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1891", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Ace", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Ace", "content": "Streamlit Ace Ace editor component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_1890", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1892", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Chat", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Chat", "content": "Streamlit Chat Streamlit Component for a Chatbot UI. Created by @AI-Yash.", "prev_chunk_id": "chunk_1891", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1893", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Option Menu", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Option Menu", "content": "Streamlit Option Menu Select a single item from a list of options in a menu. Created by @victoryhb.", "prev_chunk_id": "chunk_1892", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1894", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Extras", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1893", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1895", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Elements", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Elements", "content": "Streamlit Elements Create a draggable and resizable dashboard in Streamlit. Created by @okls.", "prev_chunk_id": "chunk_1894", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1896", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Tags", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_1895", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1897", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Stqdm", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Stqdm", "content": "Stqdm The simplest way to handle a progress bar in streamlit app. Created by @Wirg.", "prev_chunk_id": "chunk_1896", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1898", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Timeline", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Timeline", "content": "Timeline Display a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.", "prev_chunk_id": "chunk_1897", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1899", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Camera input live", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Camera input live", "content": "Camera input live Alternative for st.camera_input which returns the webcam images live. Created by @blackary.", "prev_chunk_id": "chunk_1898", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1900", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Ace", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Ace", "content": "Streamlit Ace Ace editor component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_1899", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1901", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Chat", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Chat", "content": "Streamlit Chat Streamlit Component for a Chatbot UI. Created by @AI-Yash.", "prev_chunk_id": "chunk_1900", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1902", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Option Menu", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Option Menu", "content": "Streamlit Option Menu Select a single item from a list of options in a menu. Created by @victoryhb.", "prev_chunk_id": "chunk_1901", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1903", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Streamlit Extras", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1902", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1904", "url": "https://docs.streamlit.io/develop/api-reference/widgets", "title": "Still have questions?", "page_title": "Input widgets - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1903", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1905", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Chart elements", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Chart elements", "content": "Chart elements Streamlit supports several different charting libraries, and our goal is to continually add support for more. Right now, the most basic library in our arsenal is Matplotlib. Then there are also interactive charting libraries like Vega Lite (2D charts) and deck.gl (maps and 3D charts). And finally we also provide a few chart types that are \"native\" to Streamlit, like st.line_chart and st.area_chart.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1906", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Simple area charts", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Simple area charts", "content": "Simple area charts Display an area chart.", "prev_chunk_id": "chunk_1905", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1907", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Simple bar charts", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Simple bar charts", "content": "Simple bar charts Display a bar chart.", "prev_chunk_id": "chunk_1906", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1908", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Simple line charts", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Simple line charts", "content": "Simple line charts Display a line chart.", "prev_chunk_id": "chunk_1907", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1909", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Simple scatter charts", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Simple scatter charts", "content": "Simple scatter charts Display a line chart.", "prev_chunk_id": "chunk_1908", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1910", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Scatterplots on maps", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Scatterplots on maps", "content": "Scatterplots on maps Display a map with points on it.", "prev_chunk_id": "chunk_1909", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1911", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Matplotlib", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Matplotlib", "content": "Matplotlib Display a matplotlib.pyplot figure.", "prev_chunk_id": "chunk_1910", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1912", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Altair", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Altair", "content": "Altair Display a chart using the Altair library.", "prev_chunk_id": "chunk_1911", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1913", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Vega-Lite", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Vega-Lite", "content": "Vega-Lite Display a chart using the Vega-Lite library.", "prev_chunk_id": "chunk_1912", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1914", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Plotly", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Plotly", "content": "Plotly Display an interactive Plotly chart.", "prev_chunk_id": "chunk_1913", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1915", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Bokeh", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Bokeh", "content": "Bokeh Display an interactive Bokeh chart.", "prev_chunk_id": "chunk_1914", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1916", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "PyDeck", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "PyDeck", "content": "PyDeck Display a chart using the PyDeck library.", "prev_chunk_id": "chunk_1915", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1917", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "GraphViz", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "GraphViz", "content": "GraphViz Display a graph using the dagre-d3 library.", "prev_chunk_id": "chunk_1916", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1918", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Lottie", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_1917", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1919", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Plotly Events", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_1918", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1920", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Extras", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1919", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1921", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Plost", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Plost", "content": "Plost A deceptively simple plotting library for Streamlit. Created by @tvst.", "prev_chunk_id": "chunk_1920", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1922", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "HiPlot", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "HiPlot", "content": "HiPlot High dimensional Interactive Plotting. Created by @facebookresearch.", "prev_chunk_id": "chunk_1921", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1923", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "ECharts", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "ECharts", "content": "ECharts High dimensional Interactive Plotting. Created by @andfanilo.", "prev_chunk_id": "chunk_1922", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1924", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Folium", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_1923", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1925", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Spacy-Streamlit", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Spacy-Streamlit", "content": "Spacy-Streamlit spaCy building blocks and visualizers for Streamlit apps. Created by @explosion.", "prev_chunk_id": "chunk_1924", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1926", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Agraph", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Agraph", "content": "Streamlit Agraph A Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.", "prev_chunk_id": "chunk_1925", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1927", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Lottie", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_1926", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1928", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Plotly Events", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_1927", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1929", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Extras", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1928", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1930", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Plost", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Plost", "content": "Plost A deceptively simple plotting library for Streamlit. Created by @tvst.", "prev_chunk_id": "chunk_1929", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1931", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "HiPlot", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "HiPlot", "content": "HiPlot High dimensional Interactive Plotting. Created by @facebookresearch.", "prev_chunk_id": "chunk_1930", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1932", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "ECharts", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "ECharts", "content": "ECharts High dimensional Interactive Plotting. Created by @andfanilo.", "prev_chunk_id": "chunk_1931", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1933", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Folium", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_1932", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1934", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Spacy-Streamlit", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Spacy-Streamlit", "content": "Spacy-Streamlit spaCy building blocks and visualizers for Streamlit apps. Created by @explosion.", "prev_chunk_id": "chunk_1933", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1935", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Agraph", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Agraph", "content": "Streamlit Agraph A Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.", "prev_chunk_id": "chunk_1934", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1936", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Lottie", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Lottie", "content": "Streamlit Lottie Integrate Lottie animations inside your Streamlit app. Created by @andfanilo.", "prev_chunk_id": "chunk_1935", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1937", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Plotly Events", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_1936", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1938", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Streamlit Extras", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1937", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1939", "url": "https://docs.streamlit.io/develop/api-reference/charts", "title": "Still have questions?", "page_title": "Chart elements - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1938", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1940", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections-old", "title": "Get dataframe row-selections from users (streamlit<1.35.0)", "page_title": "Get dataframe row-selections from users (streamlit<1.35.0) - Streamlit Docs", "breadcrumbs": "Get dataframe row-selections from users (streamlit<1.35.0)", "content": "Get dataframe row-selections from users (streamlit<1.35.0) Before dataframe selections were introduced in Streamlit version 1.35.0, st.dataframe and st.data_editor did not natively support passing user-selected rows to the Python backend. If you would like to work with row (or column)selections for dataframes, we recommend upgrading to streamlit>=1.35.0. For a newer tutorial, see Get dataframe row-selections from users. However, if you need a workaround for an older version of Streamlit, you can effectively get row selections by adding an extra Checkbox column) to your dataframe using st.data_editor. Use this extra column to collect a user's selection(s).", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1941", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections-old", "title": "Example", "page_title": "Get dataframe row-selections from users (streamlit<1.35.0) - Streamlit Docs", "breadcrumbs": "Example", "content": "Example In the following example, we define a function which accepts a dataframe and returns the rows selected by a user. Within the function, the dataframe is copied to prevent mutating it. We insert a temporary \"Select\" column into the copied dataframe before passing the copied data into st.data_editor. We have disabled editing for all other columns, but you can make them editable if desired. After filtering the dataframe and dropping the temporary column, our function returns the selected rows.", "prev_chunk_id": "chunk_1940", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1942", "url": "https://docs.streamlit.io/develop/tutorials/elements/dataframe-row-selections-old", "title": "Still have questions?", "page_title": "Get dataframe row-selections from users (streamlit<1.35.0) - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1941", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1943", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Annotate an Altair chart", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Annotate an Altair chart", "content": "Annotate an Altair chart Altair allows you to annotate your charts with text, images, and emojis. You can do this by overlaying two charts to create a layered chart.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1944", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Applied concepts", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Applied concepts", "content": "Applied concepts - Use layered charts in Altair to create annotations.", "prev_chunk_id": "chunk_1943", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1945", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Prerequisites", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following Python libraries:streamlit altair>=4.0.0 vega_datasets - This tutorial assumes you have a clean working directory calledyour-repository. - You should have a basic understanding of the Vega-Altair charting library.", "prev_chunk_id": "chunk_1944", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1946", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Summary", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this example, you will create a time-series chart to track the evolution of stock prices. The chart will have two layers: a data layer and an annotation layer. Each layer is an altair.Chart object. You will combine the two charts with the + opterator to create a layered chart. Within the data layer, you'll add a multi-line tooltip to show information about datapoints. To learn more about multi-line tooltips, see this example in Vega-Altair's documentation. You'll add another tooltip to the annotation layer. Here's a look at what you'll build:", "prev_chunk_id": "chunk_1945", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1947", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Initialize your app", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st import altair as alt import pandas as pd from vega_datasets import dataYou'll be using these libraries as follows:You'll download a dataset usingvega_datasets.You'll maniputate the data usingpandas.You'll define a chart usingaltair. - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_1946", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1948", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Build the data layer", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Build the data layer", "content": "Build the data layer You'll build an interactive time-series chart of the stock prices with a multi-line tooltip. The x-axis represents the date, and the y-axis represents the stock price. - Import data fromvega_datasets.@st.cache_data def get_data(): source = data.stocks() source = source[source.date.gt(\"2004-01-01\")] return source stock_data = get_data()The@st.cache_datadecorator turnsget_data()into a cahced function. Streamlit will only download the data once since the data will be saved in a cache. For more information about caching, seeCaching overview. - Define a mouseover selection event in Altair.hover = alt.selection_single( fields=[\"date\"], nearest=True, on=\"mouseover\", empty=\"none\", )This defines a mouseover selection for points.fields=[\"date\"]allows Altair to identify other points with the same date. You will use this to create a vertical line highlight when a user hovers over a point. - Define a basic line chart to graph the five series in your data set.lines = ( alt.Chart(stock_data, title=\"Evolution of stock prices\") .mark_line() .encode( x=\"date\", y=\"price\", color=\"symbol\", ) ) - Draw points on the lines and highlight them based on the mouseover selection.points = lines.transform_filter(hover).mark_circle(size=65)Since the mouseover selection includesfields=[\"date\"], Altair will draw circles on each series at the same date. - Draw a vertical rule at the location of the mouseover selection.tooltips = ( alt.Chart(stock_data) .mark_rule() .encode( x=\"yearmonthdate(date)\", y=\"price\", opacity=alt.condition(hover, alt.value(0.3), alt.value(0)), tooltip=[ alt.Tooltip(\"date\", title=\"Date\"), alt.Tooltip(\"price\", title=\"Price (USD)\"), ], ) .add_selection(hover) )Theopacityparameter ensures each vertical line is only visible when it's part of a mouseover selection. Eachalt.Tooltipadds a line to your multi-line tooltip. - Combine the lines, points, and tooltips into a single chart.data_layer = lines + points + tooltips - Optional: Test out your code by rendering your data layer.st.altair_chart(data_layer, use_container_width=True)Save your file and examine the chart in your app. Use your mouse to hover over points. Observe the circle marks, vertical line, and tooltip as you hover over a point. Delete the line or keep it at", "prev_chunk_id": "chunk_1947", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1949", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Build the data layer", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Build the data layer", "content": "the end of your app to be updated as you continue.", "prev_chunk_id": "chunk_1948", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1950", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Build the annotation layer", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Build the annotation layer", "content": "Build the annotation layer Now that you have the first chart that shows the data, you can annotate it with text and an emoji. In this section, you'll add some emojis and tooltips to mark specifc points of interest. - Create a list of annotations.ANNOTATIONS = [ (\"Sep 01, 2007\", 450, \"🙂\", \"Something's going well for GOOG & AAPL.\"), (\"Nov 01, 2008\", 220, \"🙂\", \"The market is recovering.\"), (\"Dec 01, 2007\", 750, \"😱\", \"Something's going wrong for GOOG & AAPL.\"), (\"Dec 01, 2009\", 680, \"😱\", \"A hiccup for GOOG.\"), ] annotations_df = pd.DataFrame( ANNOTATIONS, columns=[\"date\", \"price\", \"marker\", \"description\"] ) annotations_df.date = pd.to_datetime(annotations_df.date)The first two columns (\"date\" and \"price\") determine where Altair will place the marker. The third column (\"marker\") determines what icon Altair will place. The last column (\"description\") will fill in the associated tooltip. - Create a scatter plot with the x-axis representing the date and the y-axis representing the height (\"price\") of each annotation.annotation_layer = ( alt.Chart(annotations_df) .mark_text(size=20, dx=-10, dy=0, align=\"left\") .encode(x=\"date:T\", y=alt.Y(\"price:Q\"), text=\"marker\", tooltip=\"description\") )Thedx=-10, dy=0inside of.mark_text()offsets the icons so they are centered at the coordinate in your annotations dataframe. The four columns are passed to the chart through the.encode()method. If you want to use the same marker for all points, you can removetext=\"marker\"from the.encode()method and add the marker to.mark_text(). For example,.mark_text(text=\"🥳\")would make all the icons be \"🥳\". For more information about.mark_text(), see Altair'sdocumentation.", "prev_chunk_id": "chunk_1949", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1951", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Combine the chart layers", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Combine the chart layers", "content": "Combine the chart layers - Define the combined chart.combined_chart = data_layer + annotation_layer - Display the chart in Streamlit.st.altair_chart(combined_chart, use_container_width=True)", "prev_chunk_id": "chunk_1950", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1952", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Next steps", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Next steps", "content": "Next steps Play around with your new app. - If you want to use custom images instead of text or emojis to annotation your chart, you can replace the line containing.mark_text()with.mark_image(). For some URL string stored in a variableIMAGE_URL, you could do something like this:.mark_image( width=12, height=12, url=IMAGE_URL, ) - If you want to enable panning and zooming for your chart, add.interactive()when you define your combined chart:combined_chart = (data_layer + annotation_layer).interactive()", "prev_chunk_id": "chunk_1951", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1953", "url": "https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart", "title": "Still have questions?", "page_title": "Annotate an Altair chart - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1952", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1954", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Data elements", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Data elements", "content": "Data elements When you're working with data, it is extremely valuable to visualize that data quickly, interactively, and from multiple different angles. That's what Streamlit is actually built and optimized for. You can display data via charts, and you can display it in raw form. These are the Streamlit commands you can use to display and interact with raw data.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1955", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Dataframes", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Dataframes", "content": "Dataframes Display a dataframe as an interactive table.", "prev_chunk_id": "chunk_1954", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1956", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Data editor", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Data editor", "content": "Data editor Display a data editor widget.", "prev_chunk_id": "chunk_1955", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1957", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Column configuration", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Column configuration", "content": "Column configuration Configure the display and editing behavior of dataframes and data editors.", "prev_chunk_id": "chunk_1956", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1958", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Static tables", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Static tables", "content": "Static tables Display a static table.", "prev_chunk_id": "chunk_1957", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1959", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Metrics", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Metrics", "content": "Metrics Display a metric in big bold font, with an optional indicator of how the metric changed.", "prev_chunk_id": "chunk_1958", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1960", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Dicts and JSON", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Dicts and JSON", "content": "Dicts and JSON Display object or string as a pretty-printed JSON string.", "prev_chunk_id": "chunk_1959", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1961", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Image Coordinates", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_1960", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1962", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Plotly Events", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_1961", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1963", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Streamlit Extras", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1962", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1964", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Streamlit Aggrid", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Streamlit Aggrid", "content": "Streamlit Aggrid Implementation of Ag-Grid component for Streamlit. Created by @PablocFonseca.", "prev_chunk_id": "chunk_1963", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1965", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Streamlit Folium", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_1964", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1966", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Pandas Profiling", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Pandas Profiling", "content": "Pandas Profiling Pandas profiling component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_1965", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1967", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Image Coordinates", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_1966", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1968", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Plotly Events", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_1967", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1969", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Streamlit Extras", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1968", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1970", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Streamlit Aggrid", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Streamlit Aggrid", "content": "Streamlit Aggrid Implementation of Ag-Grid component for Streamlit. Created by @PablocFonseca.", "prev_chunk_id": "chunk_1969", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1971", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Streamlit Folium", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Streamlit Folium", "content": "Streamlit Folium Streamlit Component for rendering Folium maps. Created by @randyzwitch.", "prev_chunk_id": "chunk_1970", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1972", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Pandas Profiling", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Pandas Profiling", "content": "Pandas Profiling Pandas profiling component for Streamlit. Created by @okld.", "prev_chunk_id": "chunk_1971", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1973", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Image Coordinates", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Image Coordinates", "content": "Image Coordinates Get the coordinates of clicks on an image. Created by @blackary.", "prev_chunk_id": "chunk_1972", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1974", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Plotly Events", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Plotly Events", "content": "Plotly Events Make Plotly charts interactive!. Created by @null-jones.", "prev_chunk_id": "chunk_1973", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1975", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Streamlit Extras", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1974", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1976", "url": "https://docs.streamlit.io/develop/api-reference/data", "title": "Still have questions?", "page_title": "Data elements - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_1975", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1977", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Text elements", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Text elements", "content": "Text elements Streamlit apps usually start with a call to st.title to set the app's title. After that, there are 2 heading levels you can use: st.header and st.subheader. Pure text is entered with st.text, and Markdown with st.markdown. We also offer a \"swiss-army knife\" command called st.write, which accepts multiple arguments, and multiple data types. And as described above, you can also use magic commands in place of st.write.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1978", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Markdown", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Markdown", "content": "Markdown Display string formatted as Markdown.", "prev_chunk_id": "chunk_1977", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1979", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Title", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Title", "content": "Title Display text in title formatting.", "prev_chunk_id": "chunk_1978", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1980", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Header", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Header", "content": "Header Display text in header formatting.", "prev_chunk_id": "chunk_1979", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1981", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Subheader", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Subheader", "content": "Subheader Display text in subheader formatting.", "prev_chunk_id": "chunk_1980", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1982", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Badge", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Badge", "content": "Badge Display a small, colored badge.", "prev_chunk_id": "chunk_1981", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1983", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Caption", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Caption", "content": "Caption Display text in small font.", "prev_chunk_id": "chunk_1982", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1984", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Code block", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Code block", "content": "Code block Display a code block with optional syntax highlighting.", "prev_chunk_id": "chunk_1983", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1985", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Echo", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Echo", "content": "Echo Display some code on the app, then execute it. Useful for tutorials.", "prev_chunk_id": "chunk_1984", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1986", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Preformatted text", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Preformatted text", "content": "Preformatted text Write fixed-width and preformatted text.", "prev_chunk_id": "chunk_1985", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1987", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "LaTeX", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "LaTeX", "content": "LaTeX Display mathematical expressions formatted as LaTeX.", "prev_chunk_id": "chunk_1986", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1988", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Divider", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Divider", "content": "Divider Display a horizontal rule.", "prev_chunk_id": "chunk_1987", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1989", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Get help", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Get help", "content": "Get help Display object’s doc string, nicely formatted.", "prev_chunk_id": "chunk_1988", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1990", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Render HTML", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Render HTML", "content": "Render HTML Renders HTML strings to your app.", "prev_chunk_id": "chunk_1989", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1991", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Tags", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_1990", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1992", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "NLU", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "NLU", "content": "NLU Apply text mining on a dataframe. Created by @JohnSnowLabs.", "prev_chunk_id": "chunk_1991", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1993", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Streamlit Extras", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1992", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1994", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Annotated text", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Annotated text", "content": "Annotated text Display annotated text in Streamlit apps. Created by @tvst.", "prev_chunk_id": "chunk_1993", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1995", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Drawable Canvas", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_1994", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1996", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Tags", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_1995", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1997", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "NLU", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "NLU", "content": "NLU Apply text mining on a dataframe. Created by @JohnSnowLabs.", "prev_chunk_id": "chunk_1996", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1998", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Streamlit Extras", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_1997", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_1999", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Annotated text", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Annotated text", "content": "Annotated text Display annotated text in Streamlit apps. Created by @tvst.", "prev_chunk_id": "chunk_1998", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2000", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Drawable Canvas", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Drawable Canvas", "content": "Drawable Canvas Provides a sketching canvas using Fabric.js. Created by @andfanilo.", "prev_chunk_id": "chunk_1999", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2001", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Tags", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Tags", "content": "Tags Add tags to your Streamlit apps. Created by @gagan3012.", "prev_chunk_id": "chunk_2000", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2002", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "NLU", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "NLU", "content": "NLU Apply text mining on a dataframe. Created by @JohnSnowLabs.", "prev_chunk_id": "chunk_2001", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2003", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Streamlit Extras", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Streamlit Extras", "content": "Streamlit Extras A library with useful Streamlit extras. Created by @arnaudmiribel.", "prev_chunk_id": "chunk_2002", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2004", "url": "https://docs.streamlit.io/develop/api-reference/text", "title": "Still have questions?", "page_title": "Text elements - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2003", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2005", "url": "https://docs.streamlit.io/develop/api-reference/write-magic", "title": "st.write and magic commands", "page_title": "st.write and magic commands - Streamlit Docs", "breadcrumbs": "st.write and magic commands", "content": "st.write and magic commands Streamlit has two easy ways to display information into your app, which should typically be the first thing you try: st.write and magic.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2006", "url": "https://docs.streamlit.io/develop/api-reference/write-magic", "title": "st.write", "page_title": "st.write and magic commands - Streamlit Docs", "breadcrumbs": "st.write", "content": "st.write Write arguments to the app.", "prev_chunk_id": "chunk_2005", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2007", "url": "https://docs.streamlit.io/develop/api-reference/write-magic", "title": "st.write_stream", "page_title": "st.write and magic commands - Streamlit Docs", "breadcrumbs": "st.write_stream", "content": "st.write_stream Write generators or streams to the app with a typewriter effect.", "prev_chunk_id": "chunk_2006", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2008", "url": "https://docs.streamlit.io/develop/api-reference/write-magic", "title": "Magic", "page_title": "st.write and magic commands - Streamlit Docs", "breadcrumbs": "Magic", "content": "Magic Any time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write", "prev_chunk_id": "chunk_2007", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2009", "url": "https://docs.streamlit.io/develop/api-reference/write-magic", "title": "Still have questions?", "page_title": "st.write and magic commands - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2008", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2010", "url": "https://docs.streamlit.io/develop/tutorials/multipage", "title": "Create a dynamic navigation menu", "page_title": "Build multipage apps - Streamlit Docs", "breadcrumbs": "Create a dynamic navigation menu", "content": "Create a dynamic navigation menu Create a dynamic, user-dependant navigation menu with st.navigation.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2011", "url": "https://docs.streamlit.io/develop/tutorials/multipage", "title": "Still have questions?", "page_title": "Build multipage apps - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2010", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2012", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow", "title": "Trigger a full-script rerun from inside a fragment", "page_title": "Use core features to work with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Trigger a full-script rerun from inside a fragment", "content": "Trigger a full-script rerun from inside a fragment Call st.rerun from inside a fragment to trigger a full-script rerun when a condition is met.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2013", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow", "title": "Create a fragment across multiple containers", "page_title": "Use core features to work with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Create a fragment across multiple containers", "content": "Create a fragment across multiple containers Use a fragment to write to multiple containers across your app.", "prev_chunk_id": "chunk_2012", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2014", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow", "title": "Start and stop a streaming fragment", "page_title": "Use core features to work with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Start and stop a streaming fragment", "content": "Start and stop a streaming fragment Use a fragment to live-stream data. Use a button to start and stop the live-streaming.", "prev_chunk_id": "chunk_2013", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2015", "url": "https://docs.streamlit.io/develop/tutorials/execution-flow", "title": "Still have questions?", "page_title": "Use core features to work with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2014", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2016", "url": "https://docs.streamlit.io/develop/tutorials/elements", "title": "Annotate an Altair chart", "page_title": "Work with Streamlit elements - Streamlit Docs", "breadcrumbs": "Annotate an Altair chart", "content": "Annotate an Altair chart Add annotations to an Altair chart.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2017", "url": "https://docs.streamlit.io/develop/tutorials/elements", "title": "Get row selections from dataframes", "page_title": "Work with Streamlit elements - Streamlit Docs", "breadcrumbs": "Get row selections from dataframes", "content": "Get row selections from dataframes Work with user row-selections in dataframes.", "prev_chunk_id": "chunk_2016", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2018", "url": "https://docs.streamlit.io/develop/tutorials/elements", "title": "Still have questions?", "page_title": "Work with Streamlit elements - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2017", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2019", "url": "https://docs.streamlit.io/develop/tutorials/databases", "title": "Connect Streamlit to data sources", "page_title": "Connect to data sources - Streamlit Docs", "breadcrumbs": "Connect Streamlit to data sources", "content": "Connect Streamlit to data sources These step-by-step guides demonstrate how to connect Streamlit apps to various databases & APIs. They use Streamlit's Secrets management and caching to provide secure and fast data access.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2020", "url": "https://docs.streamlit.io/develop/tutorials/databases", "title": "Still have questions?", "page_title": "Connect to data sources - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2019", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2021", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming", "title": "Use external font files and fallbacks to customize your font", "page_title": "Customize your theme and configure your app - Streamlit Docs", "breadcrumbs": "Use external font files and fallbacks to customize your font", "content": "Use external font files and fallbacks to customize your font Make a new font available to your app. This tutorial uses externally hosted font files to define an alternative font and declares a built-in fallback.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2022", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming", "title": "Use static font files to customize your font", "page_title": "Customize your theme and configure your app - Streamlit Docs", "breadcrumbs": "Use static font files to customize your font", "content": "Use static font files to customize your font Make a new font available to your app. This tutorial uses static font files to define an alternative font.", "prev_chunk_id": "chunk_2021", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2023", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming", "title": "Use variable font files to customize your font", "page_title": "Customize your theme and configure your app - Streamlit Docs", "breadcrumbs": "Use variable font files to customize your font", "content": "Use variable font files to customize your font Make a new font available to your app. This tutorial uses variable font files to define an alternative font.", "prev_chunk_id": "chunk_2022", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2024", "url": "https://docs.streamlit.io/develop/tutorials/configuration-and-theming", "title": "Still have questions?", "page_title": "Customize your theme and configure your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2023", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2025", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps", "title": "Build a basic chat app", "page_title": "Build LLM apps - Streamlit Docs", "breadcrumbs": "Build a basic chat app", "content": "Build a basic chat app Build a simple OpenAI chat app to get started with Streamlit's chat elements.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2026", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps", "title": "Build an LLM app using LangChain", "page_title": "Build LLM apps - Streamlit Docs", "breadcrumbs": "Build an LLM app using LangChain", "content": "Build an LLM app using LangChain Build a chat app using the LangChain framework with OpenAI.", "prev_chunk_id": "chunk_2025", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2027", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps", "title": "Get chat response feedback", "page_title": "Build LLM apps - Streamlit Docs", "breadcrumbs": "Get chat response feedback", "content": "Get chat response feedback Buid a chat app and let users rate the responses. (thumb_up thumb_down)", "prev_chunk_id": "chunk_2026", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2028", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps", "title": "Validate and edit chat responses", "page_title": "Build LLM apps - Streamlit Docs", "breadcrumbs": "Validate and edit chat responses", "content": "Validate and edit chat responses Build a chat app with response validation. Let users correct or edit the responses.", "prev_chunk_id": "chunk_2027", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2029", "url": "https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps", "title": "Still have questions?", "page_title": "Build LLM apps - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2028", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2030", "url": "https://docs.streamlit.io/develop/tutorials/authentication", "title": "Authenticate users and personalize your app", "page_title": "Authenticate users and personalize your app - Streamlit Docs", "breadcrumbs": "Authenticate users and personalize your app", "content": "Authenticate users and personalize your app Streamlit supports user authentication with the OpenID Connect (OIDC) protocol. You can use any OIDC provider. Whether you want to create a social login or manage your enterprise users, Streamlit makes it simple to authenticate your users.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2031", "url": "https://docs.streamlit.io/develop/tutorials/authentication", "title": "Still have questions?", "page_title": "Authenticate users and personalize your app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2030", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2032", "url": "https://docs.streamlit.io/develop/concepts/custom-components", "title": "Custom Components", "page_title": "Components - Streamlit Docs", "breadcrumbs": "Custom Components", "content": "Custom Components Components are third-party Python modules that extend what's possible with Streamlit.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2033", "url": "https://docs.streamlit.io/develop/concepts/custom-components", "title": "How to use a Component", "page_title": "Components - Streamlit Docs", "breadcrumbs": "How to use a Component", "content": "How to use a Component Components are super easy to use: - Start by finding the Component you'd like to use. Two great resources for this are:TheComponent galleryThis thread, by Fanilo A. from our forums. - Install the Component using your favorite Python package manager. This step and all following steps are described in your component's instructions.For example, to use the fantasticAgGrid Component, you first install it with:pip install streamlit-aggrid - In your Python code, import the Component as described in its instructions. For AgGrid, this step is:from st_aggrid import AgGrid - ...now you're ready to use it! For AgGrid, that's:AgGrid(my_dataframe)", "prev_chunk_id": "chunk_2032", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2034", "url": "https://docs.streamlit.io/develop/concepts/custom-components", "title": "Making your own Component", "page_title": "Components - Streamlit Docs", "breadcrumbs": "Making your own Component", "content": "Making your own Component If you're interested in making your own component, check out the following resources: - Create a Component - Publish a Component - Components API - Blog post for when we launched Components! Alternatively, if you prefer to learn using videos, our engineer Tim Conkling has put together some amazing tutorials:", "prev_chunk_id": "chunk_2033", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2035", "url": "https://docs.streamlit.io/develop/concepts/custom-components", "title": "Still have questions?", "page_title": "Components - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2034", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2036", "url": "https://docs.streamlit.io/develop/concepts/connections", "title": "Connecting to data", "page_title": "Working with connections, secrets, and user authentication - Streamlit Docs", "breadcrumbs": "Connecting to data", "content": "Connecting to data Connect your app to remote data or a third-party API.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2037", "url": "https://docs.streamlit.io/develop/concepts/connections", "title": "Secrets managements", "page_title": "Working with connections, secrets, and user authentication - Streamlit Docs", "breadcrumbs": "Secrets managements", "content": "Secrets managements Set up your development environement and design your app to handle secrets securely.", "prev_chunk_id": "chunk_2036", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2038", "url": "https://docs.streamlit.io/develop/concepts/connections", "title": "Authentication and user information", "page_title": "Working with connections, secrets, and user authentication - Streamlit Docs", "breadcrumbs": "Authentication and user information", "content": "Authentication and user information Use an OpenID Connect provider to authenticate users and personalize your app.", "prev_chunk_id": "chunk_2037", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2039", "url": "https://docs.streamlit.io/develop/concepts/connections", "title": "Security reminders", "page_title": "Working with connections, secrets, and user authentication - Streamlit Docs", "breadcrumbs": "Security reminders", "content": "Security reminders Check out a few reminders to follow best practices and avoid security mistakes.", "prev_chunk_id": "chunk_2038", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2040", "url": "https://docs.streamlit.io/develop/concepts/connections", "title": "Still have questions?", "page_title": "Working with connections, secrets, and user authentication - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2039", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2041", "url": "https://docs.streamlit.io/develop/concepts/design", "title": "Animate and update elements", "page_title": "App design concepts and considerations - Streamlit Docs", "breadcrumbs": "Animate and update elements", "content": "Animate and update elements Understand how to create dynamic, animated content or update elements without rerunning your app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2042", "url": "https://docs.streamlit.io/develop/concepts/design", "title": "Button behavior and examples", "page_title": "App design concepts and considerations - Streamlit Docs", "breadcrumbs": "Button behavior and examples", "content": "Button behavior and examples Understand how buttons work with explanations and examples to avoid common mistakes.", "prev_chunk_id": "chunk_2041", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2043", "url": "https://docs.streamlit.io/develop/concepts/design", "title": "Dataframes", "page_title": "App design concepts and considerations - Streamlit Docs", "breadcrumbs": "Dataframes", "content": "Dataframes Dataframes are a great way to display and edit data in a tabular format. Understand the UI and options available in Streamlit.", "prev_chunk_id": "chunk_2042", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2044", "url": "https://docs.streamlit.io/develop/concepts/design", "title": "Using custom Python classes in your Streamlit app", "page_title": "App design concepts and considerations - Streamlit Docs", "breadcrumbs": "Using custom Python classes in your Streamlit app", "content": "Using custom Python classes in your Streamlit app Understand the impact of defining your own Python classes within Streamlit's rerun model.", "prev_chunk_id": "chunk_2043", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2045", "url": "https://docs.streamlit.io/develop/concepts/design", "title": "Multithreading", "page_title": "App design concepts and considerations - Streamlit Docs", "breadcrumbs": "Multithreading", "content": "Multithreading Understand how to use multithreading within Streamlit apps.", "prev_chunk_id": "chunk_2044", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2046", "url": "https://docs.streamlit.io/develop/concepts/design", "title": "Working with timezones", "page_title": "App design concepts and considerations - Streamlit Docs", "breadcrumbs": "Working with timezones", "content": "Working with timezones Understand how to localize time to your users.", "prev_chunk_id": "chunk_2045", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2047", "url": "https://docs.streamlit.io/develop/concepts/design", "title": "Still have questions?", "page_title": "App design concepts and considerations - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2046", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2048", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps", "title": "Overview of multipage apps", "page_title": "Multipage apps - Streamlit Docs", "breadcrumbs": "Overview of multipage apps", "content": "Overview of multipage apps Streamlit provides multiple ways to define multipage apps. Understand the terminology and basic comparison between methods.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2049", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps", "title": "Define multipage apps with st.Page and st.navigation", "page_title": "Multipage apps - Streamlit Docs", "breadcrumbs": "Define multipage apps with st.Page and st.navigation", "content": "Define multipage apps with st.Page and st.navigation Learn about the preferred method for defining multipage apps. st.Page and st.navigation give you flexibility to organize your project directory and label your pages as you please.", "prev_chunk_id": "chunk_2048", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2050", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps", "title": "Creating multipage apps using the pages/ directory", "page_title": "Multipage apps - Streamlit Docs", "breadcrumbs": "Creating multipage apps using the pages/ directory", "content": "Creating multipage apps using the pages/ directory Define your multipage apps through directory structure. Place additional Python files in a pages/ directory alongside your entrypoint file and pages are automatically shown in a navigation widget inside your app's sidebar.", "prev_chunk_id": "chunk_2049", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2051", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps", "title": "Working with widgets in multipage apps", "page_title": "Multipage apps - Streamlit Docs", "breadcrumbs": "Working with widgets in multipage apps", "content": "Working with widgets in multipage apps Understand how widget identity is tied to pages. Learn strategies to get the behavior you want out of widgets.", "prev_chunk_id": "chunk_2050", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2052", "url": "https://docs.streamlit.io/develop/concepts/multipage-apps", "title": "Still have questions?", "page_title": "Multipage apps - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2051", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2053", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "Run your app", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Run your app", "content": "Run your app Understand how to start your Streamlit app.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2054", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "Streamlit's architecture", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Streamlit's architecture", "content": "Streamlit's architecture Understand Streamlit's client-server architecture and related considerations.", "prev_chunk_id": "chunk_2053", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2055", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "The app chrome", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "The app chrome", "content": "The app chrome Every Streamlit app has a few widgets in the top right to help you as you develop your app and help your users as they view your app. This is called the app chrome.", "prev_chunk_id": "chunk_2054", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2056", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "Caching", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Caching", "content": "Caching Make your app performant by caching results to avoid unecessary recomputation with each rerun.", "prev_chunk_id": "chunk_2055", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2057", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "Session State", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Session State", "content": "Session State Manage your app's statefulness with Session State.", "prev_chunk_id": "chunk_2056", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2058", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "Forms", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Forms", "content": "Forms Use forms to isolate user input and prevent unnecessary app reruns.", "prev_chunk_id": "chunk_2057", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2059", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "Widget behavior", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Widget behavior", "content": "Widget behavior Understand how widgets work in detail.", "prev_chunk_id": "chunk_2058", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2060", "url": "https://docs.streamlit.io/develop/concepts/architecture", "title": "Still have questions?", "page_title": "Working with Streamlit's execution model - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2059", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2061", "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features", "title": "Additional Streamlit features", "page_title": "Additional Streamlit features - Streamlit Docs", "breadcrumbs": "Additional Streamlit features", "content": "Additional Streamlit features So you've read all about Streamlit's Basic concepts and gotten a taste of caching and Session State in Advanced concepts. But what about the bells and whistles? Here's a quick look at some extra features to take your app to the next level.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2062", "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features", "title": "Theming", "page_title": "Additional Streamlit features - Streamlit Docs", "breadcrumbs": "Theming", "content": "Theming Streamlit supports Light and Dark themes out of the box. Streamlit will first check if the user viewing an app has a Light or Dark mode preference set by their operating system and browser. If so, then that preference will be used. Otherwise, the Light theme is applied by default. You can also change the active theme from \"⋮\" → \"Settings\". Want to add your own theme to an app? The \"Settings\" menu has a theme editor accessible by clicking on \"Edit active theme\". You can use this editor to try out different colors and see your app update live. When you're happy with your work, themes can be saved by setting config options in the [theme] config section. After you've defined a theme for your app, it will appear as \"Custom Theme\" in the theme selector and will be applied by default instead of the included Light and Dark themes. More information about the options available when defining a theme can be found in the theme option documentation.", "prev_chunk_id": "chunk_2061", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2063", "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features", "title": "Pages", "page_title": "Additional Streamlit features - Streamlit Docs", "breadcrumbs": "Pages", "content": "Pages As apps grow large, it becomes useful to organize them into multiple pages. This makes the app easier to manage as a developer and easier to navigate as a user. Streamlit provides a powerful way to create multipage apps using st.Page and st.navigation. Just create your pages and connect them with navigation as follows: - Create an entry point script that defines and connects your pages - Create separate Python files for each page's content - Usest.Pageto define your pages andst.navigationto connect them Here's an example of a three-page app: Now run streamlit run streamlit_app.py and view your shiny new multipage app! The navigation menu will automatically appear, allowing users to switch between pages. Our documentation on Multipage apps teaches you how to add pages to your app, including how to define pages, structure and run multipage apps, and navigate between pages. Once you understand the basics, create your first multipage app!", "prev_chunk_id": "chunk_2062", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2064", "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features", "title": "Custom components", "page_title": "Additional Streamlit features - Streamlit Docs", "breadcrumbs": "Custom components", "content": "Custom components If you can't find the right component within the Streamlit library, try out custom components to extend Streamlit's built-in functionality. Explore and browse through popular, community-created components in the Components gallery. If you dabble in frontend development, you can build your own custom component with Streamlit's components API.", "prev_chunk_id": "chunk_2063", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2065", "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features", "title": "Static file serving", "page_title": "Additional Streamlit features - Streamlit Docs", "breadcrumbs": "Static file serving", "content": "Static file serving As you learned in Streamlit fundamentals, Streamlit runs a server that clients connect to. That means viewers of your app don't have direct access to the files which are local to your app. Most of the time, this doesn't matter because Streamlt commands handle that for you. When you use st.image(<path-to-image>) your Streamlit server will access the file and handle the necessary hosting so your app viewers can see it. However, if you want a direct URL to an image or file you'll need to host it. This requires setting the correct configuration and placing your hosted files in a directory named static. For example, your project could look like: To learn more, read our guide on Static file serving.", "prev_chunk_id": "chunk_2064", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2066", "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features", "title": "App testing", "page_title": "Additional Streamlit features - Streamlit Docs", "breadcrumbs": "App testing", "content": "App testing Good development hygiene includes testing your code. Automated testing allows you to write higher quality code, faster! Streamlit has a built-in testing framework that let's you build tests easily. Use your favorite testing framework to run your tests. We like pytest. When you test a Streamlit app, you simulate running the app, declare user input, and inspect the results. You can use GitHub workflows to automate your tests and get instant alerts about breaking changes. Learn more in our guide to App testing.", "prev_chunk_id": "chunk_2065", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2067", "url": "https://docs.streamlit.io/get-started/fundamentals/additional-features", "title": "Still have questions?", "page_title": "Additional Streamlit features - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2066", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2068", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Advanced concepts of Streamlit", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Advanced concepts of Streamlit", "content": "Advanced concepts of Streamlit Now that you know how a Streamlit app runs and handles data, let's talk about being efficient. Caching allows you to save the output of a function so you can skip over it on rerun. Session State lets you save information for each user that is preserved between reruns. This not only allows you to avoid unecessary recalculation, but also allows you to create dynamic pages and handle progressive processes.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2069", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Caching", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Caching", "content": "Caching Caching allows your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations. The basic idea behind caching is to store the results of expensive function calls and return the cached result when the same inputs occur again. This avoids repeated execution of a function with the same input values. To cache a function in Streamlit, you need to apply a caching decorator to it. You have two choices: - st.cache_datais the recommended way to cache computations that return data. Usest.cache_datawhen you use a function that returns a serializable data object (e.g. str, int, float, DataFrame, dict, list).It creates a new copy of the data at each function call, making it safe againstmutations and race conditions. The behavior ofst.cache_datais what you want in most cases – so if you're unsure, start withst.cache_dataand see if it works! - st.cache_resourceis the recommended way to cache global resources like ML models or database connections. Usest.cache_resourcewhen your function returns unserializable objects that you don’t want to load multiple times.It returns the cached object itself, which is shared across all reruns and sessions without copying or duplication. If you mutate an object that is cached usingst.cache_resource, that mutation will exist across all reruns and sessions. Example: In the above example, long_running_function is decorated with @st.cache_data. As a result, Streamlit notes the following: - The name of the function (\"long_running_function\"). - The value of the inputs (param1,param2). - The code within the function. Before running the code within long_running_function, Streamlit checks its cache for a previously saved result. If it finds a cached result for the given function and input values, it will return that cached result and not rerun function's code. Otherwise, Streamlit executes the function, saves the result in its cache, and proceeds with the", "prev_chunk_id": "chunk_2068", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2070", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Caching", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Caching", "content": "script run. During development, the cache updates automatically as the function code changes, ensuring that the latest changes are reflected in the cache. For more information about the Streamlit caching decorators, their configuration parameters, and their limitations, see Caching.", "prev_chunk_id": "chunk_2069", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2071", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Session State", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Session State", "content": "Session State Session State provides a dictionary-like interface where you can save information that is preserved between script reruns. Use st.session_state with key or attribute notation to store and recall values. For example, st.session_state[\"my_key\"] or st.session_state.my_key. Remember that widgets handle their statefulness all by themselves, so you won't always need to use Session State!", "prev_chunk_id": "chunk_2070", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2072", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "What is a session?", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "What is a session?", "content": "What is a session? A session is a single instance of viewing an app. If you view an app from two different tabs in your browser, each tab will have its own session. So each viewer of an app will have a Session State tied to their specific view. Streamlit maintains this session as the user interacts with the app. If the user refreshes their browser page or reloads the URL to the app, their Session State resets and they begin again with a new session.", "prev_chunk_id": "chunk_2071", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2073", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Examples of using Session State", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Examples of using Session State", "content": "Examples of using Session State Here's a simple app that counts the number of times the page has been run. Every time you click the button, the script will rerun. - First run:The first time the app runs for each user, Session State is empty. Therefore, a key-value pair is created (\"counter\":0). As the script continues, the counter is immediately incremented (\"counter\":1) and the result is displayed: \"This page has run 1 times.\" When the page has fully rendered, the script has finished and the Streamlit server waits for the user to do something. When that user clicks the button, a rerun begins. - Second run:Since \"counter\" is already a key in Session State, it is not reinitialized. As the script continues, the counter is incremented (\"counter\":2) and the result is displayed: \"This page has run 2 times.\" There are a few common scenarios where Session State is helpful. As demonstrated above, Session State is used when you have a progressive process that you want to build upon from one rerun to the next. Session State can also be used to prevent recalculation, similar to caching. However, the differences are important: - Caching associates stored values to specific functions and inputs. Cached values are accessible to all users across all sessions. - Session State associates stored values to keys (strings). Values in session state are only available in the single session where it was saved. If you have random number generation in your app, you'd likely use Session State. Here's an example where data is generated randomly at the beginning of each session. By saving this random information in Session State, each user gets different random data when they open the app but it won't keep changing on them as they interact with it. If you select different colors with", "prev_chunk_id": "chunk_2072", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2074", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Examples of using Session State", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Examples of using Session State", "content": "the picker you'll see that the data does not get re-randomized with each rerun. (If you open the app in a new tab to start a new session, you'll see different data!) If you are pulling the same data for all users, you'd likely cache a function that retrieves that data. On the other hand, if you pull data specific to a user, such as querying their personal information, you may want to save that in Session State. That way, the queried data is only available in that one session. As mentioned in Basic concepts, Session State is also related to widgets. Widgets are magical and handle statefulness quietly on their own. As an advanced feature however, you can manipulate the value of widgets within your code by assigning keys to them. Any key assigned to a widget becomes a key in Session State tied to the value of the widget. This can be used to manipulate the widget. After you finish understanding the basics of Streamlit, check out our guide on Widget behavior to dig in the details if you're interested.", "prev_chunk_id": "chunk_2073", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2075", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Connections", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Connections", "content": "Connections As hinted above, you can use @st.cache_resource to cache connections. This is the most general solution which allows you to use almost any connection from any Python library. However, Streamlit also offers a convenient way to handle some of the most popular connections, like SQL! st.connection takes care of the caching for you so you can enjoy fewer lines of code. Getting data from your database can be as easy as: Of course, you may be wondering where your username and password go. Streamlit has a convenient mechanism for Secrets management. For now, let's just see how st.connection works very nicely with secrets. In your local project directory, you can save a .streamlit/secrets.toml file. You save your secrets in the toml file and st.connection just uses them! For example, if you have an app file streamlit_app.py your project directory may look like this: For the above SQL example, your secrets.toml file might look like the following: Since you don't want to commit your secrets.toml file to your repository, you'll need to learn how your host handles secrets when you're ready to publish your app. Each host platform may have a different way for you to pass your secrets. If you use Streamlit Community Cloud for example, each deployed app has a settings menu where you can load your secrets. After you've written an app and are ready to deploy, you can read all about how to Deploy your app on Community Cloud.", "prev_chunk_id": "chunk_2074", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2076", "url": "https://docs.streamlit.io/get-started/fundamentals/advanced-concepts", "title": "Still have questions?", "page_title": "Advanced concepts of Streamlit - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2075", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2077", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "Use Streamlit in Snowflake to code in a secure environment Snowflake is a single, global platform that powers the Data Cloud. If you want to use a secure platform with role-based access control, this is the option for you! This page walks you through creating a trial Snowflake account and building a \"Hello world\" app. Your trial account comes with an account credit so you can try out the service without entering any payment information. All you need is an email address! Everything else happens in your 30-day trial account. - Go tosignup.snowflake.com. (This link will open in a new tab.) - Fill in your information, and click \"CONTINUE.\" - Select \"Standard\" for your Snowflake edition and \"Amazon Web Services\" for your cloud provider. - Choose the region nearest you, accept the terms, and click \"GET STARTED.\" - Answer a few questions to let us know more about yourself, or skip them. - A message will display: \"You're now signed up!\" Go to your email, and click on the activation link. (Within your link, note the subdomain. This is your Snowflake account identifier.https://<account_identifier>.snowflakecomputing.com) - Set your username and password. This will be an admin user account within your Snowflake account. Your Snowflake account can have multiple users within it. - If you are not signed in after setting your password, follow the instructions to enter your Snowflake account identifier, and then enter your username and password. If you've accidentally closed your browser, you can sign in atapp.snowflake.com. Congratulations! You have a trial Snowflake account. The displayed interface is called Snowsight. Snowsight provides a web-based, graphical user interface for your Snowflake account. The default page is \"Home,\" which provides popular quick actions to get started. You can access your \"Projects\" in the left navigation or at the bottom of your \"Home\"", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2078", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "page. \"Projects\" include worksheets, notebooks, Streamlit apps, and dashboards. Check out the Snowflake docs for a quick tour.) Warehouses provide compute resources for tasks and apps in your Snowflake account. Your trial account already has an XS warehouse which you can use. This is named \"COMPUTE_WH.\" However, if you want to use more compute resources, you can create another warehouse. - In the lower-left corner under your name, confirm that your current role is \"ACCOUNTADMIN.\" If it isn't, click your name, hover over \"Switch Role,\" and select \"ACCOUNTADMIN.\" - In the left navigation, select \"Admin\" → \"Warehouses.\" - In the upper-right corner, click the blue \"addWarehouse\" button. - Enter \"STREAMLIT_WH\" for the name and select a type and size. The default type and size are \"Standard\" and \"X-Small,\" respectively. Click \"Create Warehouse.\" Databases provide storage for data and apps in your Snowflake account. Your trial account comes with a shared database of sample data, but you must create a new database in your account to store your app files. - In the left navigation, select \"Data\" → \"Databases.\" - In the upper-right corner, click the blue \"addDatabase\" button. - Enter \"STREAMLIT_DB\" for the name, and click \"Create.\" Yay! You now have a new database to hold all your Streamlit apps. The databases in the above screenshot are as follows: - \"SNOWFLAKE:\" A built-in database that stores meta data for your account. - \"SNOWFLAKE_SAMPLE_DATA:\" A shared database with sample data. - \"STREAMLIT_DB:\" Your new database where you'll put your Streamlit files. - In the left navigation, select \"Projects\" → \"Streamlit.\" - In the upper-right corner, click the blue \"addStreamlit App\" button. - Enter your app details as follows:App title: \"Hello World\"App location: \"STREAMLIT_DB\" and \"PUBLIC\"App warehouse: \"COMPUTE_WH\" (default) or \"STREAMLIT_WH\" (if you created a new warehouse)If you can't select your database,", "prev_chunk_id": "chunk_2077", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2079", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "refresh the page to ensure that the interface is displaying current information. - Click \"Create.\" (Note that the app will run with the rights of \"ACCOUNTADMIN\" for simplicity. You can curate your roles and permissions to choose who can create and access apps.)Your new app is prefilled with example code and opens in editing mode. The left panel shows your code. The right panel shows the resulting app. - Optional: Explore the example app. - In the left code editor, delete everything, and replace it with the following:import streamlit as st st.write(\"Hello World\")If you want to return to the sample code later, you can always make another app to edit the same example again. - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Hooray! You just wrote a Streamlit app.starTipIn the lower-left corner of the editing interface, you can click the splitscreen icons to toggle the visibility of your file navigation, code editor, and app preview. - Changest.writetost.title:import streamlit as st st.title(\"Hello World\") - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Your app now displays the larger title text. - Optional: Make more edits to your app. You must interact with your app or click the blue \"play_arrowRun\" button to display the changes. This is different from a local environment where you can save your changes to trigger a rerun. - To return to Snowsight, in the upper-left corner, click \"chevron_leftStreamlit Apps.\" When you want to view or edit your app again, you can return to it through Snowsight. If you are returning to the site, you can sign in at app.snowflake.com. - In the left navigation, select \"Projects\" → \"Streamlit.\" - In your list of apps, click \"Hello World.\"If you don't see", "prev_chunk_id": "chunk_2078", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2080", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Use Streamlit in Snowflake to code in a secure environment", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Use Streamlit in Snowflake to code in a secure environment", "content": "your app, check that your role is set to \"ACCOUNTADMIN\" as described inOptional: Create a warehouse. - Your app will open in viewing mode. To edit your app, in the upper-right corner, click \"Edit.\" Read about our Basic concepts and try out more commands in your app. Or, create more apps in Snowflake! You can reuse your warehouse and database, so you don't need to repeat those steps. For more information about creating and managing Streamlit in Snowflake apps, check out the Snowflake docs.", "prev_chunk_id": "chunk_2079", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2081", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Prerequisites", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites All you need is an email address! Everything else happens in your 30-day trial account.", "prev_chunk_id": "chunk_2080", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2082", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Create an account", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create an account", "content": "Create an account - Go tosignup.snowflake.com. (This link will open in a new tab.) - Fill in your information, and click \"CONTINUE.\" - Select \"Standard\" for your Snowflake edition and \"Amazon Web Services\" for your cloud provider. - Choose the region nearest you, accept the terms, and click \"GET STARTED.\" - Answer a few questions to let us know more about yourself, or skip them. - A message will display: \"You're now signed up!\" Go to your email, and click on the activation link. (Within your link, note the subdomain. This is your Snowflake account identifier.https://<account_identifier>.snowflakecomputing.com) - Set your username and password. This will be an admin user account within your Snowflake account. Your Snowflake account can have multiple users within it. - If you are not signed in after setting your password, follow the instructions to enter your Snowflake account identifier, and then enter your username and password. If you've accidentally closed your browser, you can sign in atapp.snowflake.com. Congratulations! You have a trial Snowflake account. The displayed interface is called Snowsight. Snowsight provides a web-based, graphical user interface for your Snowflake account. The default page is \"Home,\" which provides popular quick actions to get started. You can access your \"Projects\" in the left navigation or at the bottom of your \"Home\" page. \"Projects\" include worksheets, notebooks, Streamlit apps, and dashboards. Check out the Snowflake docs for a quick tour.)", "prev_chunk_id": "chunk_2081", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2083", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Optional: Create a warehouse", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Optional: Create a warehouse", "content": "Optional: Create a warehouse Warehouses provide compute resources for tasks and apps in your Snowflake account. Your trial account already has an XS warehouse which you can use. This is named \"COMPUTE_WH.\" However, if you want to use more compute resources, you can create another warehouse. - In the lower-left corner under your name, confirm that your current role is \"ACCOUNTADMIN.\" If it isn't, click your name, hover over \"Switch Role,\" and select \"ACCOUNTADMIN.\" - In the left navigation, select \"Admin\" → \"Warehouses.\" - In the upper-right corner, click the blue \"addWarehouse\" button. - Enter \"STREAMLIT_WH\" for the name and select a type and size. The default type and size are \"Standard\" and \"X-Small,\" respectively. Click \"Create Warehouse.\"", "prev_chunk_id": "chunk_2082", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2084", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Create a database", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create a database", "content": "Create a database Databases provide storage for data and apps in your Snowflake account. Your trial account comes with a shared database of sample data, but you must create a new database in your account to store your app files. - In the left navigation, select \"Data\" → \"Databases.\" - In the upper-right corner, click the blue \"addDatabase\" button. - Enter \"STREAMLIT_DB\" for the name, and click \"Create.\" Yay! You now have a new database to hold all your Streamlit apps. The databases in the above screenshot are as follows: - \"SNOWFLAKE:\" A built-in database that stores meta data for your account. - \"SNOWFLAKE_SAMPLE_DATA:\" A shared database with sample data. - \"STREAMLIT_DB:\" Your new database where you'll put your Streamlit files.", "prev_chunk_id": "chunk_2083", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2085", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Create a \"Hello World\" Streamlit app", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create a \"Hello World\" Streamlit app", "content": "Create a \"Hello World\" Streamlit app - In the left navigation, select \"Projects\" → \"Streamlit.\" - In the upper-right corner, click the blue \"addStreamlit App\" button. - Enter your app details as follows:App title: \"Hello World\"App location: \"STREAMLIT_DB\" and \"PUBLIC\"App warehouse: \"COMPUTE_WH\" (default) or \"STREAMLIT_WH\" (if you created a new warehouse)If you can't select your database, refresh the page to ensure that the interface is displaying current information. - Click \"Create.\" (Note that the app will run with the rights of \"ACCOUNTADMIN\" for simplicity. You can curate your roles and permissions to choose who can create and access apps.)Your new app is prefilled with example code and opens in editing mode. The left panel shows your code. The right panel shows the resulting app. - Optional: Explore the example app. - In the left code editor, delete everything, and replace it with the following:import streamlit as st st.write(\"Hello World\")If you want to return to the sample code later, you can always make another app to edit the same example again. - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Hooray! You just wrote a Streamlit app.starTipIn the lower-left corner of the editing interface, you can click the splitscreen icons to toggle the visibility of your file navigation, code editor, and app preview. - Changest.writetost.title:import streamlit as st st.title(\"Hello World\") - In the upper-right corner, click the blue \"play_arrowRun\" button to make the running app reflect your changes.Your app now displays the larger title text. - Optional: Make more edits to your app. You must interact with your app or click the blue \"play_arrowRun\" button to display the changes. This is different from a local environment where you can save your changes to trigger a rerun. - To return to Snowsight, in the", "prev_chunk_id": "chunk_2084", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2086", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Create a \"Hello World\" Streamlit app", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Create a \"Hello World\" Streamlit app", "content": "upper-left corner, click \"chevron_leftStreamlit Apps.\"", "prev_chunk_id": "chunk_2085", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2087", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Return to your app", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Return to your app", "content": "Return to your app When you want to view or edit your app again, you can return to it through Snowsight. If you are returning to the site, you can sign in at app.snowflake.com. - In the left navigation, select \"Projects\" → \"Streamlit.\" - In your list of apps, click \"Hello World.\"If you don't see your app, check that your role is set to \"ACCOUNTADMIN\" as described inOptional: Create a warehouse. - Your app will open in viewing mode. To edit your app, in the upper-right corner, click \"Edit.\"", "prev_chunk_id": "chunk_2086", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2088", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "What's next?", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "What's next?", "content": "What's next? Read about our Basic concepts and try out more commands in your app. Or, create more apps in Snowflake! You can reuse your warehouse and database, so you don't need to repeat those steps. For more information about creating and managing Streamlit in Snowflake apps, check out the Snowflake docs.", "prev_chunk_id": "chunk_2087", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2089", "url": "https://docs.streamlit.io/get-started/installation/streamlit-in-snowflake", "title": "Still have questions?", "page_title": "Use Streamlit in Snowflake - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2088", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2090", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Install Streamlit using Anaconda Distribution", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Install Streamlit using Anaconda Distribution", "content": "Install Streamlit using Anaconda Distribution This page walks you through installing Streamlit locally using Anaconda Distribution. At the end, you'll build a simple \"Hello world\" app and run it. You can read more about Getting started with Anaconda Distribution in Anaconda's docs. If you prefer to manage your Python environments via command line, check out how to Install Streamlit using command line.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2091", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Prerequisites", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - A code editorAnaconda Distribution includes Python and basically everything you need to get started. The only thing left for you to choose is a code editor.Our favorite editor isVS Code, which is also what we use in all our tutorials. - Knowledge about environment managersEnvironment managers create virtual environments to isolate Python package installations between projects. For a detailed introduction to Python environments, check outPython Virtual Environments: A Primer.But don't worry! In this guide we'll teach you how to install and use an environment manager (Anaconda).", "prev_chunk_id": "chunk_2090", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2092", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Install Anaconda Distribution", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Install Anaconda Distribution", "content": "Install Anaconda Distribution - Go toanaconda.com/download. - Install Anaconda Distribution for your OS.", "prev_chunk_id": "chunk_2091", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2093", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Create an environment using Anaconda Navigator", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Create an environment using Anaconda Navigator", "content": "Create an environment using Anaconda Navigator - Open Anaconda Navigator (the graphical interface included with Anaconda Distribution). - You can decline signing in to Anaconda if prompted. - In the left menu, click \"Environments.\" - At the bottom of your environments list, click \"Create.\" - Enter \"streamlitenv\" for the name of your environment. - Click \"Create.\"", "prev_chunk_id": "chunk_2092", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2094", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Activate your environment", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Activate your environment", "content": "Activate your environment - Click the green play icon (play_circle) next to your environment. - Click \"Open Terminal.\" - A terminal will open with your environment activated. Your environment's name will appear in parentheses at the beginning of your terminal's prompt to show that it's activated.", "prev_chunk_id": "chunk_2093", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2095", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Install Streamlit in your environment", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Install Streamlit in your environment", "content": "Install Streamlit in your environment - In your terminal, type:pip install streamlit - To validate your installation, enter:streamlit helloIf this doesn't work, use the long-form command:python -m streamlit hello - The Streamlit Hello example app will automatically open in your browser. If it doesn't, open your browser and go to the localhost address indicated in your terminal, typicallyhttp://localhost:8501. Play around with the app! - Close your terminal.", "prev_chunk_id": "chunk_2094", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2096", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Create a Hello World app and run it", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Create a Hello World app and run it", "content": "Create a Hello World app and run it - Open VS Code with a new project. - Create a Python file namedapp.pyin your project folder. - Copy the following code intoapp.pyand save it.import streamlit as st st.write(\"Hello World\") - Click your Python interpreter in the lower-right corner, then choose yourstreamlitenvenvironment from the drop-down. - Right-clickapp.pyin your file navigation and click \"Open in integrated terminal.\" - A terminal will open with your environment activated. Confirm this by looking for \"(streamlitenv)\" at the beginning of your next prompt. If it is not there, manually activate your environment with the command:conda activate streamlitenv - In your terminal, type:streamlit run app.pyIf this doesn't work, use the long-form command:python -m streamlit run app.py - Your app will automatically open in your browser. If it doesn't for any reason, open your browser and go to the localhost address indicated in your terminal, typicallyhttp://localhost:8501. - Changest.writetost.titleand save your file:import streamlit as st st.title(\"Hello World\") - In your browser, click \"Always rerun\" to instantly rerun your app whenever you save a change to your file. - Your app will update! Keep making changes and you will see your changes as soon as you save your file. - When you're done, you can stop your app withCtrl+Cin your terminal or just by closing your terminal.", "prev_chunk_id": "chunk_2095", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2097", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "What's next?", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "What's next?", "content": "What's next? Read about our Basic concepts and try out more commands in your app.", "prev_chunk_id": "chunk_2096", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2098", "url": "https://docs.streamlit.io/get-started/installation/anaconda-distribution", "title": "Still have questions?", "page_title": "Install Streamlit using Anaconda Distribution - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2097", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2099", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "Install Streamlit using command line", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "Install Streamlit using command line", "content": "Install Streamlit using command line This page will walk you through creating an environment with venv and installing Streamlit with pip. These are our recommended tools, but if you are familiar with others you can use your favorite ones too. At the end, you'll build a simple \"Hello world\" app and run it. If you prefer to have a graphical interface to manage your Python environments, check out how to Install Streamlit using Anaconda Distribution.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2100", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "Prerequisites", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites As with any programming tool, in order to install Streamlit you first need to make sure your computer is properly set up. More specifically, you’ll need: - PythonWe supportversion 3.9 to 3.13. - A Python environment manager(recommended)Environment managers create virtual environments to isolate Python package installations between projects.We recommend using virtual environments because installing or upgrading a Python package may cause unintentional effects on another package. For a detailed introduction to Python environments, check outPython Virtual Environments: A Primer.For this guide, we'll be usingvenv, which comes with Python. - A Python package managerPackage managers handle installing each of your Python packages, including Streamlit.For this guide, we'll be usingpip, which comes with Python. - Only on MacOS: Xcode command line toolsDownload Xcode command line tools usingthese instructionsin order to let the package manager install some of Streamlit's dependencies. - A code editorOur favorite editor isVS Code, which is also what we use in all our tutorials.", "prev_chunk_id": "chunk_2099", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2101", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "Create an environment using venv", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "Create an environment using venv", "content": "Create an environment using venv - Open a terminal and navigate to your project folder.cd myproject - In your terminal, type:python -m venv .venv - A folder named \".venv\" will appear in your project. This directory is where your virtual environment and its dependencies are installed.", "prev_chunk_id": "chunk_2100", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2102", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "Activate your environment", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "Activate your environment", "content": "Activate your environment - In your terminal, activate your environment with one of the following commands, depending on your operating system.# Windows command prompt .venv\\Scripts\\activate.bat # Windows PowerShell .venv\\Scripts\\Activate.ps1 # macOS and Linux source .venv/bin/activate - Once activated, you will see your environment name in parentheses before your prompt. \"(.venv)\"", "prev_chunk_id": "chunk_2101", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2103", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "Install Streamlit in your environment", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "Install Streamlit in your environment", "content": "Install Streamlit in your environment - In the terminal with your environment activated, type:pip install streamlit - Test that the installation worked by launching the Streamlit Hello example app:streamlit helloIf this doesn't work, use the long-form command:python -m streamlit hello - Streamlit's Hello app should appear in a new tab in your web browser!Built with Streamlit 🎈Fullscreenopen_in_new - Close your terminal when you are done.", "prev_chunk_id": "chunk_2102", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2104", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "Create a \"Hello World\" app and run it", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "Create a \"Hello World\" app and run it", "content": "Create a \"Hello World\" app and run it - Create a file namedapp.pyin your project folder. - Any time you want to use your new environment, you first need to go to your project folder (where the.venvdirectory lives) and run the command to activate it: - Once activated, you will see your environment's name in parentheses at the beginning of your terminal prompt. \"(.venv)\" - Run your Streamlit app. If this doesn't work, use the long-form command: - To stop the Streamlit server, pressCtrl+Cin the terminal. - When you're done using this environment, return to your normal shell by typing:", "prev_chunk_id": "chunk_2103", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2105", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "What's next?", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "What's next?", "content": "What's next? Read about our Basic concepts to understand Streamlit's dataflow model.", "prev_chunk_id": "chunk_2104", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2106", "url": "https://docs.streamlit.io/get-started/installation/command-line", "title": "Still have questions?", "page_title": "Install Streamlit using command line - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2105", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2107", "url": "https://docs.streamlit.io/develop/api-reference/configuration/config.toml", "title": "config.toml", "page_title": "config.toml - Streamlit Docs", "breadcrumbs": "config.toml", "content": "config.toml config.toml is an optional file you can define for your working directory or global development environment. When config.toml is defined both globally and in your working directory, Streamlit combines the configuration options and gives precedence to the working-directory configuration. Additionally, you can use environment variables and command-line options to override additional configuration options. For more information, see Configuration options.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2108", "url": "https://docs.streamlit.io/develop/api-reference/configuration/config.toml", "title": "File location", "page_title": "config.toml - Streamlit Docs", "breadcrumbs": "File location", "content": "File location To define your configuration locally or per-project, add .streamlit/config.toml to your working directory. Your working directory is wherever you call streamlit run. If you haven't previously created the .streamlit directory, you will need to add it. To define your configuration globally, you must first locate your global .streamlit directory. Streamlit adds this hidden directory to your OS user profile during installation. For MacOS/Linux, this will be ~/.streamlit/config.toml. For Windows, this will be %userprofile%/.streamlit/config.toml.", "prev_chunk_id": "chunk_2107", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2109", "url": "https://docs.streamlit.io/develop/api-reference/configuration/config.toml", "title": "File format", "page_title": "config.toml - Streamlit Docs", "breadcrumbs": "File format", "content": "File format config.toml is a TOML file.", "prev_chunk_id": "chunk_2108", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2110", "url": "https://docs.streamlit.io/develop/api-reference/configuration/config.toml", "title": "Available configuration options", "page_title": "config.toml - Streamlit Docs", "breadcrumbs": "Available configuration options", "content": "Available configuration options Below are all the sections and options you can have in your .streamlit/config.toml file. To see all configurations, use the following command in your terminal or CLI:", "prev_chunk_id": "chunk_2109", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2111", "url": "https://docs.streamlit.io/develop/api-reference/configuration/config.toml", "title": "Still have questions?", "page_title": "config.toml - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2110", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2112", "url": "https://docs.streamlit.io/develop/api-reference/execution-flow/st.dialog", "title": "Still have questions?", "page_title": "st.dialog - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2113", "url": "https://docs.streamlit.io/develop/api-reference/layout/st.container", "title": "Still have questions?", "page_title": "st.container - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2114", "url": "https://docs.streamlit.io/knowledge-base/deploy", "title": "Deployment-related questions and errors", "page_title": "Deployment Issues - Streamlit Docs", "breadcrumbs": "Deployment-related questions and errors", "content": "Deployment-related questions and errors - How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)? - How can I deploy multiple Streamlit apps on different subdomains? - Invoking a Python subprocess in a deployed Streamlit app - Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?) - Argh. This app has gone over its resource limits. - App is not loading when running remotely - Authentication without SSO - How do I increase the upload limit ofst.file_uploaderon Streamlit Community Cloud? - Huh. This is isn't supposed to happen message after trying to log in - Login attempt to Streamlit Community Cloud fails with error 403 - How to submit a support case for Streamlit Community Cloud", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2115", "url": "https://docs.streamlit.io/knowledge-base/deploy", "title": "Still have questions?", "page_title": "Deployment Issues - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2114", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2116", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Use Microsoft Entra to authenticate users", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Use Microsoft Entra to authenticate users", "content": "Use Microsoft Entra to authenticate users Microsoft Identity Platform is a service within Microsoft Entra that lets you build applications to authenticate users. Your applications can use personal, work, and school accounts managed by Microsoft.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2117", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Prerequisites", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following Python libraries:streamlit>=1.42.0 Authlib>=1.3.2 - You should have a clean working directory calledyour-repository. - You must have a Microsoft Azure account, which includes Microsoft Entra ID.", "prev_chunk_id": "chunk_2116", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2118", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Summary", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this tutorial, you'll build an app that users can log in to with their personal Microsoft accounts. When they log in, they'll see a personalized greeting with their name and have the option to log out. Here's a look at what you'll build:", "prev_chunk_id": "chunk_2117", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2119", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Create a web application in Microsoft Entra ID", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Create a web application in Microsoft Entra ID", "content": "Create a web application in Microsoft Entra ID Within Microsoft Entra ID in Azure, you'll need to register a new application and generate a secret needed to configure your app. In this example, your application will only accept personal Microsoft accounts, but you can optionally accept work and school accounts or restrict the application to your personal tenant. Microsoft Entra also lets you connect other, external identity providers.", "prev_chunk_id": "chunk_2118", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2120", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Register a new application", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Register a new application", "content": "Register a new application - Go toMicrosoft Azure, and sign in to Microsoft. - At the top of the page among the services, select \"Microsoft Entra ID.\" - In the left navigation, select \"Manage\" → \"App registrations.\" - At the top of the screen, select \"New registration.\" - Fill in a name for your application.The application name will be visible to your users within the authentication flow presented by Microsoft. - Under \"Supported account types,\" select \"Personal Microsoft accounts only.\" - Under \"Redirect URI,\" select a \"Web\" platform, and enter your app's URL with the pathnameoauth2callback.For example, if you are developing locally, enterhttp://localhost:8501/oauth2callback. If you are using a different port, change8501to match your port. - At the bottom of the screen, select \"Register.\"Microsoft will redirect you to your new application, a resource within Azure.", "prev_chunk_id": "chunk_2119", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2121", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Gather your application's details", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Gather your application's details", "content": "Gather your application's details - To store your app information to use in later steps, open a text editor, or (even better) create a new item in a password locker.Always handle your app secrets securely. Remember to label the values as you paste them so you don't mix them up. - Under \"Essentials,\" copy the \"Application (client) ID\" into your text editor.This is yourclient_id. - At the top of the page, select \"Endpoints.\" - Copy the \"OpenID Connect metadata document\" into your text editor.This is yourserver_metadata_url. - In the left navigation, select \"Manage\" → \"Certificates & secrets.\" - Near the top, select \"New client secret.\" - Enter a description, and select an expiration time.The description is only used internally. You will use the generated secret to configure your Streamlit app, so choose a description that helps you remember where you use the secret. - At the bottom of the dialog, select \"Add.\"It may take a few seconds for Azure to generate your secret. - Copy the \"Value\" into your text editor.This is yourclient_secret. Microsoft will hide the value after you leave Azure, so ensure that you securely store it somewhere now. If you lose your secret, you'll need to delete it from your configuration and generate a new one. Your client is ready to accept users.", "prev_chunk_id": "chunk_2120", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2122", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Build the example", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Build the example", "content": "Build the example To create an app with user authentication, you'll need to configure your secrets and prompt your users to log in. You'll use secrets management to store the information from your client, and then create a simple app that welcomes your user by name after they log in.", "prev_chunk_id": "chunk_2121", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2123", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Configure your secrets", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Configure your secrets", "content": "Configure your secrets - Inyour_repository, create a.streamlit/secrets.tomlfile. - Addsecrets.tomlto your.gitignorefile.priority_highImportantNever commit secrets to your repository. For more information about.gitignore, seeIgnoring files. - Generate a strong, random secret to use as your cookie secret.The cookie secret is used to sign each user's identity cookie, which Streamlit stores when they log in. - In.streamlit/secrets.toml, add your connection configuration:[auth] redirect_uri = \"http://localhost:8501/oauth2callback\" cookie_secret = \"xxx\" client_id = \"xxx\" client_secret = \"xxx\" server_metadata_url = \"https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration\"Replace the values ofclient_id,client_secret, andserver_metadata_urlwith the values you copied into your text editor earlier. Replace the value ofcookie_secretwith the random secret you generated in the previous step. - Save yoursecrets.tomlfile.", "prev_chunk_id": "chunk_2122", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2124", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Initialize your app", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_2123", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2125", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Log the user in and out", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Log the user in and out", "content": "Log the user in and out - Define a function that prompts the user to log in:def login_screen(): st.header(\"This app is private.\") st.subheader(\"Please log in.\") st.button(\"Log in with Microsoft\", on_click=st.login)This function displays a short message and a button. Streamlit's login command is assigned to the button as a callback.push_pinNoteIf you don't want to use a callback, you can replace the last line with an equivalentifstatement:- st.button(\"Log in with Microsoft\", on_click=st.login) + if st.button(\"Log in with Microsoft\"): + st.login() - Conditioned on whether the user is logged in, call your function to prompt the user, or show their information:if not st.user.is_logged_in: login_screen() else: st.userBecausest.useris a dict-like object in a line by itself, Streamlit magic displays it in your app. - Save yourapp.pyfile, and test your running app.In your live preview, when you log in to your app, the login button is replaced with the contents of your identity token. Observe the different values that are available from Microsoft. You can use these values to personalize your app for your users. - Return to your code. - Replacest.userwith a personalized greeting:else: - st.user + st.header(f\"Welcome, {st.user.name}!\") - Add a logout button:st.button(\"Log out\", on_click=st.logout) - Save yourapp.pyfile and test your running app.In your live preview, if you log out of your app, it will return to the login prompt.", "prev_chunk_id": "chunk_2124", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2126", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Deploy your app on Community Cloud", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Deploy your app on Community Cloud", "content": "Deploy your app on Community Cloud When you are ready to deploy your app, you must update your application in Microsoft Azure and your secrets. The following steps describe how to deploy your app on Community Cloud. - Add arequirements.txtfile to your repository with the following lines:streamlit>=1.42.0 Authlib>=1.3.2This ensures that the correct Python dependencies are installed for your deployed app. - Save yourrequirements.txtfile. - Deploy your app, and copy your app's URL into your text editor.You'll use your app's URL to update your secrets and application configuration in the following steps. For more information about deploying an app on Community Cloud, seeDeploy your app. - In yourapp settingsin Community Cloud, select \"Secrets.\" - Copy the contents of your localsecrets.tomlfile, and paste them into your app settings. - Change yourredirect_urito reflect your deployed app's URL.For example, if your app ismy_streamlit_app.streamlit.io, your redirect URI would behttps://my_streamlit_app.streamlit.io/oauth2callback. - Save and close your settings. - Return to your application in Microsoft Azure.If you've closed Microsoft Azure and need to navigate back to your application, go to your Azure portal → Microsoft Entra ID → App registrations, and select it from the list. - In the left navigation, select \"Authentication.\" - Under \"Platform configurations\" → \"Web,\" add or update a URI to match your newredirect_uri. - At the bottom of the page, select \"Save.\" - Open your deployed app, and test it.", "prev_chunk_id": "chunk_2125", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2127", "url": "https://docs.streamlit.io/develop/tutorials/authentication/microsoft", "title": "Still have questions?", "page_title": "Use Microsoft Entra to authenticate users - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2126", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2128", "url": "https://docs.streamlit.io/develop/concepts/custom-components/limitations", "title": "How do Streamlit Components differ from functionality provided in the base Streamlit package?", "page_title": "Limitations of custom components - Streamlit Docs", "breadcrumbs": "How do Streamlit Components differ from functionality provided in the base Streamlit package?", "content": "How do Streamlit Components differ from functionality provided in the base Streamlit package? - Streamlit Components are wrapped up in an iframe, which gives you the ability to do whatever you want (within the iframe) using any web technology you like.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2129", "url": "https://docs.streamlit.io/develop/concepts/custom-components/limitations", "title": "What types of things aren't possible with Streamlit Components?", "page_title": "Limitations of custom components - Streamlit Docs", "breadcrumbs": "What types of things aren't possible with Streamlit Components?", "content": "What types of things aren't possible with Streamlit Components? Because each Streamlit Component gets mounted into its own sandboxed iframe, this implies a few limitations on what is possible with Components: - Can't communicate with other Components: Components can’t contain (or otherwise communicate with) other components, so Components cannot be used to build something like a grid layout. - Can't modify CSS: A Component can’t modify the CSS that the rest of the Streamlit app uses, so you can't create something to put the app in dark mode, for example. - Can't add/remove elements: A Component can’t add or remove other elements of a Streamlit app, so you couldn't make something to remove the app menu, for example.", "prev_chunk_id": "chunk_2128", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2130", "url": "https://docs.streamlit.io/develop/concepts/custom-components/limitations", "title": "My Component seems to be blinking/stuttering...how do I fix that?", "page_title": "Limitations of custom components - Streamlit Docs", "breadcrumbs": "My Component seems to be blinking/stuttering...how do I fix that?", "content": "My Component seems to be blinking/stuttering...how do I fix that? Currently, no automatic debouncing of Component updates is performed within Streamlit. The Component creator themselves can decide to rate-limit the updates they send back to Streamlit.", "prev_chunk_id": "chunk_2129", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2131", "url": "https://docs.streamlit.io/develop/concepts/custom-components/limitations", "title": "Still have questions?", "page_title": "Limitations of custom components - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2130", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2132", "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish", "title": "Publish to PyPI", "page_title": "Publish a Component - Streamlit Docs", "breadcrumbs": "Publish to PyPI", "content": "Publish to PyPI Publishing your Streamlit Component to PyPI makes it easily accessible to Python users around the world. This step is completely optional, so if you won’t be releasing your component publicly, you can skip this section! A bi-directional Streamlit Component varies slightly from a pure Python library in that it must contain pre-compiled frontend code. This is how base Streamlit works as well; when you pip install streamlit, you are getting a Python library where the HTML and frontend code contained within it have been compiled into static assets. The component-template GitHub repo provides the folder structure necessary for PyPI publishing. But before you can publish, you'll need to do a bit of housekeeping: - Give your Component a name, if you haven't alreadyRename thetemplate/my_component/folder totemplate/<component name>/Pass your component's name as the the first argument todeclare_component() - EditMANIFEST.in, change the path for recursive-include frompackage/frontend/build *to<component name>/frontend/build * - Editsetup.py, adding your component's name and other relevant info - Create a release build of your frontend code. This will add a new directory,frontend/build/, with your compiled frontend in it:cd frontend npm run build - Pass the build folder's path as thepathparameter todeclare_component. (If you're using the template Python file, you can set_RELEASE = Trueat the top of the file):import streamlit.components.v1 as components # Change this: # component = components.declare_component(\"my_component\", url=\"http://localhost:3001\") # To this: parent_dir = os.path.dirname(os.path.abspath(__file__)) build_dir = os.path.join(parent_dir, \"frontend/build\") component = components.declare_component(\"new_component_name\", path=build_dir) Once you've changed the default my_component references, compiled the HTML and JavaScript code and set your new component name in components.declare_component(), you're ready to build a Python wheel: - Make sure you have the latest versions of setuptools, wheel, and twine - Create a wheel from the source code:# Run this from your component's top-level directory; that is, # the directory that contains `setup.py` python", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2133", "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish", "title": "Publish to PyPI", "page_title": "Publish a Component - Streamlit Docs", "breadcrumbs": "Publish to PyPI", "content": "setup.py sdist bdist_wheel With your wheel created, the final step is to upload to PyPI. The instructions here highlight how to upload to Test PyPI, so that you can learn the mechanics of the process without worrying about messing anything up. Uploading to PyPI follows the same basic procedure. - Create an account onTest PyPIif you don't already have oneVisithttps://test.pypi.org/account/register/and complete the stepsVisithttps://test.pypi.org/manage/account/#api-tokensand create a new API token. Don’t limit the token scope to a particular project, since you are creating a new project. Copy your token before closing the page, as you won’t be able to retrieve it again. - Upload your wheel to Test PyPI.twinewill prompt you for a username and password. For the username, use__token__. For the password, use your token value from the previous step, including thepypi-prefix:python -m twine upload --repository testpypi dist/* - Install your newly-uploaded package in a new Python project to make sure it works:python -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE If all goes well, you're ready to upload your library to PyPI by following the instructions at https://packaging.python.org/tutorials/packaging-projects/#next-steps. Congratulations, you've created a publicly-available Streamlit Component!", "prev_chunk_id": "chunk_2132", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2134", "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish", "title": "Prepare your Component", "page_title": "Publish a Component - Streamlit Docs", "breadcrumbs": "Prepare your Component", "content": "Prepare your Component A bi-directional Streamlit Component varies slightly from a pure Python library in that it must contain pre-compiled frontend code. This is how base Streamlit works as well; when you pip install streamlit, you are getting a Python library where the HTML and frontend code contained within it have been compiled into static assets. The component-template GitHub repo provides the folder structure necessary for PyPI publishing. But before you can publish, you'll need to do a bit of housekeeping: - Give your Component a name, if you haven't alreadyRename thetemplate/my_component/folder totemplate/<component name>/Pass your component's name as the the first argument todeclare_component() - EditMANIFEST.in, change the path for recursive-include frompackage/frontend/build *to<component name>/frontend/build * - Editsetup.py, adding your component's name and other relevant info - Create a release build of your frontend code. This will add a new directory,frontend/build/, with your compiled frontend in it:cd frontend npm run build - Pass the build folder's path as thepathparameter todeclare_component. (If you're using the template Python file, you can set_RELEASE = Trueat the top of the file):import streamlit.components.v1 as components # Change this: # component = components.declare_component(\"my_component\", url=\"http://localhost:3001\") # To this: parent_dir = os.path.dirname(os.path.abspath(__file__)) build_dir = os.path.join(parent_dir, \"frontend/build\") component = components.declare_component(\"new_component_name\", path=build_dir)", "prev_chunk_id": "chunk_2133", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2135", "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish", "title": "Build a Python wheel", "page_title": "Publish a Component - Streamlit Docs", "breadcrumbs": "Build a Python wheel", "content": "Build a Python wheel Once you've changed the default my_component references, compiled the HTML and JavaScript code and set your new component name in components.declare_component(), you're ready to build a Python wheel: - Make sure you have the latest versions of setuptools, wheel, and twine - Create a wheel from the source code:# Run this from your component's top-level directory; that is, # the directory that contains `setup.py` python setup.py sdist bdist_wheel", "prev_chunk_id": "chunk_2134", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2136", "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish", "title": "Upload your wheel to PyPI", "page_title": "Publish a Component - Streamlit Docs", "breadcrumbs": "Upload your wheel to PyPI", "content": "Upload your wheel to PyPI With your wheel created, the final step is to upload to PyPI. The instructions here highlight how to upload to Test PyPI, so that you can learn the mechanics of the process without worrying about messing anything up. Uploading to PyPI follows the same basic procedure. - Create an account onTest PyPIif you don't already have oneVisithttps://test.pypi.org/account/register/and complete the stepsVisithttps://test.pypi.org/manage/account/#api-tokensand create a new API token. Don’t limit the token scope to a particular project, since you are creating a new project. Copy your token before closing the page, as you won’t be able to retrieve it again. - Upload your wheel to Test PyPI.twinewill prompt you for a username and password. For the username, use__token__. For the password, use your token value from the previous step, including thepypi-prefix:python -m twine upload --repository testpypi dist/* - Install your newly-uploaded package in a new Python project to make sure it works:python -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE If all goes well, you're ready to upload your library to PyPI by following the instructions at https://packaging.python.org/tutorials/packaging-projects/#next-steps. Congratulations, you've created a publicly-available Streamlit Component!", "prev_chunk_id": "chunk_2135", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2137", "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish", "title": "Promote your Component!", "page_title": "Publish a Component - Streamlit Docs", "breadcrumbs": "Promote your Component!", "content": "Promote your Component! We'd love to help you share your Component with the Streamlit Community! To share it: - If you host your code on GitHub, add the tagstreamlit-component, so that it's listed in theGitHubstreamlit-componenttopic:Add the streamlit-component tag to your GitHub repo - Post on the Streamlit Forum inShow the Community!. Use a post title similar to \"New Component:<your component name>, a new way to do X\". - Add your component to theCommunity Component Tracker. - Tweet us at@streamlitso that we can retweet your announcement for you. Our Components Gallery is updated approximately every month. Follow the above recommendations to maximize the liklihood of your component landing in our Components Gallery. Community Components featured in our docs are hand-curated on a less-regular basis. Popular components with many stars and good documentation are more likely to be selected.", "prev_chunk_id": "chunk_2136", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2138", "url": "https://docs.streamlit.io/develop/concepts/custom-components/publish", "title": "Still have questions?", "page_title": "Publish a Component - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2137", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2139", "url": "https://docs.streamlit.io/develop/concepts/custom-components/create", "title": "Create a Component", "page_title": "Create a Component - Streamlit Docs", "breadcrumbs": "Create a Component", "content": "Create a Component Developers can write JavaScript and HTML \"components\" that can be rendered in Streamlit apps. Streamlit Components can receive data from, and also send data to, Streamlit Python scripts. Streamlit Components let you expand the functionality provided in the base Streamlit package. Use Streamlit Components to create the needed functionality for your use-case, then wrap it up in a Python package and share with the broader Streamlit community! With Streamlit Components you can add new features to your app in the following ways: - Create your own components to use in place of existing Streamlit elements and widgets. - Create completely new Streamlit elements and widgets by wrapping existing React.js, Vue.js, or other JavaScript widget toolkits. - Render Python objects by constructing HTML representations and styling them to fit your app's theme. - Create convenience functions to embed commonly-used web features likeGitHub gists and Pastebin. Check out these Streamlit Components tutorial videos by Streamlit engineer Tim Conkling to get started:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2140", "url": "https://docs.streamlit.io/develop/concepts/custom-components/create", "title": "Still have questions?", "page_title": "Create a Component - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2139", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2141", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Intro to custom components", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Intro to custom components", "content": "Intro to custom components The first step in developing a Streamlit Component is deciding whether to create a static component (i.e. rendered once, controlled by Python) or to create a bi-directional component that can communicate from Python to JavaScript and back.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2142", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Create a static component", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Create a static component", "content": "Create a static component If your goal in creating a Streamlit Component is solely to display HTML code or render a chart from a Python visualization library, Streamlit provides two methods that greatly simplify the process: components.html() and components.iframe(). If you are unsure whether you need bi-directional communication, start here first!", "prev_chunk_id": "chunk_2141", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2143", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Render an HTML string", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Render an HTML string", "content": "Render an HTML string While st.text, st.markdown and st.write make it easy to write text to a Streamlit app, sometimes you'd rather implement a custom piece of HTML. Similarly, while Streamlit natively supports many charting libraries, you may want to implement a specific HTML/JavaScript template for a new charting library. components.html works by giving you the ability to embed an iframe inside of a Streamlit app that contains your desired output. Example", "prev_chunk_id": "chunk_2142", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2144", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Render an iframe URL", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Render an iframe URL", "content": "Render an iframe URL components.iframe is similar in features to components.html, with the difference being that components.iframe takes a URL as its input. This is used for situations where you want to include an entire page within a Streamlit app. Example", "prev_chunk_id": "chunk_2143", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2145", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Create a bi-directional component", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Create a bi-directional component", "content": "Create a bi-directional component A bi-directional Streamlit Component has two parts: - Afrontend, which is built out of HTML and any other web tech you like (JavaScript, React, Vue, etc.), and gets rendered in Streamlit apps via an iframe tag. - APython API, which Streamlit apps use to instantiate and talk to that frontend To make the process of creating bi-directional Streamlit Components easier, we've created a React template and a TypeScript-only template in the Streamlit Component-template GitHub repo. We also provide some example Components in the same repo.", "prev_chunk_id": "chunk_2144", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2146", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Development Environment Setup", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Development Environment Setup", "content": "Development Environment Setup To build a Streamlit Component, you need the following installed in your development environment: - Python 3.9 - Python 3.13 - Streamlit - nodejs - npmoryarn Clone the component-template GitHub repo, then decide whether you want to use the React.js (\"template\") or plain TypeScript (\"template-reactless\") template. - Initialize and build the component template frontend from the terminal:# React template template/my_component/frontend npm install # Initialize the project and install npm dependencies npm run start # Start the Vite dev server # or # TypeScript-only template template-reactless/my_component/frontend npm install # Initialize the project and install npm dependencies npm run start # Start the Vite dev server - From a separate terminal, run the Streamlit app (Python) that declares and uses the component:# React template cd template . venv/bin/activate # or similar to activate the venv/conda environment where Streamlit is installed pip install -e . # install template as editable package streamlit run my_component/example.py # run the example # or # TypeScript-only template cd template-reactless . venv/bin/activate # or similar to activate the venv/conda environment where Streamlit is installed pip install -e . # install template as editable package streamlit run my_component/example.py # run the example After running the steps above, you should see a Streamlit app in your browser that looks like this: The example app from the template shows how bi-directional communication is implemented. The Streamlit Component displays a button (Python → JavaScript), and the end-user can click the button. Each time the button is clicked, the JavaScript front-end increments the counter value and passes it back to Python (JavaScript → Python), which is then displayed by Streamlit (Python → JavaScript).", "prev_chunk_id": "chunk_2145", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2147", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Frontend", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Frontend", "content": "Frontend Because each Streamlit Component is its own webpage that gets rendered into an iframe, you can use just about any web tech you'd like to create that web page. We provide two templates to get started with in the Streamlit Components-template GitHub repo; one of those templates uses React and the other does not. The React-based template is in template/my_component/frontend/src/MyComponent.tsx. - MyComponent.render()is called automatically when the component needs to be re-rendered (just like in any React app) - Arguments passed from the Python script are available via thethis.props.argsdictionary: - UseStreamlit.setComponentValue()to return data from the component to the Python script: When you call Streamlit.setComponentValue(new_value), that new value is sent to Streamlit, which then re-executes the Python script from top to bottom. When the script is re-executed, the call to my_component(...) will return the new value. From a code flow perspective, it appears that you're transmitting data synchronously with the frontend: Python sends the arguments to JavaScript, and JavaScript returns a value to Python, all in a single function call! But in reality this is all happening asynchronously, and it's the re-execution of the Python script that achieves the sleight of hand. - UseStreamlit.setFrameHeight()to control the height of your component. By default, the React template calls this automatically (seeStreamlitComponentBase.componentDidUpdate()). You can override this behavior if you need more control. - There's a tiny bit of magic in the last line of the file:export default withStreamlitConnection(MyComponent)- this does some handshaking with Streamlit, and sets up the mechanisms for bi-directional data communication. The TypeScript-only template is in template-reactless/my_component/frontend/src/MyComponent.tsx. This template has much more code than its React sibling, in that all the mechanics of handshaking, setting up event listeners, and updating the component's frame height are done manually. The React version of the template handles most of these details automatically. - Towards the", "prev_chunk_id": "chunk_2146", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2148", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Frontend", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Frontend", "content": "bottom of the source file, the template callsStreamlit.setComponentReady()to tell Streamlit it's ready to start receiving data. (You'll generally want to do this after creating and loading everything that the Component relies on.) - It subscribes toStreamlit.RENDER_EVENTto be notified of when to redraw. (This event won't be fired untilsetComponentReadyis called) - Within itsonRenderevent handler, it accesses the arguments passed in the Python script viaevent.detail.args - It sends data back to the Python script in the same way that the React template does—clicking on the \"Click Me!\" button callsStreamlit.setComponentValue() - It informs Streamlit when its height may have changed viaStreamlit.setFrameHeight() Along with sending an args object to your component, Streamlit also sends a theme object defining the active theme so that your component can adjust its styling in a compatible way. This object is sent in the same message as args, so it can be accessed via this.props.theme (when using the React template) or event.detail.theme (when using the plain TypeScript template). The theme object has the following shape: The base option allows you to specify a preset Streamlit theme that your custom theme inherits from. Any theme config options not defined in your theme settings have their values set to those of the base theme. Valid values for base are \"light\" and \"dark\". Note that the theme object has fields with the same names and semantics as the options in the \"theme\" section of the config options printed with the command streamlit config show. When using the React template, the following CSS variables are also set automatically. If you're not familiar with CSS variables, the TLDR version is that you can use them like this: These variables match the fields defined in the theme object above, and whether to use CSS variables or the theme object in your component is a matter", "prev_chunk_id": "chunk_2147", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2149", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Frontend", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Frontend", "content": "of personal preference. - Because you're hosting your component from a dev server (vianpm run start), any changes you make should be automatically reflected in the Streamlit app when you save. - If you want to add more packages to your component, runnpm addto add them from within your component'sfrontend/directory. - To build a static version of your component, runnpm run export. SeePrepare your Componentfor more information", "prev_chunk_id": "chunk_2148", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2150", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "React", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "React", "content": "React The React-based template is in template/my_component/frontend/src/MyComponent.tsx. - MyComponent.render()is called automatically when the component needs to be re-rendered (just like in any React app) - Arguments passed from the Python script are available via thethis.props.argsdictionary: - UseStreamlit.setComponentValue()to return data from the component to the Python script: When you call Streamlit.setComponentValue(new_value), that new value is sent to Streamlit, which then re-executes the Python script from top to bottom. When the script is re-executed, the call to my_component(...) will return the new value. From a code flow perspective, it appears that you're transmitting data synchronously with the frontend: Python sends the arguments to JavaScript, and JavaScript returns a value to Python, all in a single function call! But in reality this is all happening asynchronously, and it's the re-execution of the Python script that achieves the sleight of hand. - UseStreamlit.setFrameHeight()to control the height of your component. By default, the React template calls this automatically (seeStreamlitComponentBase.componentDidUpdate()). You can override this behavior if you need more control. - There's a tiny bit of magic in the last line of the file:export default withStreamlitConnection(MyComponent)- this does some handshaking with Streamlit, and sets up the mechanisms for bi-directional data communication.", "prev_chunk_id": "chunk_2149", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2151", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "TypeScript-only", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "TypeScript-only", "content": "TypeScript-only The TypeScript-only template is in template-reactless/my_component/frontend/src/MyComponent.tsx. This template has much more code than its React sibling, in that all the mechanics of handshaking, setting up event listeners, and updating the component's frame height are done manually. The React version of the template handles most of these details automatically. - Towards the bottom of the source file, the template callsStreamlit.setComponentReady()to tell Streamlit it's ready to start receiving data. (You'll generally want to do this after creating and loading everything that the Component relies on.) - It subscribes toStreamlit.RENDER_EVENTto be notified of when to redraw. (This event won't be fired untilsetComponentReadyis called) - Within itsonRenderevent handler, it accesses the arguments passed in the Python script viaevent.detail.args - It sends data back to the Python script in the same way that the React template does—clicking on the \"Click Me!\" button callsStreamlit.setComponentValue() - It informs Streamlit when its height may have changed viaStreamlit.setFrameHeight()", "prev_chunk_id": "chunk_2150", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2152", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Working with Themes", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Working with Themes", "content": "Working with Themes Along with sending an args object to your component, Streamlit also sends a theme object defining the active theme so that your component can adjust its styling in a compatible way. This object is sent in the same message as args, so it can be accessed via this.props.theme (when using the React template) or event.detail.theme (when using the plain TypeScript template). The theme object has the following shape: The base option allows you to specify a preset Streamlit theme that your custom theme inherits from. Any theme config options not defined in your theme settings have their values set to those of the base theme. Valid values for base are \"light\" and \"dark\". Note that the theme object has fields with the same names and semantics as the options in the \"theme\" section of the config options printed with the command streamlit config show. When using the React template, the following CSS variables are also set automatically. If you're not familiar with CSS variables, the TLDR version is that you can use them like this: These variables match the fields defined in the theme object above, and whether to use CSS variables or the theme object in your component is a matter of personal preference.", "prev_chunk_id": "chunk_2151", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2153", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Other frontend details", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Other frontend details", "content": "Other frontend details - Because you're hosting your component from a dev server (vianpm run start), any changes you make should be automatically reflected in the Streamlit app when you save. - If you want to add more packages to your component, runnpm addto add them from within your component'sfrontend/directory. - To build a static version of your component, runnpm run export. SeePrepare your Componentfor more information", "prev_chunk_id": "chunk_2152", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2154", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Python API", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Python API", "content": "Python API components.declare_component() is all that's required to create your Component's Python API: You can then use the returned my_component function to send and receive data with your frontend code: While the above is all you need to define from the Python side to have a working Component, we recommend creating a \"wrapper\" function with named arguments and default values, input validation and so on. This will make it easier for end-users to understand what data values your function accepts and allows for defining helpful docstrings. Please see this example from the Components-template for an example of creating a wrapper function.", "prev_chunk_id": "chunk_2153", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2155", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Python → Frontend", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Python → Frontend", "content": "Python → Frontend You send data from Python to the frontend by passing keyword args to your Component's invoke function (that is, the function returned from declare_component). You can send the following types of data from Python to the frontend: - Any JSON-serializable data - numpy.array - pandas.DataFrame Any JSON-serializable data gets serialized to a JSON string, and deserialized to its JavaScript equivalent. numpy.array and pandas.DataFrame get serialized using Apache Arrow and are deserialized as instances of ArrowTable, which is a custom type that wraps Arrow structures and provides a convenient API on top of them. Check out the CustomDataframe and SelectableDataTable Component example code for more context on how to use ArrowTable.", "prev_chunk_id": "chunk_2154", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2156", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Frontend → Python", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Frontend → Python", "content": "Frontend → Python You send data from the frontend to Python via the Streamlit.setComponentValue() API (which is part of the template code). Unlike arg-passing from Python → frontend, this API takes a single value. If you want to return multiple values, you'll need to wrap them in an Array or Object. Custom Components can send JSON-serializable data from the frontend to Python, as well as Apache Arrow ArrowTables to represent dataframes.", "prev_chunk_id": "chunk_2155", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2157", "url": "https://docs.streamlit.io/develop/concepts/custom-components/intro", "title": "Still have questions?", "page_title": "Intro to custom components - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2156", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2158", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Use the Google Auth Platform to authenticate users", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Use the Google Auth Platform to authenticate users", "content": "Use the Google Auth Platform to authenticate users Google is one of the most popular identity providers for social logins. You can use the Google Auth Platform with both private and organizational Google accounts. This tutorial configures authentication for anyone with a Google account. For more information, see Google's overview of the Google Auth Platform and OpenID Connect.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2159", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Prerequisites", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Prerequisites", "content": "Prerequisites - This tutorial requires the following Python libraries:streamlit>=1.42.0 Authlib>=1.3.2 - You should have a clean working directory calledyour-repository. - You must have a Google account and accept the terms ofGoogle Cloudto use their authentication service. - You must have a project in Google Cloud within which to create your application. For more information about managing your projects in Google Cloud, seeCreating and managing projectsin Google's documentation.", "prev_chunk_id": "chunk_2158", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2160", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Summary", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Summary", "content": "Summary In this tutorial, you'll build an app that users can log in to with their Google accounts. When they log in, they'll see a personalized greeting with their name and have the option to log out. Here's a look at what you'll build:", "prev_chunk_id": "chunk_2159", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2161", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Create a web application in Google Cloud Console", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Create a web application in Google Cloud Console", "content": "Create a web application in Google Cloud Console In this section, you'll complete three steps to create your web application in your project in Google Cloud Console: - Configure your consent screen. - Configure your audience. - Configure your client. The consent screen is what users see from Google within the authentication flow. The audience settings manage your application's status (Testing or Published). Creating a client for your web application generates the ID and secrets needed to configure your Streamlit app. To learn more about consent screens, audience, and clients, see Google's overview of the Google Auth Platform.", "prev_chunk_id": "chunk_2160", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2162", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Configure your consent screen", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Configure your consent screen", "content": "Configure your consent screen - Go to theGoogle Auth Platform, and sign in to Google. - In the upper-left corner, select your project. - In the left navigation menu, select \"Branding.\" - Fill in the required information for your application's consent screen.This information controls what users see within the Google authentication flow. Your \"App name\" is displayed to users within Google's prompts. Google asks users to consent to sending their account information to your application. If you are developing locally and/or deploying on Streamlit Community Cloud, in \"Authorized domain,\" useexample.com. For more information about the available fields, seeSetting up your OAuth consent screen. - At the bottom of the branding page, select \"SAVE.\"", "prev_chunk_id": "chunk_2161", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2163", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Configure your audience", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Configure your audience", "content": "Configure your audience - In the left navigation menu, select \"Audience.\" - Below \"OAuth user cap\" → \"Test users,\" select \"ADD USERS.\" - Enter the email address for a personal Google account, and select \"SAVE.\"When you create a new application in the Google Auth Platform, its status isTesting. While the status isTesting, only specific users can authenticate to your application; users can't register themselves. Therefore, add any email address you want to use for testing your app in development. When you're ready to publish your app, you'll return to this section and change the status toPublished. After an application is published, your application will accept new users.", "prev_chunk_id": "chunk_2162", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2164", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Configure your client", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Configure your client", "content": "Configure your client - In the left navigation menu, select \"Clients.\" - At the top of the client list, select \"CREATE CLIENT.\" - For the application type, select \"Web application.\" - Enter a unique name for your application.The client name is used internally and not shown to your users. - Skip over \"Authorized JavaScript origins.\" - Under \"Authorized redirect URIs,\" select \"ADD URI.\" - Enter your app's URL with the pathnameoauth2callback.For example, if you are developing locally, enterhttp://localhost:8501/oauth2callback. If you are using a different port, change8501to match your port. - Optional: Add additional authorized redirect URIs.If you will host your app from multiple URLs, or if you know a URL you will use in the future, you can add it now. Ensure that each URL includes theoauth2callbackpathname. - At the bottom of the screen, select \"CREATE.\" You now have a client in Google Cloud that's ready to authenticate your users.", "prev_chunk_id": "chunk_2163", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2165", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Gather your application's details", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Gather your application's details", "content": "Gather your application's details - From the clients page, select your new client. - To store your app information to use in later steps, open a text editor, or (even better) create a new item in a password locker.Always handle your app secrets securely. Remember to label the values as you paste them so you don't mix them up. - On the right, copy your \"Client ID\" and \"Client secret\" into your text editor. For the Google Auth Platform, the server metadata URL is shared between all applications and isn't listed individually in your client. The server metadata URL for the Google Auth Platform is https://accounts.google.com/.well-known/openid-configuration. For more information about the server metadata URL, see The discovery document in Google's documentation.", "prev_chunk_id": "chunk_2164", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2166", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Build the example", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Build the example", "content": "Build the example To create an app with user authentication, you'll need to configure your secrets and prompt your users to log in. You'll use secrets management to store the information from your client, and then create a simple app that welcomes your user by name after they log in.", "prev_chunk_id": "chunk_2165", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2167", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Configure your secrets", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Configure your secrets", "content": "Configure your secrets - Inyour_repository, create a.streamlit/secrets.tomlfile. - Addsecrets.tomlto your.gitignorefile.priority_highImportantNever commit secrets to your repository. For more information about.gitignore, seeIgnoring files. - Generate a strong, random secret to use as your cookie secret.The cookie secret is used to sign each user's identity cookie, which Streamlit stores when they log in. - In.streamlit/secrets.toml, add your connection configuration:[auth] redirect_uri = \"http://localhost:8501/oauth2callback\" cookie_secret = \"xxx\" client_id = \"xxx\" client_secret = \"xxx\" server_metadata_url = \"https://accounts.google.com/.well-known/openid-configuration\"Replace the values ofclient_idandclient_secretwith the values you copied into your text editor earlier. Replace the value ofcookie_secretwith the random secret you generated in the previous step. - Save yoursecrets.tomlfile.", "prev_chunk_id": "chunk_2166", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2168", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Initialize your app", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Initialize your app", "content": "Initialize your app - Inyour_repository, create a file namedapp.py. - In a terminal, change directories toyour_repository, and start your app:streamlit run app.pyYour app will be blank because you still need to add code. - Inapp.py, write the following:import streamlit as st - Save yourapp.pyfile, and view your running app. - In your app, select \"Always rerun\", or press the \"A\" key.Your preview will be blank but will automatically update as you save changes toapp.py. - Return to your code.", "prev_chunk_id": "chunk_2167", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2169", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Log the user in and out", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Log the user in and out", "content": "Log the user in and out - Define a function that prompts the user to log in:def login_screen(): st.header(\"This app is private.\") st.subheader(\"Please log in.\") st.button(\"Log in with Google\", on_click=st.login)This function displays a short message and a button. Streamlit's login command is assigned to the button as a callback.push_pinNoteIf you don't want to use a callback, you can replace the last line with an equivalentifstatement:- st.button(\"Log in with Google\", on_click=st.login) + if st.button(\"Log in with Google\"): + st.login() - Conditioned on whether the user is logged in, call your function to prompt the user, or show their information:if not st.user.is_logged_in: login_screen() else: st.userBecausest.useris a dict-like object in a line by itself, Streamlit magic displays it in your app. - Save yourapp.pyfile, and test your running app.In your live preview, when you log in to your app, the login button is replaced with the contents of your identity token. Observe the different values that are available from Google. You can use these values to personalize your app for your users. - Return to your code. - Replacest.userwith a personalized greeting:else: - st.user + st.header(f\"Welcome, {st.user.name}!\") - Add a logout button:st.button(\"Log out\", on_click=st.logout) - Save yourapp.pyfile and test your running app.In your live preview, if you log out of your app, it will return to the login prompt.", "prev_chunk_id": "chunk_2168", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2170", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Deploy your app on Community Cloud", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Deploy your app on Community Cloud", "content": "Deploy your app on Community Cloud When you are ready to deploy your app, you must update your application on Google Cloud and your secrets. The following steps describe how to deploy your app on Community Cloud. - Add arequirements.txtfile to your repository with the following lines:streamlit>=1.42.0 Authlib>=1.3.2This ensures that the correct Python dependencies are installed for your deployed app. - Save yourrequirements.txtfile. - Deploy your app, and copy your app's URL into your text editor.You'll use your app's URL to update your secrets and client configuration in the following steps. For more information about deploying an app on Community Cloud, seeDeploy your app. - In yourapp settingsin Community Cloud, select \"Secrets.\" - Copy the contents of your localsecrets.tomlfile, and paste them into your app settings. - Change yourredirect_urito reflect your deployed app's URL, which you copied earlier in this tutorial.For example, if your app ismy_streamlit_app.streamlit.io, your redirect URI would behttps://my_streamlit_app.streamlit.io/oauth2callback. - Save and close your settings. - Return to the clients page in the Google Auth Platform, and select your client. - Under \"Authorized redirect URIs,\" add or update a URI to match your newredirect_uri. - At the bottom of the page, select \"SAVE.\" - Open your deployed app, and test it.Your Google Cloud application's status is stillTesting. You should be able to log in and out of your app with the personal Google account you entered on the \"Audience\" page. - When you are ready for others to use your app, return to the \"Audience\" page in the Google Auth Platform, and set your application status toPublished.", "prev_chunk_id": "chunk_2169", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2171", "url": "https://docs.streamlit.io/develop/tutorials/authentication/google", "title": "Still have questions?", "page_title": "Use the Google Auth Platform to authenticate users - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2170", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2172", "url": "https://docs.streamlit.io/knowledge-base/dependencies", "title": "Installing dependencies", "page_title": "Installing dependencies - Streamlit Docs", "breadcrumbs": "Installing dependencies", "content": "Installing dependencies - ModuleNotFoundError: No module named - ImportError: libGL.so.1: cannot open shared object file: No such file or directory - ERROR: No matching distribution found for - How to install a package not on PyPI/Conda but available on GitHub", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2173", "url": "https://docs.streamlit.io/knowledge-base/dependencies", "title": "Still have questions?", "page_title": "Installing dependencies - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2172", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2174", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit", "title": "FAQ", "page_title": "FAQ - Streamlit Docs", "breadcrumbs": "FAQ", "content": "FAQ Here are some frequently asked questions about using Streamlit. If you feel something important is missing that everyone needs to know, please open an issue or submit a pull request and we'll be happy to review it! - Sanity checks - How can I make Streamlit watch for changes in other modules I'm importing in my app? - What browsers does Streamlit support? - Where does st.file_uploader store uploaded files and when do they get deleted? - How do you retrieve the filename of a file uploaded with st.file_uploader? - How to remove \"· Streamlit\" from the app title? - How to download a file in Streamlit? - How to download a Pandas DataFrame as a CSV? - How can I makest.pydeck_chartuse custom Mapbox styles? - How to insert elements out of order? - How do I upgrade to the latest version of Streamlit? - Widget updating for every second input when using session state - How do I create an anchor link? - How do I enable camera access? - Why does Streamlit restrict nestedst.columns? - What is serializable session state?", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2175", "url": "https://docs.streamlit.io/knowledge-base/using-streamlit", "title": "Still have questions?", "page_title": "FAQ - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2174", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2176", "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-streamlit-domain-port-80", "title": "Problem", "page_title": "How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)? - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem You want to deploy a Streamlit app on a domain so it appears to run on port 80.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2177", "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-streamlit-domain-port-80", "title": "Solution", "page_title": "How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)? - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution - You should use areverse proxyto forward requests from a webserver likeApacheorNginxto the port where your Streamlit app is running. You can accomplish this in several different ways. The simplest way is toforward all requests sent to your domainso that your Streamlit app appears as the content of your website. - Another approach is to configure your webserver to forward requests to designated subfolders (e.g.http://awesomestuff.net/streamlitapp) to different Streamlit apps on the same domain, as in thisexample config for Nginxsubmitted by a Streamlit community member. Related forum posts: - https://discuss.streamlit.io/t/permission-denied-in-ec2-port-80/798/3 - https://discuss.streamlit.io/t/how-to-use-streamlit-with-nginx/378/7", "prev_chunk_id": "chunk_2176", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2178", "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-streamlit-domain-port-80", "title": "Still have questions?", "page_title": "How do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2177", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2179", "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains", "title": "Problem", "page_title": "How can I deploy multiple Streamlit apps on different subdomains? - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem You want to deploy multiple Streamlit apps on different subdomains.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2180", "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains", "title": "Solution", "page_title": "How can I deploy multiple Streamlit apps on different subdomains? - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution Like running your Streamlit app on more common ports such as 80, subdomains are handled by a web server like Apache or Nginx: - Set up a web server on a machine with a public IP address, then use a DNS server to point all desired subdomains to your webserver's IP address - Configure your web server to route requests for each subdomain to the different ports that your Streamlit apps are running on For example, let’s say you had two Streamlit apps called Calvin and Hobbes. App Calvin is running on port 8501. You set up app Hobbes to run on port 8502. Your webserver would then be set up to \"listen\" for requests on subdomains calvin.somedomain.com and hobbes.subdomain.com, and route requests to port 8501 and 8502, respectively. Check out these two tutorials for Apache2 and Nginx that deal with setting up a webserver to redirect subdomains to different ports: - Apache2 subdomains - NGinx subdomains", "prev_chunk_id": "chunk_2179", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2181", "url": "https://docs.streamlit.io/knowledge-base/deploy/deploy-multiple-streamlit-apps-different-subdomains", "title": "Still have questions?", "page_title": "How can I deploy multiple Streamlit apps on different subdomains? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2180", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2182", "url": "https://docs.streamlit.io/knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app", "title": "Problem", "page_title": "Invoking a Python subprocess in a deployed Streamlit app - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem Let's suppose you want to invoke a subprocess to run a Python script script.py in your deployed Streamlit app streamlit_app.py. For example, the machine learning library Ludwig is run using a command-line interface, or maybe you want to run a bash script or similar type of process from Python. You have tried the following, but run into dependency issues for script.py, even though you have specified your Python dependencies in a requirements file:", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2183", "url": "https://docs.streamlit.io/knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app", "title": "Solution", "page_title": "Invoking a Python subprocess in a deployed Streamlit app - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution When you run the above code block, you will get the version of Python that is on the system path—not necessarily the Python executable installed in the virtual environment that the Streamlit code is running under. The solution is to detect the Python executable directly with sys.executable: This ensures that script.py is running under the same Python executable as your Streamlit code—where your Python dependencies are installed.", "prev_chunk_id": "chunk_2182", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2184", "url": "https://docs.streamlit.io/knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app", "title": "Relevant links", "page_title": "Invoking a Python subprocess in a deployed Streamlit app - Streamlit Docs", "breadcrumbs": "Relevant links", "content": "Relevant links - https://stackoverflow.com/questions/69947867/run-portion-of-python-code-in-parallel-from-a-streamlit-app/69948545#69948545 - https://discuss.streamlit.io/t/modulenotfounderror-no-module-named-cv2-streamlit/18319/3?u=snehankekre - https://docs.python.org/3/library/sys.html#sys.executable", "prev_chunk_id": "chunk_2183", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2185", "url": "https://docs.streamlit.io/knowledge-base/deploy/invoking-python-subprocess-deployed-streamlit-app", "title": "Still have questions?", "page_title": "Invoking a Python subprocess in a deployed Streamlit app - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2184", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2186", "url": "https://docs.streamlit.io/knowledge-base/deploy/does-streamlit-support-wsgi-protocol", "title": "Problem", "page_title": "Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?) - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem You're not sure whether your Streamlit app can be deployed with gunicorn.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2187", "url": "https://docs.streamlit.io/knowledge-base/deploy/does-streamlit-support-wsgi-protocol", "title": "Solution", "page_title": "Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?) - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution Streamlit does not support the WSGI protocol at this time, so deploying Streamlit with (for example) gunicorn is not currently possible. Check out this forum thread regarding deploying Streamlit in a gunicorn-like manner to see how other users have accomplished this.", "prev_chunk_id": "chunk_2186", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2188", "url": "https://docs.streamlit.io/knowledge-base/deploy/does-streamlit-support-wsgi-protocol", "title": "Still have questions?", "page_title": "Does Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?) - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2187", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2189", "url": "https://docs.streamlit.io/knowledge-base/deploy/resource-limits", "title": "Argh. This app has gone over its resource limits", "page_title": "Argh. This app has gone over its resource limits - Streamlit Docs", "breadcrumbs": "Argh. This app has gone over its resource limits", "content": "Argh. This app has gone over its resource limits Sorry! It means you've hit the resource limits of your Streamlit Community Cloud account. There are a few things you can change in your app to make it less resource-hungry: - Reboot your app (temporary fix) - Usest.cache_dataorst.cache_resourceto load models or data only once - Restrict the cache size withttlormax_entries - Move big datasets to a database - Profile your app's memory usage Check out our blog post on \"Common app problems: Resource limits\" for more in-depth tips prevent your app from hitting the resource limits of the Streamlit Community Cloud. Related forum posts: - https://discuss.streamlit.io/t/common-app-problems-resource-limits/16969 - https://blog.streamlit.io/common-app-problems-resource-limits/ We offer free resource increases only to support nonprofits or educational organizations on a case-by-case basis. If you are a nonprofit or educational organization, please complete this form and we will review your submission as soon as possible. Once the increase is completed, you will receive an email from the Streamlit marketing team with a confirmation that the increase has been applied.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2190", "url": "https://docs.streamlit.io/knowledge-base/deploy/resource-limits", "title": "Still have questions?", "page_title": "Argh. This app has gone over its resource limits - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2189", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2191", "url": "https://docs.streamlit.io/knowledge-base/deploy/remote-start", "title": "App is not loading when running remotely", "page_title": "App is not loading when running remotely - Streamlit Docs", "breadcrumbs": "App is not loading when running remotely", "content": "App is not loading when running remotely Below are a few common errors that occur when users spin up their own solution to host a Streamlit app remotely. To learn about a deceptively simple way to host Streamlit apps that avoids all the issues below, check out Streamlit Community Cloud.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2192", "url": "https://docs.streamlit.io/knowledge-base/deploy/remote-start", "title": "Symptom #1: The app never loads", "page_title": "App is not loading when running remotely - Streamlit Docs", "breadcrumbs": "Symptom #1: The app never loads", "content": "Symptom #1: The app never loads When you enter the app's URL in a browser and all you see is a blank page, a \"Page not found\" error, a \"Connection refused\" error, or anything like that, first check that Streamlit is actually running on the remote server. On a Linux server you can SSH into it and then run: If you see Streamlit running, the most likely culprit is the Streamlit port not being exposed. The fix depends on your exact setup. Below are three example fixes: - Try port 80:Some hosts expose port 80 by default. To set Streamlit to use that port, start Streamlit with the--server.portoption:streamlit run my_app.py --server.port=80 - AWS EC2 server: First, click on your instance in theAWS Console. Then scroll down and click onSecurity Groups→Inbound→Edit. Next, add aCustom TCPrule that allows thePort Range8501withSource0.0.0.0/0. - Other types of server: Check the firewall settings. If that still doesn't solve the problem, try running a simple HTTP server instead of Streamlit, and seeing if that works correctly. If it does, then you know the problem lies somewhere in your Streamlit app or configuration (in which case you should ask for help in our forums!) If not, then it's definitely unrelated to Streamlit. How to start a simple HTTP server:", "prev_chunk_id": "chunk_2191", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2193", "url": "https://docs.streamlit.io/knowledge-base/deploy/remote-start", "title": "Symptom #2: The app says \"Please wait...\" or shows skeleton elements forever", "page_title": "App is not loading when running remotely - Streamlit Docs", "breadcrumbs": "Symptom #2: The app says \"Please wait...\" or shows skeleton elements forever", "content": "Symptom #2: The app says \"Please wait...\" or shows skeleton elements forever This symptom appears differently starting from version 1.29.0. For earlier versions of Streamlit, a loading app shows a blue box in the center of the page with a \"Please wait...\" message. Starting from version 1.29.0, a loading app shows skeleton elements. If this loading screen does not go away, the underlying cause is likely one of the following: - Using port 3000 which is reserved for internal development. - MisconfiguredCORSprotection. - Server is stripping headers from the Websocket connection, thereby breaking compression. To diagnose the issue, first make sure you are not using port 3000. If in doubt, try port 80 as described above. Next, try temporarily disabling CORS protection by running Streamlit with the --server.enableCORS flag set to false: If this fixes your issue, you should re-enable CORS protection and then set browser.serverAddress to the URL of your Streamlit app. If the issue persists, try disabling websocket compression by running Streamlit with the --server.enableWebsocketCompression flag set to false If this fixes your issue, your server setup is likely stripping the Sec-WebSocket-Extensions HTTP header that is used to negotiate Websocket compression. Compression is not required for Streamlit to work, but it's strongly recommended as it improves performance. If you'd like to turn it back on, you'll need to find which part of your infrastructure is stripping the Sec-WebSocket-Extensions HTTP header and change that behavior.", "prev_chunk_id": "chunk_2192", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2194", "url": "https://docs.streamlit.io/knowledge-base/deploy/remote-start", "title": "Symptom #3: Unable to upload files when running in multiple replicas", "page_title": "App is not loading when running remotely - Streamlit Docs", "breadcrumbs": "Symptom #3: Unable to upload files when running in multiple replicas", "content": "Symptom #3: Unable to upload files when running in multiple replicas If the file uploader widget returns an error with status code 403, this is probably due to a misconfiguration in your app's XSRF protection logic. To diagnose the issue, try temporarily disabling XSRF protection by running Streamlit with the --server.enableXsrfProtection flag set to false: If this fixes your issue, you should re-enable XSRF protection and try one or both of the following: - Setbrowser.serverAddressandbrowser.serverPortto the URL and port of your Streamlit app. - Configure your app to use the same secret across every replica by setting theserver.cookieSecretconfig option to the same hard-to-guess string everywhere.", "prev_chunk_id": "chunk_2193", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2195", "url": "https://docs.streamlit.io/knowledge-base/deploy/remote-start", "title": "Still have questions?", "page_title": "App is not loading when running remotely - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2194", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2196", "url": "https://docs.streamlit.io/knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud", "title": "Overview", "page_title": "How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud? - Streamlit Docs", "breadcrumbs": "Overview", "content": "Overview By default, files uploaded using st.file_uploader() are limited to 200MB. You can configure this using the server.maxUploadSize config option. Streamlit provides four different ways to set configuration options: - In aglobal config fileat~/.streamlit/config.tomlfor macOS/Linux or%userprofile%/.streamlit/config.tomlfor Windows:[server] maxUploadSize = 200 - In aper-project config fileat$CWD/.streamlit/config.toml, where$CWDis the folder you're running Streamlit from. - ThroughSTREAMLIT_*environment variables, such as:export STREAMLIT_SERVER_MAX_UPLOAD_SIZE=200 - Asflags on the command linewhen runningstreamlit run:streamlit run your_script.py --server.maxUploadSize 200 Which of the four options should you choose for an app deployed to Streamlit Community Cloud? 🤔", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2197", "url": "https://docs.streamlit.io/knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud", "title": "Solution", "page_title": "How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud? - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution When deploying your app to Streamlit Community Cloud, you should use option 1. Namely, set the maxUploadSize config option in a global config file (.streamlit/config.toml) uploaded to your app's GitHub repo. 🎈 For example, to increase the upload limit to 400MB, upload a .streamlit/config.toml file containing the following lines to your app's GitHub repo:", "prev_chunk_id": "chunk_2196", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2198", "url": "https://docs.streamlit.io/knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud", "title": "Relevant resources", "page_title": "How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud? - Streamlit Docs", "breadcrumbs": "Relevant resources", "content": "Relevant resources - Streamlit drag and drop capping at 200MB, need workaround - File uploader widget API - How to set Streamlit configuration options", "prev_chunk_id": "chunk_2197", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2199", "url": "https://docs.streamlit.io/knowledge-base/deploy/increase-file-uploader-limit-streamlit-cloud", "title": "Still have questions?", "page_title": "How do I increase the upload limit of st.file_uploader on Streamlit Community Cloud? - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2198", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2200", "url": "https://docs.streamlit.io/knowledge-base/dependencies/module-not-found-error", "title": "Problem", "page_title": "ModuleNotFoundError No module named - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem You receive the error ModuleNotFoundError: No module named when you deploy an app on Streamlit Community Cloud.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2201", "url": "https://docs.streamlit.io/knowledge-base/dependencies/module-not-found-error", "title": "Solution", "page_title": "ModuleNotFoundError No module named - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution This error occurs when you import a module on Streamlit Community Cloud that isn’t included in your requirements file. Any external Python dependencies that are not distributed with a standard Python installation should be included in your requirements file. E.g. You will see ModuleNotFoundError: No module named 'sklearn' if you don’t include scikit-learn in your requirements file and import sklearn in your app. Related forum posts: - https://discuss.streamlit.io/t/getting-error-modulenotfounderror-no-module-named-beautifulsoup/9126 - https://discuss.streamlit.io/t/modulenotfounderror-no-module-named-vega-datasets/16354", "prev_chunk_id": "chunk_2200", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2202", "url": "https://docs.streamlit.io/knowledge-base/dependencies/module-not-found-error", "title": "Still have questions?", "page_title": "ModuleNotFoundError No module named - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2201", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2203", "url": "https://docs.streamlit.io/knowledge-base/dependencies/libgl", "title": "Problem", "page_title": "ImportError libGL.so.1 cannot open shared object file No such file or directory - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem You receive the error ImportError libGL.so.1 cannot open shared object file No such file or directory when using OpenCV in your app deployed on Streamlit Community Cloud.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2204", "url": "https://docs.streamlit.io/knowledge-base/dependencies/libgl", "title": "Solution", "page_title": "ImportError libGL.so.1 cannot open shared object file No such file or directory - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution If you use OpenCV in your app, include opencv-python-headless in your requirements file on Streamlit Community Cloud in place of opencv_contrib_python and opencv-python. If opencv-python is a required (non-optional) dependency of your app or a dependency of a library used in your app, the above solution is not applicable. Instead, you can use the following solution: Create a packages.txt file in your repo with the following line to install the apt-get dependency libgl:", "prev_chunk_id": "chunk_2203", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2205", "url": "https://docs.streamlit.io/knowledge-base/dependencies/libgl", "title": "Still have questions?", "page_title": "ImportError libGL.so.1 cannot open shared object file No such file or directory - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2204", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2206", "url": "https://docs.streamlit.io/knowledge-base/dependencies/no-matching-distribution", "title": "Problem", "page_title": "ERROR No matching distribution found for - Streamlit Docs", "breadcrumbs": "Problem", "content": "Problem You receive the error ERROR: No matching distribution found for when you deploy an app on Streamlit Community Cloud.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2207", "url": "https://docs.streamlit.io/knowledge-base/dependencies/no-matching-distribution", "title": "Solution", "page_title": "ERROR No matching distribution found for - Streamlit Docs", "breadcrumbs": "Solution", "content": "Solution This error occurs when you deploy an app on Streamlit Community Cloud and have one or more of the following issues with your Python dependencies in your requirements file: - The package is part of thePython Standard Library. E.g. You will seeERROR: No matching distribution found for base64if you includebase64in your requirements file, as it is part of the Python Standard Library. The solution is to not include the package in your requirements file. Only include packages in your requirements file that are not distributed with a standard Python installation. - The package name in your requirements file is misspelled. Double-check the package name before including it in your requirements file. - The package does not support the operating system on which your Streamlit app is running. E.g. You seeERROR: No matching distribution found for pywin32while deploying to Streamlit Community Cloud. Thepywin32module provides access to many of the Windows APIs from Python. Apps deployed to Streamlit Community Cloud are executed in a Linux environment. As such,pywin32fails to install on non-Windows systems, including on Streamlit Community Cloud. The solution is to either excludepywin32from your requirements file, or deploy your app on a cloud service offering Windows machines. Related forum posts: - https://discuss.streamlit.io/t/error-no-matching-distribution-found-for-base64/15758 - https://discuss.streamlit.io/t/error-could-not-find-a-version-that-satisfies-the-requirement-pywin32-301-from-versions-none/15343/2", "prev_chunk_id": "chunk_2206", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2208", "url": "https://docs.streamlit.io/knowledge-base/dependencies/no-matching-distribution", "title": "Still have questions?", "page_title": "ERROR No matching distribution found for - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2207", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2209", "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github", "title": "Overview", "page_title": "How to install a package not on PyPI/Conda but available on GitHub - Streamlit Docs", "breadcrumbs": "Overview", "content": "Overview Are you trying to deploy your app to Streamlit Community Cloud, but don't know how to specify a Python dependency in your requirements file that is available on a public GitHub repo but not any package index like PyPI or Conda? If so, continue reading to find out how! Let's suppose you want to install SomePackage and its Python dependencies from GitHub, a hosting service for the popular version control system (VCS) Git. And suppose SomePackage is found at the the following URL: https://github.com/SomePackage.git. pip (via requirements.txt) supports installing from GitHub. This support requires a working executable to be available (for Git). It is used through a URL prefix: git+.", "prev_chunk_id": null, "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2210", "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github", "title": "Specify the GitHub web URL", "page_title": "How to install a package not on PyPI/Conda but available on GitHub - Streamlit Docs", "breadcrumbs": "Specify the GitHub web URL", "content": "Specify the GitHub web URL To install SomePackage, innclude the following in your requirements.txt file: You can even specify a \"git ref\" such as branch name, a commit hash or a tag name, as shown in the examples below.", "prev_chunk_id": "chunk_2209", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2211", "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github", "title": "Specify a Git branch name", "page_title": "How to install a package not on PyPI/Conda but available on GitHub - Streamlit Docs", "breadcrumbs": "Specify a Git branch name", "content": "Specify a Git branch name Install SomePackage by specifying a branch name such as main, master, develop, etc, in requirements.txt:", "prev_chunk_id": "chunk_2210", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2212", "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github", "title": "Specify a commit hash", "page_title": "How to install a package not on PyPI/Conda but available on GitHub - Streamlit Docs", "breadcrumbs": "Specify a commit hash", "content": "Specify a commit hash Install SomePackage by specifying a commit hash in requirements.txt:", "prev_chunk_id": "chunk_2211", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2213", "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github", "title": "Specify a tag", "page_title": "How to install a package not on PyPI/Conda but available on GitHub - Streamlit Docs", "breadcrumbs": "Specify a tag", "content": "Specify a tag Install SomePackage by specifying a tag in requirements.txt:", "prev_chunk_id": "chunk_2212", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2214", "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github", "title": "Limitations", "page_title": "How to install a package not on PyPI/Conda but available on GitHub - Streamlit Docs", "breadcrumbs": "Limitations", "content": "Limitations It is currently not possible to install private packages from private GitHub repos using the URI form: where version is a tag, a branch, or a commit. And token is a personal access token with read only permissions. Streamlit Community Cloud only supports installing public packages from public GitHub repos.", "prev_chunk_id": "chunk_2213", "next_chunk_id": null, "type": "section"},
{"chunk_id": "chunk_2215", "url": "https://docs.streamlit.io/knowledge-base/dependencies/install-package-not-pypi-conda-available-github", "title": "Still have questions?", "page_title": "How to install a package not on PyPI/Conda but available on GitHub - Streamlit Docs", "breadcrumbs": "Still have questions?", "content": "Still have questions? Our forums are full of helpful information and Streamlit experts.", "prev_chunk_id": "chunk_2214", "next_chunk_id": null, "type": "section"}
]